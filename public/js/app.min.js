angular.module('App', [

    'ui.router',

    'ngStorage',
    'ngMaterial',
    'ngSanitize',

    'md.data.table',

    'ngFileUpload',
    //'angular-loading-bar',
    //'angularResizable',
    'nvd3',
    'ui.utils.masks',
    //'as.sortable',
    //'ngCsv',
    'angular-img-cropper',
    //'indexedDB',
    'enterStroke',
    'printThis',
    'textAngular',
    'SeccionCtrl',
    
    'CRUD',
    'CRUDDialogCtrl',
    'ConfirmDeleteCtrl',
    'ImageEditor_DialogCtrl',
    'BasicDialogCtrl',
    'Filters',

    'appRoutes',
    'appConfig',
    'appFunctions',

    'LoginCtrl',
    'MainCtrl',
    'HomeCtrl',

    'MiTecnicoAmigoCtrl',
    'ArticuloDiagCtrl',
    'SolicitudesDetalleCtrl',

    'UsuariosCtrl',
    'UsuariosOperadorCtrl',
    'UsuarioFincaCtrl', // Luigi
    'UsuariosImportarCtrl',
    'UsuarioOrganizacionCtrl', // Luigi
    'UsuarioLaboresCtrl', // Luigi
    'ArticulosCtrl',
    'Articulos_ArticuloEditorCtrl',
    'CasosCtrl', // Luigi
    'Casos_NovedadesCtrl', // Luigi
    'LineasProductivasCtrl', // Luigi
    //'MitecnicoAmigoInicioCtrl', // Luigi

    //Inicio Dev Angélica
    'ContactoCtrl',
    'ArticulomuroEditDialogCtrl',
    'ConfiguracionCtrl',
    'ListaEditDialogCtrl',
    'LotesFincaCtrl',
    'FincasMifincaCtrl',
    //Fin Dev Angélica

    'OrganizacionesCtrl',
    'OrganizacionDiagCtrl',
    'CultivosCtrl',
    'FincasCtrl',
    'FincaDiagCtrl',
    'PerfilesCtrl', // Luigi
    'EventosCtrl',
    'FincaEventosCtrl',

    // 'PerfilesCtrl',
    // Zonas Agroambientales
    'ZonasCtrl',
    'Zonas_ZonaEditorCtrl',
    'LaboresCtrl',
    'LaboresDiagCtrl',
    'LotesCtrl',
    'LoteDiagCtrl',
    'Labores_LaborEditorCtrl',

    'FondoRotatorio_CreditosCtrl', //CAOH
    'FondoRotatorio_NuevoCreditoDiagCtrl', //CAOH
    'FondoRotatorio_Creditos_PayDialogCtrl', //CAOH
    'FondoRotatorio__Creditos_CreditoDialogCtrl', //CAOH
    'FondoRotatorio__Creditos_ReciboDialogCtrl', //CAOH
    'CreditoSrv', //CAOH
    'OpcionesCtrl',
    'FondoRotatorio_ListadoCtrl', //CAOH
    'FondoRotatorio_MisCreditosCtrl', //CAOH
    'FondoRotatorio__EstadisticasCtrl', //CAOH
    'FondoRotatorio_ConfiguracionCtrl', //JCMR

    'Estadisticas__Data_RemarkCtrl',
    'Estadisticas__Chart_ColCtrl',
    'Estadisticas__Chart_BarCtrl',
    'Estadisticas__Chart_PieCtrl',
    'Estadisticas__Table_BasicCtrl',
    'Estadisticas__Table_WithSubtablesCtrl',
    'Estadisticas_RepDialogCtrl',

    //Controladores para la Seccion Logistica y Coemrcial
    'FichasTecnicasCtrl',
    'NuevaFichaTecnicaCtrl',
    'ClientesCtrl',

]);
angular.module('appConfig', [])
    .config(['$mdThemingProvider', '$mdIconProvider', '$mdDateLocaleProvider',
        function($mdThemingProvider, $mdIconProvider, $mdDateLocaleProvider) {

            $mdThemingProvider.theme('default')
                .primaryPalette('green', { 'default': '700' });

            $mdThemingProvider.theme('Transparent', 'default')
                .primaryPalette('grey', { 'default': '900' })
                .accentPalette('yellow').dark();

            $mdDateLocaleProvider.formatDate = function(date) {
                var m = moment(date);
                return m.isValid() ? m.format('L') : ''; // YYYY-MM-DD
            };

            //Icons
            var icons = {
                'md-plus': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-close': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/></svg>',
                'md-arrow-back': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/></svg>',
                'md-apps': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><g transform="translate(3, 3)"><circle cx="2" cy="2" r="2"></circle><circle cx="2" cy="9" r="2"></circle><circle cx="2" cy="16" r="2"></circle><circle cx="9" cy="2" r="2"></circle><circle cx="9" cy="9" r="2"></circle><circle cx="16" cy="2" r="2"></circle><circle cx="16" cy="9" r="2"></circle><circle cx="16" cy="16" r="2"></circle><circle cx="9" cy="16" r="2"></circle></g></svg>',
                'md-enter': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M11 5v5.59H7.5l4.5 4.5 4.5-4.5H13V5h-2zm-5 9c0 3.31 2.69 6 6 6s6-2.69 6-6h-2c0 2.21-1.79 4-4 4s-4-1.79-4-4H6z"/></svg>',
                'md-save': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M17 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V7l-4-4zm-5 16c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3zm3-10H5V5h10v4z"/></svg>',
                'md-delete': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-bars': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/></svg>',
                'md-more-v': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/></svg>',
                'md-more-h': '<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z"/></svg>',
                'md-search': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-chevron-down': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-check': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/></svg>',
                'md-edit': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-settings': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M19.43 12.98c.04-.32.07-.64.07-.98s-.03-.66-.07-.98l2.11-1.65c.19-.15.24-.42.12-.64l-2-3.46c-.12-.22-.39-.3-.61-.22l-2.49 1c-.52-.4-1.08-.73-1.69-.98l-.38-2.65C14.46 2.18 14.25 2 14 2h-4c-.25 0-.46.18-.49.42l-.38 2.65c-.61.25-1.17.59-1.69.98l-2.49-1c-.23-.09-.49 0-.61.22l-2 3.46c-.13.22-.07.49.12.64l2.11 1.65c-.04.32-.07.65-.07.98s.03.66.07.98l-2.11 1.65c-.19.15-.24.42-.12.64l2 3.46c.12.22.39.3.61.22l2.49-1c.52.4 1.08.73 1.69.98l.38 2.65c.03.24.24.42.49.42h4c.25 0 .46-.18.49-.42l.38-2.65c.61-.25 1.17-.59 1.69-.98l2.49 1c.23.09.49 0 .61-.22l2-3.46c.12-.22.07-.49-.12-.64l-2.11-1.65zM12 15.5c-1.93 0-3.5-1.57-3.5-3.5s1.57-3.5 3.5-3.5 3.5 1.57 3.5 3.5-1.57 3.5-3.5 3.5z"/></svg>',
                'md-reorder': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M3 15h18v-2H3v2zm0 4h18v-2H3v2zm0-8h18V9H3v2zm0-6v2h18V5H3z"/></svg>',
                'md-drag-handle': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" ><defs><path id="a" d="M0 0h24v24H0V0z"/></defs><clipPath id="b"><use xlink:href="#a" overflow="visible"/></clipPath><path clip-path="url(#b)" d="M20 9H4v2h16V9zM4 15h16v-2H4v2z"/></svg>',
                'md-format-quote': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M7.17 17c.51 0 .98-.29 1.2-.74l1.42-2.84c.14-.28.21-.58.21-.89V8c0-.55-.45-1-1-1H5c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2l-1.03 2.06c-.45.89.2 1.94 1.2 1.94zm10 0c.51 0 .98-.29 1.2-.74l1.42-2.84c.14-.28.21-.58.21-.89V8c0-.55-.45-1-1-1h-4c-.55 0-1 .45-1 1v4c0 .55.45 1 1 1h2l-1.03 2.06c-.45.89.2 1.94 1.2 1.94z"/></svg>',
                'md-insert-comment': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path fill="none" d="M0 0h24v24H0V0z"/><path d="M20 2H4c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h14l4 4V4c0-1.1-.9-2-2-2zm-3 12H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1zm0-3H7c-.55 0-1-.45-1-1s.45-1 1-1h10c.55 0 1 .45 1 1s-.45 1-1 1z"/></svg>',
                'md-calendar': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M20 3h-1V1h-2v2H7V1H5v2H4c-1.1 0-2 .9-2 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 18H4V8h16v13z"/><path fill="none" d="M0 0h24v24H0z"/></svg>',
                'md-calendar-event': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-time': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/><path d="M0 0h24v24H0z" fill="none"/><path d="M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z"/></svg>',
                'md-timer': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M0 0h24v24H0z" fill="none"/><path d="M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z"/></svg>',
                'md-pawn': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><path stroke="null" id="svg_1" d="m9.651737,9.946874l-1.073613,0a0.684375,0.684375 0 0 0 -0.684375,0.684375l0,1.36875a0.684375,0.684375 0 0 0 0.684375,0.684375l0.684375,0l0,0.234826c0,1.882031 -0.177082,3.70418 -1.026563,5.240174l7.528126,0c-0.850764,-1.535994 -1.026563,-3.358143 -1.026563,-5.240174l0,-0.234826l0.684375,0a0.684375,0.684375 0 0 0 0.684375,-0.684375l0,-1.36875a0.684375,0.684375 0 0 0 -0.684375,-0.684375l-1.073613,0c1.257111,-0.786176 2.100176,-2.172035 2.100176,-3.764063a4.448438,4.448438 0 0 0 -8.896876,0c0,1.592027 0.843065,2.977887 2.100176,3.764063zm8.507637,9.581251l-12.318751,0a0.684375,0.684375 0 0 0 -0.684375,0.684375l0,1.36875a0.684375,0.684375 0 0 0 0.684375,0.684375l12.318751,0a0.684375,0.684375 0 0 0 0.684375,-0.684375l0,-1.36875a0.684375,0.684375 0 0 0 -0.684375,-0.684375z" fill="currentColor"/></g></svg>',
                'md-toggle-on': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M17 7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h10c2.76 0 5-2.24 5-5s-2.24-5-5-5zm0 8c-1.66 0-3-1.34-3-3s1.34-3 3-3 3 1.34 3 3-1.34 3-3 3z"/><path fill="none" d="M0 0h24v24H0z"/></svg>',
                'md-money': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M11.8 10.9c-2.27-.59-3-1.2-3-2.15 0-1.09 1.01-1.85 2.7-1.85 1.78 0 2.44.85 2.5 2.1h2.21c-.07-1.72-1.12-3.3-3.21-3.81V3h-3v2.16c-1.94.42-3.5 1.68-3.5 3.61 0 2.31 1.91 3.46 4.7 4.13 2.5.6 3 1.48 3 2.41 0 .69-.49 1.79-2.7 1.79-2.06 0-2.87-.92-2.98-2.1h-2.2c.12 2.19 1.76 3.42 3.68 3.83V21h3v-2.15c1.95-.37 3.5-1.5 3.5-3.55 0-2.84-2.43-3.81-4.7-4.4z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'my-entero': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><text style="cursor: move;" font-weight="bold" stroke="#000" transform="matrix(0.8789344025030082,0,0,0.8789344025030082,-0.006719467772585017,1.6922866269988484) " xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="24" id="svg_1" y="20.046582" x="6.90954" stroke-width="0" fill="#757575">#</text></g></svg>',
                'my-decimal': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg"><g><text font-weight="bold" stroke="#000" transform="matrix(0.8789344025030082,0,0,0.8789344025030082,-0.006719467772585017,1.6922866269988484) " xml:space="preserve" text-anchor="start" font-family="Helvetica, Arial, sans-serif" font-size="19" id="svg_1" y="18.308238" x="0.457763" stroke-width="0" fill="#757575">.01</text></g></svg>',
                'md-color': '<svg height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg"><path d="M24 0H0v24h24z" fill="none"/><path d="M17.66 7.93L12 2.27 6.34 7.93c-3.12 3.12-3.12 8.19 0 11.31C7.9 20.8 9.95 21.58 12 21.58c2.05 0 4.1-.78 5.66-2.34 3.12-3.12 3.12-8.19 0-11.31zM12 19.59c-1.6 0-3.11-.62-4.24-1.76C6.62 16.69 6 15.19 6 13.59s.62-3.11 1.76-4.24L12 5.1v14.49z"/></svg>',
                'md-list': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M3 13h2v-2H3v2zm0 4h2v-2H3v2zm0-8h2V7H3v2zm4 4h14v-2H7v2zm0 4h14v-2H7v2zM7 7v2h14V7H7z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-list-view': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M4 14h4v-4H4v4zm0 5h4v-4H4v4zM4 9h4V5H4v4zm5 5h12v-4H9v4zm0 5h12v-4H9v4zM9 5v4h12V5H9z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-refresh': '<svg width="24" height="24" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-trending-up': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M16 6l2.29 2.29-4.88 4.88-4-4L2 16.59 3.41 18l6-6 4 4 6.3-6.29L22 12V6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>',
                'md-info': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z"/></svg>',
                'md-info-outline': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M11 7h2v2h-2zm0 4h2v6h-2zm1-9C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/></svg>',
                'md-description': '<svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none"/><path d="M14 2H6c-1.1 0-1.99.9-1.99 2L4 20c0 1.1.89 2 1.99 2H18c1.1 0 2-.9 2-2V8l-6-6zm2 16H8v-2h8v2zm0-4H8v-2h8v2zm-3-5V3.5L18.5 9H13z"/></svg>',
                'md-north': '<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" viewBox="0 0 24 24" fill="black" width="18px" height="18px"><rect fill="none" height="24" width="24"/><path d="M5,9l1.41,1.41L11,5.83V22H13V5.83l4.59,4.59L19,9l-7-7L5,9z"/></svg>',
                'md-south': '<svg xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 24 24" height="24" viewBox="0 0 24 24" width="24"><rect fill="none" height="24" width="24"/><path d="M19,15l-1.41-1.41L13,18.17V2H11v16.17l-4.59-4.59L5,15l7,7L19,15z"/></svg>',
            };

            iconp = $mdIconProvider.defaultFontSet('fa');

            angular.forEach(icons, function(icon, k) {
                iconp.icon(k, 'data:image/svg+xml, ' + icon, 24);
            });

        }
    ]);
angular.module('appFunctions', [])
.factory('appFunctions', [ '$rootScope', '$http', '$mdDialog', '$mdSidenav', '$mdToast', '$q', '$state', '$location', '$filter', '$window',
	function($rootScope, $http, $mdDialog, $mdSidenav, $mdToast, $q, $state, $location, $filter, $window){

		var Rs = $rootScope;

		//State
		Rs.stateChanged = function(){
			Rs.State = $state.current;
			Rs.State.route = $location.path().split('/');
		};
		Rs.navTo = function(Dir, params){ $state.go(Dir, params); };
		Rs.Refresh = function() { $state.go($state.current, $state.params, {reload: true}); };

		//Helpers
		Rs.def = function(arg, def) {
			return (typeof arg == 'undefined' ? def : arg);
		};

		Rs.getSize = function(obj) {
			if(typeof obj !== "undefined" && typeof obj !== "null"){
				return Object.keys(obj).length;
			}
		};

		Rs.inArray = function (item, array) {
			if(!array) return false;
			return (-1 !== array.indexOf(item));
		};

		Rs.getIndex = function(array, keyval, key){
			var key = Rs.def(key, 'id');
			return $filter('getIndex')(array, keyval, key);
		};

		Rs.updateArray = function(array, newelm, key){
			var key = Rs.def(key, 'id');
			var keyval = newelm[key];
			var I = Rs.getIndex(array, keyval, key);
			array[I] = newelm;
		};

		Rs.removeArrayElm = (array, index) => {
			array.splice(index,1);
		};

		Rs.arrayPluck = (array, prop) => {
			return Array.from(new Set(array.map(obj => obj[prop])))
		};

		Rs.http = function(url, data, scp, prop, method){
			var method = Rs.def(method, 'POST');
			var data = Rs.def(data, {});
			var prop = Rs.def(prop, false);

			return $q(function(res, rej) {
				$http({
					method: method,
					url: url,
					data: data
				}).then(function(r){
					if(prop) scp[prop] = r.data;
					res(r.data);
				}, function(r){
					Rs.showToast(r.data.Msg, 'Error');
					rej(r.data);
				});
			});
		};

		Rs.found = function(needle, haysack, key, msg, except){
			var except = Rs.def(except, false);
			var Found = false;

			angular.forEach(haysack, function(elm){
				if(elm[key].toUpperCase().trim() == needle.toUpperCase().trim()){
					if(except){
						if(elm[except[0]] != except[1]) Found = true;
					}else{
						Found = true;
					}
				};
			});
			if(Found){
				var msg = Rs.def(msg, needle+' ya existe.');
				if(msg !== '') Rs.showToast(msg, 'Error');
			}
			return Found;
		};

		Rs.prepFields = function(Fields, Model){
			var Model = Rs.def(Model, {});
			angular.forEach(Fields, function(F, i){
				Model[F['Nombre']] = F['Value'];
			});
			return Model;
		};

		Rs.submitForm = (name) => {
			Rs.$broadcast('makeSubmit', {formName: name});
		};

		Rs.download = function(strData, strFileName, strMimeType) {
			var D = document,
			    a = D.createElement("a");
			    strMimeType= strMimeType || "application/octet-stream";

			if (navigator.msSaveBlob) { // IE10
			    return navigator.msSaveBlob(new Blob([strData], {type: strMimeType}), strFileName);
			};

			if ('download' in a) { //html5 A[download]
			    a.href = "data:" + strMimeType + "," + encodeURIComponent(strData);
			    a.setAttribute("download", strFileName);
			    a.innerHTML = "downloading...";
			    D.body.appendChild(a);
			    setTimeout(function() {
			        a.click();
			        D.body.removeChild(a);
			    }, 66);
			    return true;
			};

			//do iframe dataURL download (old ch+FF):
			var f = D.createElement("iframe");
			D.body.appendChild(f);
			f.src = "data:" +  strMimeType   + "," + encodeURIComponent(strData);

			setTimeout(function() {
			    D.body.removeChild(f);
			}, 333);

			return true;
		};



		//Sidenav
		Rs.toogleSidenav = function(navID){
			$mdSidenav(navID).toggle();
		};



		//Quick Lauch
		Rs.showToast = function(Msg, Type, Delay = 5000, Position){

			var Type = Rs.def(Type, 'Normal');
			var Position = Rs.def(Position, 'bottom left')

			var Templates = {
				Normal: '<md-toast class="md-toast-normal"><span flex>' + Msg + '<span></md-toast>',
				Error:  '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>',
				Success:  '<md-toast class="md-toast-success"><span flex>' + Msg + '<span></md-toast>',
			};
			return $mdToast.show({
				template: Templates[Type],
				hideDelay: Delay,
				position: Position
			});
		};





		//Dialogs
		Rs.CancelDiag = () => {
			$mdDialog.cancel();
		};

		Rs.BasicDialog = function(params) {
			var DefConfig = {
				Theme: 'default',
				Flex: 30,
				Title: 'Crear',
				Fields: [
					{ Nombre: 'Nombre',  Value: '', Required: true }
				],
				Confirm: { Text: 'Crear' },
				HasDelete: false,
				controller: 'BasicDialogCtrl',
				templateUrl: '/templates/dialogs/basic-string.html',
				fullscreen: true,
				clickOutsideToClose: true,
				multiple: true,
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.prepFields = (Fields) => {
			var F = {};
			angular.forEach(Fields, (i) => {
				F[i.Nombre] = i.Value;
			});

			return F;
		};

		Rs.ListSelector = function(List, Config, ev){
			var List = Rs.def(List, null);
			var DefConfig = {
				controller: 'ListSelectorCtrl',
				templateUrl: '/templates/dialogs/ListSelector.html',
				clickOutsideToClose: true,
				hasBackdrop: true,
				fullscreen: false,
				multiple: true,
				parent: null,
				remoteUrl: false,
				remoteMethod: 'POST',
				remoteData: {},
				remoteQuery: false,
				remoteListName: 'Nombre',
				remoteListLogo: false,
				remoteListIconFn: false,
				searchPlaceholder: 'Buscar',
				dialog_class: '',
				element_class: '',
			};
			var Config = angular.extend(DefConfig, Config);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config, List: List },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
				parent: Config.parent
			});
		};
		
		Rs.Confirm = function(params){
			var DefConfig = {
				Theme: 'default',
				Titulo: '¿Seguro que desea realizar esta acción?',
				Detail: '',
				Buttons: [
					{ Text: 'Ok', Class: 'md-raised md-primary', Value: true }
				],
				Icon: false,
				hasCancel: true,
				CancelText: 'Cancelar',
				controller: 'ConfirmCtrl',
				templateUrl: '/templates/dialogs/confirm.html',
				fullscreen: false,
				clickOutsideToClose: true,
				multiple: true
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.confirmDelete = function(params){
			var DefConfig = {
				Theme: 'Danger',
				Title: '¿Eliminar?',
				Detail: 'Esta acción no se puede deshacer',
				ConfirmText: 'Eliminar',
				controller: 'ConfirmDeleteCtrl',
				templateUrl: '/templates/dialogs/confirm-delete.html',
				fullscreen: false,
				clickOutsideToClose: true,
				multiple: true,
			};

			var Config = angular.extend(DefConfig, params);

			return $mdDialog.show({
				controller: Config.controller,
				templateUrl: Config.templateUrl,
				locals: { Config : Config },
				clickOutsideToClose: Config.clickOutsideToClose,
				fullscreen: Config.fullscreen,
				multiple: Config.multiple,
			});
		};

		Rs.selectIconDiag = () => {
			return $mdDialog.show({
				controller: 'IconSelectDiagCtrl',
				templateUrl: '/templates/dialogs/icon-selector.html',
				clickOutsideToClose: true,
				multiple: true,
			});
		};

		Rs.getItemsVal = (Items, Comparator, Prop) => {
			var Elm = $filter('filter')(Rs[Items],Comparator)[0];
			return Elm[Prop];
		};



		Rs.FsGet = (arr, ruta, filename, defaultOpen,modeB,skipOrder) => {

			if(!skipOrder){
				var arr = arr.sort((a, b) => {
					var ar = (a[ruta]+'\\'+a[filename]).toLowerCase();
					var br = (b[ruta]+'\\'+b[filename]).toLowerCase();
					return ar > br ? 1 : -1;
				});
			}
			
			var fs = [];
	    	var routes = [];
	    	var defaultOpen = Rs.def(defaultOpen, false);
	    	var modeB    = Rs.def(modeB, false);

	    	angular.forEach(arr, (e) => {
	    		var r = e[ruta];
    			rex = r.split('\\');
    			for (var i = 0; i < rex.length; i++) {
    				for (var n = 0; n <= i; n++) {
    					
    					var subroute = rex.slice(0,n+1).join('\\');
    					if(subroute != "" && !routes.includes(subroute)){
    						routes.push(subroute);
    						var show = defaultOpen || (n == 0);

    						//if( !modeB || ( modeB && e.children > 0 ) ){
    							fs.push({ i: fs.length, type: 'folder', name: rex[n], depth: n, open: defaultOpen, show: show, route: subroute });
    						//};

    					};
	    				
    				};
    			};
    			var depth = (r == "") ? 0 : (rex.length);
    			var show = defaultOpen || (depth == 0);

    			if( !modeB || (modeB && e.children == 0) ){
    				fs.push({ i: fs.length, type: 'file', depth: depth, show: show, route: subroute, file: e });
    			};
    			
	    	});

	    	
	    	return fs;
		};

		Rs.FsOpenFolder = (arr,folder) => {
			folder.open = !folder.open;
			var cont = true;
			angular.forEach(arr, e => {
				if(cont){
					if(e.i > folder.i){
						if(e.depth == folder.depth + 1) e.show = folder.open;
						if(e.depth >  folder.depth + 1) e.show = false;
						if(e.type == 'folder' && e.depth >= folder.depth + 1) e.open = false;
						if(e.type == 'folder' && e.depth == folder.depth) cont = false;
					};
				};
			});
		};

		Rs.FsCalcRoute = (route, newfolder) => {
			//newfolder = newfolder.trim().split('\\').join('');
			if(newfolder == "" || (newfolder.toLowerCase() == route.toLowerCase()) ) return route;
			if(route == "") return newfolder;

			return route + "\\" + newfolder;
		};

		Rs.calcTextColor = (base_color) => {
		    var r, g, b, hsp;
		    if(base_color.match(/^rgb/)) {
		        color = base_color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);
		        r = color[1]; g = color[2]; b = color[3];
		    }else{
		        color = +("0x" + base_color.slice(1).replace(base_color.length < 5 && /./g, '$&$&'));
		        r = color >> 16;
		        g = color >> 8 & 255;
		        b = color & 255;
		    };
		    
		    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
		    hsp = Math.sqrt( 0.299 * (r * r) + 0.587 * (g * g) + 0.114 * (b * b) );
		    var textColor = (hsp>127.5) ? 'black' : 'white';
		
		    return textColor;
		};

		Rs.DownloadExcel = function(excel) {
			var e = {
        		filename: 'Archivo',
        		ext: 'xls',
        		sheets: [
        			{
        				name: 'Hoja1',
        				headers: [],
        				rows: [ ['Sin Datos'] ],
        			}
        		]
			};

			angular.extend(e, excel);
			//console.log(e);return false;

			$http.post('/api/Upload/make-excel', {E: e}, { responseType: 'arraybuffer' }).then(function(r) {
        		var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
		        saveAs(blob, e.filename + '.' + e.ext);
        	});
		};


		Rs.AnioActual = new Date().getFullYear();
		Rs.MesActual  = parseInt(moment().subtract(5,'d').format('MM'));
		Rs.Meses = [
			['01','Ene','Enero'],
			['02','Feb','Febrero'],
			['03','Mar','Marzo'],
			['04','Abr','Abril'],
			['05','May','Mayo'],
			['06','Jun','Junio'],
			['07','Jul','Julio'],
			['08','Ago','Agosto'],
			['09','Sep','Septiembre'],
			['10','Oct','Octubre'],
			['11','Nov','Noviembre'],
			['12','Dic','Diciembre'],
		];

		Rs.periodDateLocale = {
			formatDate: (date) => {
				if(typeof date == 'undefined' || date === null || isNaN(date.getTime()) ){ return null; }else{
					return moment(date).format('YMM');
				}
			}
		};

		return {};
  }
]);
angular.module('appRoutes', [])
.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', 
	function($stateProvider, $urlRouterProvider, $httpProvider){

		$stateProvider
			.state('Login', {
				url: '/Login',
				templateUrl: '/Login'
			})
			.state('Home', {
				url: '/Home',
				templateUrl: '/Home',
				resolve: {
					promiseObj: ($rootScope, $localStorage, $http) => {
						return $http.post('api/usuario/revisar-token', { token: $localStorage.token });
					},
					controller: ($rootScope, $localStorage, promiseObj) => {
						$rootScope.Usuario = promiseObj.data;
					}
				}
			})
			.state('Home.Seccion', {
				url: '/:seccion',
				templateUrl: (params) => { return '/Home/' + params.seccion; }
			})
			.state('Home.Seccion.Subseccion', {
				url: '/:subseccion',
				templateUrl: (params) => { return '/Home/' + params.seccion + '/' + params.subseccion }
			});

		$urlRouterProvider.otherwise('/Home');

		$httpProvider.interceptors.push(['$q', '$localStorage', 
			function ($q, $localStorage) {
				return {
					request: function (config) {
						config.headers = config.headers || {};
						if ($localStorage.token) {
							config.headers.token = $localStorage.token;
						}
						return config;
					},
					response: function (res) {
						return res || $q.when(res);
					},
					responseError: function(rejection) {

					  if ([400, 401, 412].indexOf(rejection.status) !== -1) {
						location.replace("/#/Login");
					  }

					  return $q.reject(rejection);
					}

				};
			}
		]);
	}
]);
//const { cloneDeep } = require("lodash");

angular.module('Articulos_ArticuloEditorCtrl', [])
    .controller('Articulos_ArticuloEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            Ctrl.keyWords = [];
            //FIN DEV ANGÉLICA

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Articulo = angular.copy(Articulo);
            //INICIO DEV ANGÉLICA -- Lists of palabras clave en chips 
            if(Ctrl.Articulo.palabras_clave){
                Ctrl.keyWords = Ctrl.Articulo.palabras_clave.split(",");
            }else{
                Ctrl.keyWords = [];
            }
            //FIN DEV ANGÉLICA

            //INCIO DEV ANGÉLICA --> Lineas productivas
		    $http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
		
		    });
		    //FIN DEV ANGÉLICA

            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/articulos/secciones',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.TiposSeccion = {
                'Parrafo': { Nombre: 'Párrafo', Icono: 'fa-align-justify' },
                'Tabla': { Nombre: 'Tabla', Icono: 'fa-table' },
                'Imagen': { Nombre: 'Imágen', Icono: 'fa-image' }
            };

            Ctrl.getSecciones = () => {
                Ctrl.SeccionesCRUD.setScope('elarticulo', Articulo.id).get();
            };

            Ctrl.getSecciones();

            Ctrl.guardarArticulo = () => {
                //INICIO DEV ANGELICA -- Actualización de palabras clave en chips
                Ctrl.Articulo.palabras_clave = Ctrl.keyWords.join();
                Ctrl.$parent.ArticulosCRUD.update(Ctrl.Articulo).then(() => {
                    var SeccionesCambiadas = Ctrl.SeccionesCRUD.rows.filter(S => S.changed);
                    if (SeccionesCambiadas.length > 0) {
                        Ctrl.SeccionesCRUD.updateMultiple(SeccionesCambiadas).then(() => {
                        });
                    }
                });
            }

            Ctrl.crearSeccion = async(kT) => {

                var ruta = null;
                var contenido = null;
                // Luigi :: Obtener el numero de secciones e incrementar en uno, para el indice.
                var indice = Ctrl.SeccionesCRUD.rows.length + 1;

                if (kT == 'Imagen') {
                    var Img = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600, //Ancho del canvas
                                CanvasHeight: 400, //Alto del canvas
                                CropWidth: 600, //Ancho del recorte que se subirá
                                CropHeight: 400, //Alto del recorte que se subirá
                                MinWidth: 60, //Ancho mínimo del selector
                                MinHeight: 40, //Ancho mínimo del selector
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/articulos_media/' + Articulo.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    if (Img) ruta = Img.Msg;
                }

                if (kT == 'Tabla') {
                    contenido = [
                        ['Uno', 'Dos', 'Tres'],
                        [1, 2, 3],
                        [4, 5, 6],
                        [7, 8, 9]
                    ];
                };

                Ctrl.SeccionesCRUD.add({
                    articulo_id: Articulo.id,
                    indice: indice, // Luigi :: Agregar el campo para el registro.
                    tipo: kT,
                    ruta: ruta,
                    contenido: contenido
                });
            }

            Ctrl.eliminarSeccion = (S) => {
                Rs.confirmDelete({
                    Title: '¿Eliminar la Sección?',
                }).then(R => {
                    if (!R) return;
                    Ctrl.SeccionesCRUD.delete(S)
                        .then(() => { // Luigi :: Despues de borrar, se debe reorganizar el indice de cada seccion
                            angular.forEach(Ctrl.SeccionesCRUD.rows, (S, iS) => { // Luigi :: Recorremos las secciones
                                // Luigi :: Comparamos el indice, si es diferente, se actualiza
                                if (S.indice != iS + 1) {
                                    S.indice = iS + 1;
                                    S.changed = true; // Luigi :: Marcamos el registro para el guardado.
                                }
                            });
                            // Luigi :: Enviamos a guardar los datos modificados.
                            Ctrl.guardarArticulo();
                        });
                });
            };

            //Seccion Tabla
            Ctrl.agregarColumna = (S) => {
                var Tabla = S.contenido;
                angular.forEach(Tabla, (Fila) => {
                    Fila.push('');
                });
                S.changed = true;
            }

            Ctrl.eliminarColumna = (S, kC) => {
                var Tabla = angular.copy(S.contenido);
                angular.forEach(Tabla, (Fila) => {
                    Fila.splice(kC, 1);
                });
                S.contenido = Tabla;
                S.changed = true;
            }

            Ctrl.agregarFila = (S) => {
                var Tabla = S.contenido;
                var NuevaFila = angular.copy(Tabla[0]);
                NuevaFila = NuevaFila.map(V => { return null });

                Tabla.push(NuevaFila);
                S.changed = true;
            }

            Ctrl.eliminarFila = (S, kR) => {
                var Tabla = S.contenido;
                Tabla.splice(kR, 1);
                S.changed = true;
            }

            // Luigi :: Funcion para mover el indice, aumentar o decrementar.
            Ctrl.moverSeccion = (S, N) => {
                // Luigi :: declaramos variables para almacenar valores necesarios en el proceso.
                var nuevoIndice = S.indice + N;
                var elementoObjetivo;
                // Luigi :: Ciclo para validar el numero de indice
                for (let i = 0; i < Ctrl.SeccionesCRUD.rows.length; i++) {
                    if (Ctrl.SeccionesCRUD.rows[i].indice == nuevoIndice)
                        elementoObjetivo = Ctrl.SeccionesCRUD.rows[i];
                }
                // Luigi :: Si el elemenoObjetivo no existe, salimos.
                if (!elementoObjetivo)
                    return;

                // Luigi :: Almacenamos el valor del nuevo indice.
                S.indice = nuevoIndice;
                elementoObjetivo.indice = nuevoIndice - N;
                // Luigi :: Guardamos todos los registros modificados.
                S.changed = true;
                elementoObjetivo.changed = true;
            };     
        }
    ]);
angular.module('ArticulosCtrl', [])
.controller('ArticulosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.idLineaproductiva = undefined;
		Ctrl.filterAutor = "";
		Ctrl.filterKeys = [];
		Ctrl.filterTitulo = "";
	
		Ctrl.ArticulosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/articulos/articulos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'autor' ],
			order_by: [ '-created_at' ]
		});

		Ctrl.getArticulos = () => {
			Ctrl.ArticulosCRUD.get().then(() => {
				Ctrl.Articuloscopy = Ctrl.ArticulosCRUD.rows.slice();
			});
		};

		Ctrl.getArticulos();
			$http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
		    });
		
		Ctrl.nuevoArticulo = () => {

			Ctrl.ArticulosCRUD.dialog({
				usuario_id: Rs.Usuario.id,
				estado: 'Borrador'
			}, {
				title: 'Nuevo Articulo',
				only: ['titulo']
			}).then(r => {
				if(!r) return;
				Ctrl.ArticulosCRUD.add(r);
			});

		};


		Ctrl.editarArticulo = (A) => {
			$mdDialog.show({
				templateUrl: 'Frag/AdministracionGeneral.Articulos_ArticuloEditorDiag',
				controller: 'Articulos_ArticuloEditorCtrl',
				locals: { Articulo: A },
				scope: Ctrl.$new()
			});
		}


		//INICIO DEV ANGÉLICA ---> Filtro de búsqueda 
		Ctrl.suppressSpecialCharacters = (word) => { // suprimir algunos caracteres especiales -  funcion para buscar con tiltes
			return word.toLowerCase()
			.replace("é", "e")
			.replace("á", "a")
			.replace("í", "i")
			.replace("ó", "o")
			.replace("ú", "u");
		}

		Ctrl.filterArticulos = () => {
			//Filtro de linea productiva
			Ctrl.Articuloscopy = Ctrl.ArticulosCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
			if (Ctrl.idLineaproductiva){
				Ctrl.Articuloscopy = Ctrl.Articuloscopy.filter(articulo => articulo.linea_productiva_id === Ctrl.idLineaproductiva);
			}
			//Filtro para autor
			if (Ctrl.filterAutor && Ctrl.filterAutor.length > 2){
				//toUpperCase() --> Para pasarlo a mayúscula
				Ctrl.Articuloscopy = Ctrl.Articuloscopy.filter(articulo => Ctrl.suppressSpecialCharacters(articulo.autor.nombre).indexOf(Ctrl.suppressSpecialCharacters(Ctrl.filterAutor))> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
			}
			//Filtro de palabras clave, los chips
			if(Ctrl.filterKeys && Ctrl.filterKeys.length>0){
				// debugger;
				let index = 0; //Se necesita el índice del artículo que se está recorriendo
				let L = Ctrl.Articuloscopy.length;
				for (i = 0; i<L; i++){
					let found = false; //verificar si el articulo tiene la palabra clave, si la tiene no hace nada porque el articulo está en la lista, si no la tiene hay que eliminarlo
					if(Ctrl.Articuloscopy[index].palabras_clave){
						const keys = Ctrl.Articuloscopy[index].palabras_clave.split(",");
						keys.forEach(palabraClave => {
							Ctrl.filterKeys.forEach(key => {
								if (palabraClave.toUpperCase() === key.toUpperCase()){
									found = true;
								}
							})
						});
					}
					if (!found){
						Ctrl.Articuloscopy.splice(index, 1);
					}else{
						index ++;
						found = false;
					}
				};				
			}
			//Filtro para titulo (podria implementarse el autocompletar y el hamburguer icon)
			if (Ctrl.filterTitulo && Ctrl.filterTitulo.length > 2){
				//toUpperCase() --> Para pasarlo a mayúscula
				Ctrl.Articuloscopy = Ctrl.Articuloscopy.filter(articulo => Ctrl.suppressSpecialCharacters(articulo.titulo).indexOf(Ctrl.suppressSpecialCharacters(Ctrl.filterTitulo))> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
			}
		} //FIN  DEV ANGÉLICA


	}
]);

angular.module('Casos_CasoEditorCtrl', [])
    .controller('Casos_CasoEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Cancel = $mdDialog.cancel;

            Ctrl.Caso = angular.copy(Caso);

            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/Novedades',
                limit: 1000,
                add_append: 'refresh',
            });

            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }
            Ctrl.getCasos();

        }
    ]);
// Inicio del codigo de Luigi
angular.module('Casos_NovedadesCtrl', [])
    .controller('Casos_NovedadesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {

            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                add_append: 'refresh',
                query_with: ["autor"]
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };

        }
    ]);
// Fin del codigo de Luigi

angular.module("CasosCtrl", []).controller("CasosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        var Ctrl = $scope;
        var Rs = $rootScope;

        var TiposCasos = [
            "Consulta General",
            "Apoyo Técnico",
            "Contar Experiencia"
        ];

        Ctrl.tiposCasos = TiposCasos;
        Ctrl.filterTipo = "";
        Ctrl.filterAsociado = "";
        Ctrl.filterLlevacaso = "";

        Ctrl.CasosCRUD = $injector.get("CRUD").config({
            base_url: "/api/casos/casos",
            limit: 1000,
            add_append: "refresh",
            query_with: ["solicitante"],
            order_by: ["-created_at"]
        });
        //Inicio Dev Angélica
        Ctrl.CasosCRUD.setScope("tipo");
        //Fin Dev Angélica

        Ctrl.UsuariosCRUD = $injector
            .get("CRUD")
            .config({ base_url: "/api/usuario/usuarios" });

        Ctrl.getCasos = () => {
            Promise.all([Ctrl.UsuariosCRUD.get()]).then(() => {
                Ctrl.CasosCRUD.get().then(() => {
                	Ctrl.Casoscopy = Ctrl.CasosCRUD.rows.slice();
                });
            });
        };

        Ctrl.getCasos();

        Ctrl.nuevoCaso = () => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: null,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombres"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: TiposCasos[0],
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: "",
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var NuevoCaso = {
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.add(NuevoCaso);
            });
        };

        Ctrl.editarCaso = C => {
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nuevo Caso",
                Fields: [
                    {
                        Nombre: "Asociado",
                        Value: C.solicitante_id,
                        Type: "list",
                        List: Ctrl.UsuariosCRUD.rows,
                        Required: false,
                        Item_Val: "id",
                        Item_Show: "nombres"
                    },
                    {
                        Nombre: "Tipo de Caso",
                        Value: C.tipo,
                        Type: "simplelist",
                        List: TiposCasos,
                        Required: true
                    },
                    {
                        Nombre: "Describe el Caso",
                        Value: C.titulo,
                        Type: "textarea",
                        Required: true,
                        opts: { rows: 3 }
                    }
                ],
                Confirm: { Text: "Crear Caso" }
            }).then(r => {
                if (!r) return;

                var CasoEditado = {
                    id: C.id,
                    titulo: r.Fields[2].Value,
                    solicitante_id: r.Fields[0].Value,
                    tipo: r.Fields[1].Value,
                    asignados: "[]"
                };

                Ctrl.CasosCRUD.update(CasoEditado).then(() => {
                    Ctrl.CasosCRUD.get();
                    Rs.showToast("Caso actualizado");
                });
            });
        };

        Ctrl.eliminarCaso = C => {
            Rs.confirmDelete({
                Title: "¿Eliminar el caso #" + C.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.CasosCRUD.delete(C);
            });
        };

        // Inicia codigo Luigi
        Ctrl.novedadesCaso = C => {
            $mdDialog.show({
                templateUrl: "Frag/AdministracionGeneral.Casos_NovedadesDiag",
                controller: "Casos_NovedadesCtrl",
                locals: {
                    Caso: C
                }
            });
        };
        // Finaliza codigo Luigi

        //INICIO DEV ANGÉLICA
        Ctrl.filterCaso = () => {
            //Filtro de tipo de caso
			Ctrl.Casoscopy = Ctrl.CasosCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
			if (Ctrl.filterTipo && Ctrl.filterTipo.length > 0){ //quiero que se haya digitado alguna cosa en el campo
				Ctrl.Casoscopy = Ctrl.Casoscopy.filter(caso => caso.tipo === Ctrl.filterTipo);
			}
            //Filtro para asociado
			if (Ctrl.filterAsociado && Ctrl.filterAsociado.length > 2){
				//toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
				Ctrl.Casoscopy = Ctrl.Casoscopy.filter(caso => caso.solicitante.nombre.toUpperCase().indexOf(Ctrl.filterAsociado.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
			}
            //Filtro para quien lleva el caso
            debugger;
			if (Ctrl.filterLlevacaso && Ctrl.filterLlevacaso.length > 2){
				//toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
				Ctrl.Casoscopy = Ctrl.Casoscopy.filter(caso => caso.asignados.nombre.toUpperCase().indexOf(Ctrl.filterLlevacaso.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
			}
        } //FIN DEV ANGÉLICA
    }
]);

//INICIO DEV ANGELICA
angular.module('ConfiguracionCtrl', [])
.controller('ConfiguracionCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		//var autoincrementals = ['Si', 'No'];

		Ctrl.ListaCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/lista/listas',
			limit: 1000,
			add_append: 'refresh',
			order_by: [ '-lista' ]
		});


		Ctrl.getListas = () => {
			Promise.all([
				Ctrl.ListaCRUD.get()
			]).then(() => {
			});
			
		};

		Ctrl.getListas();

		/*Ctrl.nuevoUsuario = () => {
			Ctrl.UsuariosCRUD.dialog({}, {
				title: 'Agregar Usuario',
			}).then(r => {
				Ctrl.UsuariosCRUD.add(r).then(() => {
					Rs.showToast('Usuario creado');
				});
			});
		}*/

		Ctrl.nuevaLista = () => {

			Ctrl.ListaCRUD.dialog({}, {
			//Rs.BasicDialog({
				Flex: 30,
				Title: 'Crear Nueva Lista',
				/*Fields: [
					{ Nombre: 'lista',  Value: '', Type: 'textarea', Required: true},
					{ Nombre: 'autoincremental', Value: autoincrementals[0], Type: 'simplelist', List: autoincrementals, Required: true }
				],
				Confirm: { Text: 'Crear Lista' },*/
			}).then(r => {
				if(!r.autoincremental){
					r.autoincremental = false;
				}
				if (!r) return;
				Ctrl.ListaCRUD.add(r).then(() => {
					Rs.showToast('Lista creada');
				});
				/*if(!r) return;
				var NuevaLista = {
					lista: r.Fields[0].Value,
					autoincremental: r.Fields[1].Value === 'Si' ? 1:0
				};

				Ctrl.ListaCRUD.add(NuevaLista);*/
			});

		};

		//INICIO DEV ANGÉLICA 
		//Abre el modal para editar una lista
		Ctrl.editarLista = (O) => {
			$mdDialog.show({
				templateUrl: 'Frag/AdministracionGeneral.ListaEditorDiag',
				controller: 'ListaEditDialogCtrl',
				locals: {Lista: O},
				fullscreen: false,
			}).then(function (resp) {
				//Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', Rs.Usuario.organizacion_id).get();
			}, function (resp) {
			});

		}

		
		Ctrl.eliminarLista = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar la lista #'+C.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.ListaCRUD.delete(C);
			});
		}
	}
]);
//FIN DEV ANGELICA
//INICIO DEV ANGELICA
angular.module('ContactoCtrl', [])
.controller('ContactoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		var Ctrl = $scope;
		var Rs = $rootScope;
		
		var TiposCasos = ['Whatsapp', 'SMS', 'Llamada telefonica'];

		Ctrl.ContactoCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/casos/casos',
			limit: 1000,
			add_append: 'refresh',
			query_with: [ 'solicitante' ],
			order_by: [ '-created_at' ]
		});

		//Inicio Dev Angélica
		//Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia'[ver archivo Caso.php]
		Ctrl.ContactoCRUD.setScope('tipocontacto');
		//Fin Dev Angélica

		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ base_url: '/api/usuario/usuarios' });


		Ctrl.getCasos = () => {
			Promise.all([
				Ctrl.UsuariosCRUD.get()
			]).then(() => {
				Ctrl.ContactoCRUD.get().then(() => {
					//Ctrl.editarArticulo(Ctrl.CasosCRUD.rows[1]);
					Ctrl.Contactoscopy = Ctrl.ContactoCRUD.rows.slice();
				});
			});
			
			
		};

		Ctrl.getCasos();

		Ctrl.nuevoContacto = () => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Crear Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',  Value: null, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso', Value: TiposCasos[0], Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso',       Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Crear Contacto' },
			}).then(r => {
				if(!r) return;

				var NuevoContacto = {
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.add(NuevoContacto);
			});

		};


		Ctrl.editarContacto = (C) => {

			Rs.BasicDialog({
				Flex: 30,
				Title: 'Editar Nuevo Contacto',
				Fields: [
					{ Nombre: 'Asociado',         Value: C.solicitante_id, Type: 'list', List: Ctrl.UsuariosCRUD.rows, Required: false, Item_Val: 'id', Item_Show: 'nombre' },
					{ Nombre: 'Tipo de Caso',     Value: C.tipo, Type: 'simplelist', List: TiposCasos, Required: true },
					{ Nombre: 'Describe el Caso', Value: C.titulo, Type: 'textarea', Required: true, opts: { rows: 3 } }
				],
				Confirm: { Text: 'Editar Contacto' },
			}).then(r => {
				if(!r) return;

				var ContactoEditado = {
					id: C.id,
					titulo: r.Fields[2].Value,
					solicitante_id: r.Fields[0].Value,
					tipo: r.Fields[1].Value,
					asignados: '[]'
				};

				Ctrl.ContactoCRUD.update(ContactoEditado).then(() => {
					Ctrl.ContactoCRUD.get();
				});
				
			});

		}

		Ctrl.eliminarContacto = (C) => {
			Rs.confirmDelete({
				Title: '¿Eliminar el contacto #'+C.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.ContactoCRUD.delete(C);
			});
		}

		//INICIO DEV ANGÉLICA
		Ctrl.filterContacto = () => {
			//Filtro de tipo de contacto
			Ctrl.Contactoscopy = Ctrl.ContactoCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
			//Filtro para Tipo
			if (Ctrl.filterTipo && Ctrl.filterTipo.length > 2){
			//toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
			Ctrl.Contactoscopy = Ctrl.Contactoscopy.filter(C => C.tipo.toUpperCase().indexOf(Ctrl.filterTipo.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
			} 
			//Filtro para buscar Asociado
			if (Ctrl.filterAsociado && Ctrl.filterAsociado.length >= 1){
				//toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
				Ctrl.Contactoscopy = Ctrl.Contactoscopy.filter(C => C.solicitante.nombre.toUpperCase().indexOf(Ctrl.filterAsociado.toUpperCase())> -1);
			} 
		//FIN DEV ANGÉLICA
		}      
	}
]);
//FIN DEV ANGELICA
angular.module("CultivosCtrl", []).controller("CultivosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        
        var Ctrl = $scope;
        var Rs = $rootScope;
        console.log("id_organizacion", Rs.Usuario.organizacion_id);
        Ctrl.zona_select = null;
        
        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.value = 0;

         // Datos para informes estadisticos.

        // Promedio de Produccion.
        // Ctrl.promedioproduccion = 20;
        Ctrl.pp = () => {
            return $http.post('/api/organizaciones/promedioproduccion', {
                organizacion: Rs.Usuario.organizacion_id
            }).then( r => {
                console.log(r);
                bi = r.data[0];
                console.log(r);

                $scope.promedioproduccion = {
                    labels: ['Bim 1', 'Bim 2', 'Bim 3', 'Bim 4', 'Bim 5', 'Bim 6', 'PROY'],
                    data: [ bi.bimestre1, bi.bimestre2, bi.bimestre3, bi.bimestre4, bi.bimestre5, bi.bimestre6, 14.3],
                    backgroundColor: [
                        '#6b77be',
                        '#6b77be',
                        '#6b77be',
                        '#6b77be',
                        '#6b77be',
                        '#6b77be',
                        '#23d959'
                    ],
                };
                var ctx = document.getElementById('promedioproduccion').getContext('2d');
                var myCharBarras = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        datasets: [{
                            label: 'Promedio',
                            data: $scope.promedioproduccion.data,
                            backgroundColor: $scope.promedioproduccion.backgroundColor,
                            borderColor: [
                                'rgba(54, 162, 235, 1)'
                            ],
                            borderWidth: 1
                        }],
                        labels: $scope.promedioproduccion.labels,
                    },
                    options: {
                        scales: { y: { beginAtZero: true } },
                        plugins: {
                            title: {
                                display: true,
                                text: 'PROMEDIOS DE PRODUCCIÓN'
                            }
                        }
                    }
                });
            });
        };
        Ctrl.pp();


        // console.log('pro pro', Ctrl.promedioproduccion);
        //CRUD para recuperar los datos de usuario y Fincas
        Ctrl.FincasCRUD = $injector.get("CRUD").config({
            base_url: "/api/fincas/fincas",
            limit: 1000,
            add_append: "refresh",
            //order_by: ["-created_at"],
            query_scopes: [["organizacionusuario",Rs.Usuario.organizacion_id]],
            query_with: ["zonas", 'eventos', 'usuarios.organizaciones_usuario']
        });
        Ctrl.getFinca = () => {
            Ctrl.FincasCRUD.get().then(() => {
                Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                Ctrl.Fincascopy = Ctrl.FincasCRUD.rows.slice();
                console.log("FINCAS",Ctrl.FincasCRUD.rows);
                /*
                Ctrl.FincasCRUD.setScope("organizacion_id", Rs.Usuario.organizacion_id);
                Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                Ctrl.Fincascopy = Ctrl.FincasCRUD.rows.slice();
                console.log("FINCAS",Ctrl.FincasCRUD.rows);
                */
            });
            
        };
        Ctrl.getFinca();

        //Traer los usuarios de la organización
        Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/usuario/usuarios',
			//limit: 100,
			add_append: 'refresh',
			query_scopes: [["organizacionusuario",Rs.Usuario.organizacion_id]]
		});

        Ctrl.getUsuarios = () => {
            Ctrl.UsuariosCRUD.get().then(() => {
                Ctrl.Usuarios = Ctrl.UsuariosCRUD.rows.slice();
                //console.log("Usu_Orga",Ctrl.Usuarios );
            });
        }

        Ctrl.getUsuarios();
        
        //Fin traer los usuarios




        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['finca', 'organizacion', 'linea_productiva', 'labor']
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.setScope("organizacion_id", Rs.Usuario.organizacion_id);
            Ctrl.LotesCRUD.get().then(() => {
                Ctrl.Lote = Ctrl.LotesCRUD.rows[0];
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
                Ctrl.Lotes = Ctrl.LotesCRUD.rows.slice();
                console.log("Cultivos",Ctrl.Lote);
            });
        };

        Ctrl.getLotes();

        Ctrl.CultivosCRUD = $injector.get("CRUD").config({
            base_url: "/api/cultivos/cultivos",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['zona', 'evento']
        });

        Ctrl.getCultivos = () => {
            Ctrl.CultivosCRUD.setScope('lazona', Ctrl.zona_select);  
            Ctrl.CultivosCRUD.get().then(() => {
                   
            });
           
        };

        Ctrl.nuevoCultivo = () => {
            Ctrl.CultivosCRUD.dialog({
                Flex: 10,
                Title: "Crear Cultivo",

                Confirm: { Text: "Crear Cultivo" }
            }).then(r => {
                if (!r) return;
                Ctrl.CultivosCRUD.add(r);
                Rs.showToast('Cultivo Creado');
            });
        };
        Ctrl.editarCultivo = C => {
            Ctrl.CultivosCRUD.dialog(C, {
                title: "Editar Cultivo" + C.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.CultivosCRUD.delete(C);
                Ctrl.CultivosCRUD.update(r).then(() => {
                    Rs.showToast("Cultivo actualizado");
                });
            });
        };

        Ctrl.eliminarCultivo = C => {
            Rs.confirmDelete({
                Title: "¿Eliminar Cultivo #" + C.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.CultivosCRUD.delete(C);
            });
        };

        Ctrl.obtener_zonas = () =>{
            return $http.post('api/zonas/obtener', {}).then(r => {
                Ctrl.zonas = r.data;
                Ctrl.zona_select = Ctrl.zonas[0].id;
                
            });
        }
        // 

        // 

        Promise.all([
            Ctrl.obtener_zonas()
        ]).then(() => {
            Ctrl.getCultivos();
        });



        // Cargar CRUD angular para Usuarios
        /*
        Ctrl.UsuariosCRUD = $injector.get('CRUD').config({
            base_url: '/api/usuario/usuarios',
            //limit: 100,
            add_append: 'refresh',
            query_with: ['perfil', 'organizaciones_usuario', 'fincas' , 'fincas.eventos']
        });
        
        Ctrl.getUsuarios = () => {
            //if ( Rs.Usuario.organizacion_id > 0 ) {
                Ctrl.UsuariosCRUD.setScope("laorganizacion", Rs.Usuario.organizacion_id); //Me trae las fincas del usuario
                Ctrl.UsuariosCRUD.get().then(() => {
                    console.log("usuarios dentro",Ctrl.UsuariosCRUD.rows);
                    Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice();
                });

            //}
        };
        Ctrl.getUsuarios();
        console.log("usuarios",Ctrl.Usuarioscopy);
        */
       //Fin de carga de usuarios

        var listaMarcadores = [];
        var listaUsuarios = [];
        var listaAreas = [];
        var listaEventos = [];
        var map = new google.maps.Map(document.getElementById('dashboard'), {
            center: {lat: 4.852147911841803, lng: -75.5747982566813},
            mapTypeId: 'hybrid',
            zoom: 16,
            disableDefaultUI: false
        });
        Ctrl.dashboard = function(fincas, usuarios){

            if(fincas == undefined){
                return false;
            }

            $scope.map = map;
            
            const iconBase = "/imgs/";
            const icons = {
                finca: {
                icon: iconBase + "finca-icono.png",
                icon_productor : iconBase + "finca-icono-productor.png",
                icon_evento : "/files/eventos_media/"
                }
            };

            // Acá van los datos de las fincas Arhivo Datos_Elementos_Temporales_Mapa.txt
            
            const datosFincas = {};
            const datosEventos = {};
            const datosUsuarios = {};
            for(const finca in fincas){
                //console.log(fincas[finca].latitud);
                datosFincas[finca] = {
                    centro : {"lat":parseFloat(fincas[finca].latitud), "lng":parseFloat(fincas[finca].longitud)},
                    finca : fincas[finca].nombre,
                    nombre : fincas[finca].usuarios["nombre"],
                    area : fincas[finca].area_total
                };
                if(fincas[finca].eventos.length > 0){
                    datosEventos[finca] ={
                        centro : {"lat":parseFloat(fincas[finca].latitud), "lng":parseFloat(fincas[finca].longitud)},
                        observacion : fincas[finca].eventos[0].observacion,
                        tipo : fincas[finca].eventos[0].evento_id
                    };
                }
            }

            for(const usuario in usuarios){
                if(usuarios[usuario].nombres != undefined && usuarios[usuario].latitud != null && usuarios[usuario].longitud != null){
                    datosUsuarios[usuario] ={
                        centro : {"lat":parseFloat(usuarios[usuario].latitud), "lng":parseFloat(usuarios[usuario].longitud)},
                        nombre : usuarios[usuario].nombre
                    };
                }
            }

            console.log("datos usuario", datosUsuarios);

            // Acá van las areas de las fincas Arhivo Datos_Elementos_Temporales_Mapa.txt            

            var limites = new google.maps.LatLngBounds();
            var infoWindow = new google.maps.InfoWindow();
            
            for(const datoFinca in datosFincas){
                /*
                color = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');
                const circulo = new google.maps.Circle({
                    strokeColor: color,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: color,
                    fillOpacity: 0.45,
                    map,
                    center: datosFincas[datoFinca].centro,
                    radius: datosFincas[datoFinca].hectareas*100,
                  });
                */
                const markerFincas = new google.maps.Marker({position: datosFincas[datoFinca].centro, icon: icons["finca"].icon, map: map});
                limites.extend(datosFincas[datoFinca].centro);
                listaMarcadores.push(markerFincas);
                const infoMarker = `<div class="cuadro" style="display:table;padding: 10px;">
                                        <div style="display: table-cell;width:30%;vertical-align:middle;">
                                            <img src="/imgs/paco_isologo.png" width="150px" />
                                        </div>
                                        <div style="display: table-cell;width:70%;padding: 10px;vertical-align:middle;">
                                            <b>Finca:<b/> ` + datosFincas[datoFinca].finca + `<br/>
                                            <b>Asociado:</b> ` + datosFincas[datoFinca].nombre + `<br/>
                                            <b>Área:</b> ` + datosFincas[datoFinca].area + `Ha <br/>
                                        </div>
                                    </div>`;
                
                markerFincas.addListener("click", function() {
                    infoWindow.setContent(infoMarker);
                    infoWindow.open(map,markerFincas);
                });
                
            }

            for(const datoUsuario in datosUsuarios){
                const markerUsuarios = new google.maps.Marker({position: datosUsuarios[datoUsuario].centro, icon: icons["finca"].icon_productor, map: map});
                limites.extend(datosUsuarios[datoUsuario].centro);
                listaUsuarios.push(markerUsuarios);
                const infoMarker = `<div class="cuadro" style="display:table;padding: 10px;">
                                        <div style="display: table-cell;width:30%;vertical-align:middle;">
                                            <img src="/imgs/paco_isologo.png" width="150px" />
                                        </div>
                                        <div style="display: table-cell;width:70%;padding: 10px;vertical-align:middle;">
                                            <b>` + datosUsuarios[datoUsuario].nombre + `<b/>
                                        </div>
                                    </div>`;
                
                markerUsuarios.addListener("click", function() {
                    infoWindow.setContent(infoMarker);
                    infoWindow.open(map,markerUsuarios);
                });
                
            }

            //Ubicar el Mapa para que muestre todos los Marcadores
            map.fitBounds(limites);

            //Vienen los eventos
            for(const datoEvento in datosEventos){
                const markerEvento = new google.maps.Marker({position: datosEventos[datoEvento].centro, icon: icons["finca"].icon_evento + datosEventos[datoEvento].tipo + ".png", map: map});
                listaEventos.push(markerEvento);
                
            }

            //Construir todos los poligonos

            const areasFincas = {};
            for(const finca in Ctrl.Lotes){
                //console.log(finca,Ctrl.Lotes[finca].coordenadas);
                areasFincas[finca] = {
                    poligono : Ctrl.Lotes[finca].coordenadas
                };
            }
            console.log("coordenadas",areasFincas);
            
            for(const finca in areasFincas){
                color = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');
                var GClocation = new google.maps.Polygon({
                    paths: JSON.parse(areasFincas[finca].poligono),
                    strokeColor: color,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: color,
                    fillOpacity: 0.45,
                    });
                GClocation.setMap(map);
                listaAreas.push(GClocation);
            }
            

        }

        Ctrl.toggleMarcadores = () =>{
            var visible = document.getElementById("toggleMarcadores").checked;
            for(i=0;i < listaMarcadores.length;i++){
                visible ? listaMarcadores[i].setMap(map) : listaMarcadores[i].setMap(null);
            }
            //alert(listaMarcadores.length);
        }
        Ctrl.toggleUsuarios = () =>{
            var visible = document.getElementById("toggleUsuarios").checked;
            for(i=0;i < listaUsuarios.length;i++){
                visible ? listaUsuarios[i].setMap(map) : listaUsuarios[i].setMap(null);
            }
            //alert(listaMarcadores.length);
        }
        Ctrl.toggleAreas = () =>{
            var visible = document.getElementById("toggleAreas").checked;
            for(i=0;i < listaAreas.length;i++){
                visible ? listaAreas[i].setMap(map) : listaAreas[i].setMap(null);
            }
        }

        Ctrl.toggleEventos = () =>{
            var visible = document.getElementById("toggleEventos").checked;
            for(i=0;i < listaEventos.length;i++){
                visible ? listaEventos[i].setMap(map) : listaEventos[i].setMap(null);
            }
        }

        Ctrl.calcularPeriodo = () => {
            // console.log('hola a todos');
            $http.get('api/organizaciones/calculoproduccion/', {})
                .then();
                location.reload();
        };
        
	
}])
.directive("dashboard",[function(){
        return {
            restrict : "A",
            link : function($scope, element, attrs){
                $scope.$watch('Fincascopy', function(nuevo,viejo) {
                    if(nuevo != undefined){
                        $scope.dashboard(nuevo,$scope.Usuarios);
                    }
                });
            }
          };
    }]);

angular.module("EventosCtrl", []).controller("EventosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {

        var Ctrl = $scope;
        var Rs = $rootScope;
     
        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.value = 0;

           Ctrl.EventosCRUD = $injector.get("CRUD").config({
            base_url: "/api/eventos/eventos",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            // query_with:['']
        });

        Ctrl.getEventos = () => {
            Ctrl.EventosCRUD.get().then(() => {
                Ctrl.Evento = Ctrl.EventosCRUD.rows[0];
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getEventos();

        Ctrl.nuevoEvento = () => {
            Ctrl.EventosCRUD.dialog({
                Flex: 10,
                Title: "Crear Evento",

                Confirm: { Text: "Crear Evento" }
            }).then(r => {
                if (!r) return;
                Ctrl.EventosCRUD.add(r);
                Rs.showToast('Evento Creado');
            });
        };
        Ctrl.editarEvento = E => {
            Ctrl.EventosCRUD.dialog(E, {
                title: "Editar Evento" + E.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.EventosCRUD.delete(E);
                if (!r) return;
                Ctrl.EventosCRUD.update(r).then(() => {
                    Rs.showToast("Evento actualizado");
                });
            });
        };
        Ctrl.eliminarEvento = E => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + E.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.EventosCRUD.delete(E);
            });
        };
        Ctrl.cargarImagen = async(E) => {
            var Imagen = await $mdDialog.show({
                templateUrl: 'templates/dialogs/image-editor.html',
                controller: 'ImageEditor_DialogCtrl',
                multiple: true,
                locals: {
                    Config: {
                        Theme: 'default',
                        CanvasWidth: 200,
                        CanvasHeight: 200,
                        CropWidth: 200,
                        CropHeight: 200,
                        MinWidth: 50,
                        MinHeight: 50,
                        KeepAspect: true,
                        Preview: false,
                        Daten: {
                            Path: 'files/eventos_media/' + E.id + '.jpg'
                        }
                    }
                }
            });
        };

        // 
        Ctrl.FincaEventosCRUD = $injector.get("CRUD").config({
            base_url: "/api/eventos/eventos",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            // query_with:['finca', 'evento']
        });

        Ctrl.getFincaEventos = () => {
            Ctrl.FincaEventosCRUD.get().then(() => {
                Ctrl.FincaEvento = Ctrl.FincaEventosCRUD.rows[0];
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getFincaEventos();


    }
]);

angular.module("FincaEventosCtrl", []).controller("FincaEventosCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
    console.log('Este es Finca Eventos');
    
        var Ctrl = $scope;
        var Rs = $rootScope;

        console.log("ID Usuario", Rs.Usuario.id);

        Ctrl.filterFinca = "";
        Ctrl.filterEvento = "";
     
        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.value = 0;
        Ctrl.FincaEventosCRUD = $injector.get("CRUD").config({
            base_url: "/api/fincaeventos/fincaeventos",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['finca', 'evento']
        });

        Ctrl.getFincaEventos = () => {
            //Ctrl.FincaEventosCRUD.setScope("usuario",Rs.Usuario.finca_id);
            Ctrl.FincaEventosCRUD.get().then(() => {
                Ctrl.FincaEvento = Ctrl.FincaEventosCRUD.rows[0];
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
                Ctrl.FincaEventoscopy = Ctrl.FincaEventosCRUD.rows.slice();
            });
        };

        Ctrl.getFincaEventos();

        Ctrl.nuevoEvento = () => {
            Ctrl.FincaEventosCRUD.dialog({usuario_id : Rs.Usuario.id},{
                Flex: 10,
                Title: "Crear Evento",

                Confirm: { Text: "Crear Evento" }
            }).then(r => {
                if (!r) return;
                Ctrl.FincaEventosCRUD.add(r);
                Rs.showToast('Evento Creado');
            });
        };
        Ctrl.editarEvento = FE => {
            Ctrl.FincaEventosCRUD.dialog(FE, {
                title: "Editar Evento" + FE.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.FincaEventosCRUD.delete(FE);
                if (!r) return;
                Ctrl.FincaEventosCRUD.update(r).then(() => {
                    Rs.showToast("Evento actualizado");
                });
            });
        };
        Ctrl.eliminarEvento = FE => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + FE.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.FincaEventosCRUD.delete(FE);
            });
        };
        Ctrl.cargarImagen = async(FE) => {
            var Imagen = await $mdDialog.show({
                templateUrl: 'templates/dialogs/image-editor.html',
                controller: 'ImageEditor_DialogCtrl',
                multiple: true,
                locals: {
                    Config: {
                        Theme: 'default',
                        CanvasWidth: 200,
                        CanvasHeight: 200,
                        CropWidth: 200,
                        CropHeight: 200,
                        MinWidth: 50,
                        MinHeight: 50,
                        KeepAspect: true,
                        Preview: false,
                        Daten: {
                            Path: 'files/eventos_media/' + FE.id + '.jpg'
                        }
                    }
                }
            });
        };
        //INICIO DEV ANGÉLICA
        Ctrl.filterFincaEvento = () => {
            //Filtro para finca
            if (Ctrl.filterFinca && Ctrl.filterFinca.length > 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.FincaEventoscopy = Ctrl.FincaEventoscopy.filter(FE => FE.finca.nombre.toUpperCase().indexOf(Ctrl.filterFinca.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
            }
            
            //Filtro para buscar Evento
            if (Ctrl.filterEvento && Ctrl.filterEvento.length > 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.FincaEventoscopy = Ctrl.FincaEventoscopy.filter(FE => FE.evento.evento.toUpperCase().indexOf(Ctrl.filterEvento.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
            }
        } 
        //FIN DEV ANGÉLICA
    }
]);

angular
    .module("FincasCtrl", [])
    .controller("FincasCtrl", [
        "$scope",
        "$rootScope",
        "$http",
        "$injector",
        "$mdDialog",
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;
            // INICIO ANGELICA
            var TiposSuelo = [
                // "UNIDAD AMAGÁ",
                // "UNIDAD ARMENIA",
                // "UNIDAD CASCARERO",
                // "UNIDAD CARTAGENITA",
                // "UNIDAD CINCHO",
                // "UNIDAD CHANCHÓN",
                // "UNIDAD CHINCHINÁ",
                // "UNIDAD CHUSCAL",
                // "UNIDAD DOÑA JUANA",
                // "UNIDAD DOSCIENTOS",
                // "UNIDAD EL PALMAR",
                // "UNIDAD FONDESA",
                // "UNIDAD FRESNO",
                // "UNIDAD GUADALUPE",
                // "UNIDAD LA MONTAÑA",
                // "UNIDAD LIBANO",
                // "UNIDAD LLANO DE PALMAS",
                // "UNIDAD MALABAR",
                // "UNIDAD MONTENEGRO",
                // "UNIDAD NORTE",
                // "UNIDAD PERIJÁ",
                // "UNIDAD PAUJIL",
                // "UNIDAD PIENDAMÓ",
                // "UNIDAD QUINDÍO",
                // "UNIDAD ROPERO",
                // "UNIDAD SALGAR",
                // "UNIDAD SAN SIMÓN",
                // "UNIDAD SUÁREZ",
                // "UNIDAD SUROESTE",
                // "UNIDAD TABLAZO",
                // "UNIDAD TIMBÍO",
                // "UNIDAD VENECIA",
                // "UNIDAD VILLETA"
            ];

            var TiposCultivo = [
                // "MONOCULTIVO", "ASOCIADO"
                ];
                // FIN ANGELICA

                //INICIO DEV ANGÉLICA
            var Departamentos = [];

            Ctrl.Salir = $mdDialog.cancel;

            Ctrl.filterDepartamento = "";
            Ctrl.filterMunicipio = "";
            Ctrl.filterZona = "";
            Ctrl.filterNombre = "";

            //Obtener el elemento de la lista
            Ctrl.getDepartamentos = () => {
                $http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                    Ctrl.DepartamentosTabla = r.data;
                    Ctrl.Departamentos = [];
                    for(let key in r.data){
                        Ctrl.Departamentos.push ({codigo: key, nombre: r.data[key]});
                    }
                });
            }

            Ctrl.getDepartamentos();


            //Obtener el elemento de la lista municiios
                Ctrl.getMunicipios = () => {
                $http.post ('api/lista/obtener', { lista: 'Municipios' }).then((r)=>{
                    Ctrl.MunicipiosTabla = r.data;
                });
            }
            
            Ctrl.getMunicipios();


            Ctrl.FincasCRUD = $injector.get("CRUD").config({
                base_url: "/api/fincas/fincas",
                limit: 1000,
                add_append: "refresh",
                order_by: ["-created_at"],
                query_with: ["zonas", 'usuarios']
            });



            Ctrl.getFinca = () => {
                Ctrl.FincasCRUD.get().then(() => {
                    Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                    //Ctrl.editarFinca(Ctrl.FincasCRUD.rows[0]);
                    if (Ctrl.Finca.departamento_id && Departamentos) {
                        Ctrl.Finca.nombreDepartamento = Departamentos[Ctrl.Finca.departamento_id];                   
                    }
                    Ctrl.Fincascopy = Ctrl.FincasCRUD.rows.slice();
                    console.log(Ctrl.Fincascopy);
                });
            };

            Ctrl.getFinca();


            //Obtener el elemento de la lista
            Ctrl.getTiposSuelo = () => {
                $http.post ('api/lista/obtener', { lista: 'TiposSuelo' }).then((r)=>{
                    TiposSuelo = r.data;
                });
            }

            Ctrl.getTiposSuelo();


            //Obtener el elemento de la lista
            Ctrl.getTiposCultivo = () => {
                $http.post ('api/lista/obtener', { lista: 'TiposCultivo' }).then((r)=>{
                    TiposCultivo = r.data;
                });
            }

            Ctrl.getTiposCultivo();
            //FIN DEV ANGELICA
            //INICIO DEV ANGPELICA
            loadDepartamentos = (col_departamento) => {

                col_departamento.Options.options = Ctrl.DepartamentosTabla;
            }

            loadMunicipios = (valorDepartamento, col_municipio) => {
                col_municipio.Options.options = {}; //limpia el select de municipios
                $http.post ('api/lista/obtener', { lista: 'Municipios', Op1: valorDepartamento }).then((r)=>{
                    col_municipio.Options.options = r.data;
                });

            }

            inicializarListas = () => {
                let col_TiposSuelo = Ctrl.FincasCRUD.columns.find(c => c.Field == 'tipo_suelo');
                col_TiposSuelo.Options.options = TiposSuelo;

                let col_TiposCultivo = Ctrl.FincasCRUD.columns.find(c => c.Field == 'tipo_cultivo');
                col_TiposCultivo.Options.options = TiposCultivo;

                let col_departamento = Ctrl.FincasCRUD.columns.find(c => c.Field == 'departamento_id');
                loadDepartamentos(col_departamento);
        
                col_departamento.Options.onChangeFn = (valorDepartamento) => {
                    let col_municipio = Ctrl.FincasCRUD.columns.find(c => c.Field == 'municipio_id');
                    loadMunicipios(valorDepartamento, col_municipio);
                }                        

            }
            //FIN DEV ANGÉLICA

            //INICIO DEV ANGÉLICA
            Ctrl.nuevaFinca = () => { //Esta es una función que me crea automaticamente la modal y lleva la informacion a la BD desde la modal de CRUD
                inicializarListas();
                Ctrl.FincasCRUD.dialog({
                    Flex: 50,
                    Title: 'Crear Finca',
                    Confirm: { Text: 'Crear Finca' },
                }).then(r => {
                    if (!r) return;
                    Ctrl.FincasCRUD.add(r);
                    Rs.showToast("Finca creada");
                });
            };
            //FIN DEV ANGÉLICA

            //INICIO DEV ANGÉLICA
            Ctrl.editarFinca = (O) => { //La variable O tiene la información de la Finca actual que se está editando
                inicializarListas(); 
                Ctrl.FincasCRUD.dialog(O, {
                    title: 'Editar Finca' + O.nombre
                }).then(r => {
                    if(r == 'DELETE') return Ctrl.FincasCRUD.delete(O);
                    if (!r) return;
                    Ctrl.FincasCRUD.update(r).then(() => {
                        Ctrl.getFinca();
                        Rs.showToast('Finca actualizada');
                    });
                });
                let col_municipio = Ctrl.FincasCRUD.columns.find(c => c.Field == 'municipio_id');
                loadMunicipios(O.departamento_id, col_municipio); //obtengo la lista de los municipios asociados al departamento de la finca (la variable O)
            }
            //FIN DEV ANGÉLICA

           


            Ctrl.eliminarFinca = F => {
                Rs.confirmDelete({
                    Title: "¿Eliminar Finca #" + F.id + "?"
                }).then(d => {
                    if (!d) return;
                    Ctrl.FincasCRUD.delete(F);
                });
            };

            Ctrl.abrirFinca = F => {
                $mdDialog.show({
                    templateUrl: "Frag/MiFinca.FincaDiag",
                    controller: "FincaDiagCtrl",
                    locals: { Finca: F },
                    fullscreen: false
                });
            };

            //Prueba de Lista
            $http
                .post("api/main/obtener-lista", {
                    Lista: "Departamentos",
                    op1: "COL"
                })
                .then(r => {
                });

            Ctrl.editarLote = L => {
                Ctrl.LotesCRUD.dialog(L, {
                    title: "Editar Lote" + L.id
                }).then(r => {
                    if (r == "DELETE") return Ctrl.LotesCRUD.delete(L);
                    if (!r) return;
                    Ctrl.LotesCRUD.update(r).then(() => {
                        Rs.showToast("Lote actualizado");
                    });
                });
            };

            Ctrl.eliminarLote = L => {
                Rs.confirmDelete({
                    Title: "¿Eliminar Lote #" + L.id + "?"
                }).then(d => {
                    if (!d) return;
                    Ctrl.LotesCRUD.delete(L);
                });
            };
            
            Ctrl.crearMapa = function(coordenadas){
                var map = new google.maps.Map(document.getElementById('map'), {
                    center: {lat: 4.852147911841803, lng: -75.5747982566813},
                    mapTypeId: 'satellite',
                    zoom: 16,
                    disableDefaultUI: false
                });                
            
                $scope.map = map;
                
                const iconBase = "http://efiagro.local/imgs/";
                const icons = {
                    finca: {
                    icon: iconBase + "finca-icono.png",
                    }
                };

                var marker = new google.maps.Marker({position: {lat: 4.852147911841803, lng: -75.5747982566813}, icon: icons["finca"].icon, map: map});
        
                const infoMarker = `<b>Esta es la prueba de la información para Julian y Juan</b>`;
                const infoWindow = new google.maps.InfoWindow({
                    content: infoMarker,
                });
                marker.addListener("click", () => {
                    infoWindow.open(map,marker);
                });
                // Define the LatLng coordinates for the polygon.
            
                // const GCCoords = JSON.parse(coordenadas);
                // Construct the polygon.
                const GCCoords = [
                    { "lat": 4.850726639851928  , "lng": -75.575134148821235  },
                    { "lat": 4.850728400051594  , "lng": -75.575136328116059  },
                    { "lat": 4.850811045616865  , "lng": -75.575285442173481  },
                    { "lat": 4.850812889635563  , "lng": -75.575296422466636  },
                    { "lat": 4.850881118327379  , "lng": -75.5754105001688  },
                    { "lat": 4.850978180766106  , "lng": -75.575610073283315  },
                    { "lat": 4.850978180766106  , "lng": -75.575612252578139  },
                    { "lat": 4.851046409457922  , "lng": -75.575732868164778  },
                    { "lat": 4.85116945579648  , "lng": -75.575770167633891  },
                    { "lat": 4.851228799670935  , "lng": -75.575770167633891  },
                    { "lat": 4.851261069998145  , "lng": -75.575794307515025  },
                    { "lat": 4.851345559582114  , "lng": -75.575781147927046  },
                    { "lat": 4.851345559582114  , "lng": -75.57578332722187  },
                    { "lat": 4.851390486583114  , "lng": -75.575798666104674  },
                    { "lat": 4.851440778002143  , "lng": -75.575864464044571  },
                    { "lat": 4.851500038057566  , "lng": -75.575844682753086  },
                    { "lat": 4.851552173495293  , "lng": -75.575772346928716  },
                    { "lat": 4.851552173495293  , "lng": -75.575770167633891  },
                    { "lat": 4.851584527641535  , "lng": -75.575730688869953  },
                    { "lat": 4.851586287841201  , "lng": -75.575730688869953  },
                    { "lat": 4.851634819060564  , "lng": -75.575737226754427  },
                    { "lat": 4.851728277280927  , "lng": -75.575844682753086  },
                    { "lat": 4.851789297536016  , "lng": -75.575824985280633  },
                    { "lat": 4.851789297536016  , "lng": -75.575822805985808  },
                    { "lat": 4.851827016100287  , "lng": -75.575792044401169  },
                    { "lat": 4.851858532056212  , "lng": -75.575729599222541  },
                    { "lat": 4.851858532056212  , "lng": -75.575720882043242  },
                    { "lat": 4.85189801082015  , "lng": -75.57567042298615  },
                    { "lat": 4.851973447948694  , "lng": -75.575600266456604  },
                    { "lat": 4.8520543333143  , "lng": -75.575560787692666  },
                    { "lat": 4.852109989151359  , "lng": -75.575538827106357  },
                    { "lat": 4.852140583097935  , "lng": -75.575519045814872  },
                    { "lat": 4.852224988862872  , "lng": -75.575424749404192  },
                    { "lat": 4.852307634428144  , "lng": -75.575347971171141  },
                    { "lat": 4.852307634428144  , "lng": -75.575345791876316  },
                    { "lat": 4.852334624156356  , "lng": -75.575321651995182  },
                    { "lat": 4.852334624156356  , "lng": -75.575242694467306  },
                    { "lat": 4.852357925847173  , "lng": -75.57518133893609  },
                    { "lat": 4.852453144267201  , "lng": -75.575168179348111  },
                    { "lat": 4.85253126360476  , "lng": -75.575197767466307  },
                    { "lat": 4.852599492296577  , "lng": -75.575215285643935  },
                    { "lat": 4.852730669081211  , "lng": -75.575138507410884  },
                    { "lat": 4.852797137573361  , "lng": -75.575048653408885  },
                    { "lat": 4.852834856137633  , "lng": -75.574952093884349  },
                    { "lat": 4.852834856137633  , "lng": -75.574949914589524  },
                    { "lat": 4.852861845865846  , "lng": -75.574901634827256  },
                    { "lat": 4.852901324629784  , "lng": -75.57485343888402  },
                    { "lat": 4.852948011830449  , "lng": -75.574816139414907  },
                    { "lat": 4.853025292977691  , "lng": -75.574800800532103  },
                    { "lat": 4.853023532778025  , "lng": -75.574800800532103  },
                    { "lat": 4.85317088663578  , "lng": -75.5747733078897  },
                    { "lat": 4.85317088663578  , "lng": -75.574771128594875  },
                    { "lat": 4.853284126147628  , "lng": -75.574760148301721  },
                    { "lat": 4.853343386203051  , "lng": -75.574720669537783  },
                    { "lat": 4.853370292112231  , "lng": -75.574714047834277  },
                    { "lat": 4.853402646258473  , "lng": -75.574705330654979  },
                    { "lat": 4.853363167494535  , "lng": -75.574657050892711  },
                    { "lat": 4.853361323475838  , "lng": -75.574654871597886  },
                    { "lat": 4.853298459202051  , "lng": -75.574582451954484  },
                    { "lat": 4.853258896619082  , "lng": -75.574492514133453  },
                    { "lat": 4.853226626291871  , "lng": -75.574389500543475  },
                    { "lat": 4.853214053437114  , "lng": -75.574312722310424  },
                    { "lat": 4.853212209418416  , "lng": -75.574312722310424  },
                    { "lat": 4.853185303509235  , "lng": -75.574152627959847  },
                    { "lat": 4.853199636563659  , "lng": -75.574034191668034  },
                    { "lat": 4.853208689019084  , "lng": -75.573920197784901  },
                    { "lat": 4.853208689019084  , "lng": -75.573762282729149  },
                    { "lat": 4.853201564401388  , "lng": -75.573635045439005  },
                    { "lat": 4.853215897455812  , "lng": -75.573582407087088  },
                    { "lat": 4.852939210832119  , "lng": -75.57362406514585  },
                    { "lat": 4.852757742628455  , "lng": -75.573689863085747  },
                    { "lat": 4.852755982428789  , "lng": -75.573689863085747  },
                    { "lat": 4.852480133995414  , "lng": -75.573856579139829  },
                    { "lat": 4.852042766287923  , "lng": -75.574178947135806  },
                    { "lat": 4.851759793236852  , "lng": -75.574416909366846  },
                    { "lat": 4.851539684459567  , "lng": -75.574608854949474  },
                    { "lat": 4.851218992844224  , "lng": -75.57467021048069  },
                    { "lat": 4.851070884615183  , "lng": -75.57471077889204  },
                    { "lat": 4.851068202406168  , "lng": -75.57471077889204  },
                    { "lat": 4.850981952622533  , "lng": -75.574770038947463  },
                    { "lat": 4.850979270413518  , "lng": -75.5747733078897  },
                    { "lat": 4.850911879912019  , "lng": -75.574868693947792  },
                    { "lat": 4.850728651508689  , "lng": -75.575131885707378 }
                  ];
                const GClocation = new google.maps.Polygon({
                    paths: GCCoords,
                    strokeColor: "#a3e5b2",
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: "#a3e5b2",
                    fillOpacity: 0.45,
                  });
                GClocation.setMap(map);
                
        }

        Ctrl.filterMunicipios = () => {
            Ctrl.Municipios = [];
            Ctrl.filterFinca();
            if(Ctrl.filterDepartamento){
                $http.post ('api/lista/obtener', { lista: 'Municipios', Op1: Ctrl.filterDepartamento }).then((r)=>{
                    for(let key in r.data){
                        Ctrl.Municipios.push ({codigo: key, nombre: r.data[key]});
                    }
                });
            }
        }

        //INICIO DEV ANGÉLICA
        Ctrl.filterFinca = () => {
            //Filtro para buscar Nombre
            if (Ctrl.filterNombre && Ctrl.filterNombre.length > 2){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Fincascopy = Ctrl.Fincascopy.filter(F => F.nombre.toUpperCase().indexOf(Ctrl.filterNombre.toUpperCase())> -1);
            }
            //Filtro de tipo de finca
            Ctrl.Fincascopy = Ctrl.FincasCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
            //Filtro para Departamento
            if (Ctrl.filterDepartamento && Ctrl.filterDepartamento.length >= 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Fincascopy = Ctrl.Fincascopy.filter(F => F.departamento_id == Ctrl.filterDepartamento); 
            }
            //Filtro para buscar Municipio
            if (Ctrl.filterMunicipio && Ctrl.filterMunicipio.length >= 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Fincascopy = Ctrl.Fincascopy.filter(F => F.municipio_id == Ctrl.filterMunicipio);
            }
            //Filtro para buscar Zona
            if (Ctrl.filterZona && Ctrl.filterZona.length > 2){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Fincascopy = Ctrl.Fincascopy.filter(F => F.zona.descripcion.toUpperCase().indexOf(Ctrl.filterZona.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
            } 
        //FIN DEV ANGÉLICA
    }
 }

]).directive("mapa",[function(){
    return {
        restrict : "A",
        link : function($scope, element, attrs){
            $scope.crearMapa();
            $scope.$watch("coordenadas",function(nuevo,antiguo){
                if(nuevo != undefined){
                    $scope.crearMapa(nuevo);
                }
            });

            
        }
      };
}]);

angular
    .module("FincasMifincaCtrl", [])
    .controller("FincasMifincaCtrl", [
        "$scope",
        "$rootScope",
        "$http",
        "$injector",
        "$mdDialog",
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;


            //INICIO DEV ANGÉLICA
            var Departamentos = [];


            //Obtener el elemento de la lista
            Ctrl.getDepartamentos = () => {
                $http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                    Departamentos = r.data;
                    Ctrl.getFinca();
                });
            }

            Ctrl.getDepartamentos();

            Ctrl.FincasCRUD = $injector.get("CRUD").config({
                base_url: "/api/fincas/fincas",
                limit: 1000,
                add_append: "refresh",
                order_by: ["-created_at"],
                query_with: ["lotes"]
            });

            Ctrl.getFinca = () => {
                Ctrl.FincasCRUD.setScope("id", Rs.Usuario.finca_id); //Me trae las fincas del usuario
                Ctrl.FincasCRUD.get().then(() => {
                    Ctrl.Finca = Ctrl.FincasCRUD.rows[0];
                    //Ctrl.editarFinca(Ctrl.FincasCRUD.rows[0]);
                    if (Ctrl.Finca.departamento_id && Departamentos) {
                        Ctrl.Finca.nombreDepartamento = Departamentos[Ctrl.Finca.departamento_id];   
                        Ctrl.getMunicipio(Ctrl.Finca.municipio_id);                     
                    }
                    Ctrl.finca_coordenadas = { "longitud" : Ctrl.Finca.longitud , "latitud" :  Ctrl.Finca.latitud, "area" : Ctrl.Finca.area_total};
                    Ctrl.Lotes = Ctrl.Finca.lotes;
                    console.log("Coordenadas",Ctrl.finca_coordenadas);
                    console.log("Finca",Ctrl.Finca);
                });
            };

            //Ctrl.getFinca();


        //Obtener el elemento de la lista
        Ctrl.getMunicipio = (codigo) => {
			$http.post ('api/lista/obtenerdetalle', { lista_id: 3, codigo}).then((r)=>{
                Ctrl.Finca.nombreMunicipio = r.data.descripcion;
			});
		}
        //FIN DEV ANGELICA

        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['finca', 'organizacion', 'linea_productiva', 'labor']
        });
        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.setScope("finca_id", Rs.Usuario.finca_id); //Me trae los lotes de una finca
            Ctrl.LotesCRUD.get().then(() => {
                Ctrl.Lotes = Ctrl.LotesCRUD.rows;
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
                Ctrl.lotes = [];
                angular.forEach($scope.Lotes,function(valor, clave){
                    if(valor.coordenadas != undefined){
                        Ctrl.lotes.push(valor.coordenadas);
                    }
                });

            });
        };
        Ctrl.getLotes();
        
        Ctrl.crearMapa = function(lat_lons,coordenadas){

            if(lat_lons == undefined){
                return false;
            }

            var map = new google.maps.Map(document.getElementById('map'), {
                //center: {lat: 4.852147911841803, lng: -75.5747982566813},
                center: {lat : parseFloat(lat_lons.latitud), lng : parseFloat(lat_lons.longitud)},
                mapTypeId: 'hybrid',
                zoom: 16,
                disableDefaultUI: false
            });
        
            $scope.map = map;
            
            const iconBase = "/imgs/";
            const icons = {
                finca: {
                icon: iconBase + "finca-icono.png",
                }
            };
            const colores = ["#f00","#0f0","#00f"];
            
            var marker = new google.maps.Marker({position: {lat: parseFloat(lat_lons.latitud), lng: parseFloat(lat_lons.longitud)}, icon: icons["finca"].icon, map: map});
            // Define the LatLng coordinates for the polygon.
            const cityCircle = new google.maps.Circle({
                strokeColor: "#fff",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#fff",
                fillOpacity: 0.15,
                map,
                center: {lat: parseFloat(lat_lons.latitud), lng: parseFloat(lat_lons.longitud)},
                radius: parseFloat(lat_lons.area)*100
              });

              //Construit todos los poligonos

            const areasFincas = {};
            for(const finca in Ctrl.Lotes){
                //console.log(finca,Ctrl.Lotes[finca].coordenadas);
                areasFincas[finca] = {
                    poligono : Ctrl.Lotes[finca].coordenadas
                };
            }
            console.log("coordenadas",areasFincas);
            
            for(const finca in areasFincas){
                color = '#'+(Math.random() * 0xFFFFFF << 0).toString(16).padStart(6, '0');
                var GClocation = new google.maps.Polygon({
                    paths: JSON.parse(areasFincas[finca].poligono),
                    strokeColor: color,
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: color,
                    fillOpacity: 0.45,
                    });
                GClocation.setMap(map);
            }
        
            /*
            const GCCoords = [
                { "lat": 4.850726639851928  , "lng": -75.575134148821235  },
                { "lat": 4.850728400051594  , "lng": -75.575136328116059  },
                { "lat": 4.850811045616865  , "lng": -75.575285442173481  },
                { "lat": 4.850812889635563  , "lng": -75.575296422466636  },
                { "lat": 4.850881118327379  , "lng": -75.5754105001688  },
                { "lat": 4.850978180766106  , "lng": -75.575610073283315  },
                { "lat": 4.850978180766106  , "lng": -75.575612252578139  },
                { "lat": 4.851046409457922  , "lng": -75.575732868164778  },
                { "lat": 4.85116945579648  , "lng": -75.575770167633891  },
                { "lat": 4.851228799670935  , "lng": -75.575770167633891  },
                { "lat": 4.851261069998145  , "lng": -75.575794307515025  },
                { "lat": 4.851345559582114  , "lng": -75.575781147927046  },
                { "lat": 4.851345559582114  , "lng": -75.57578332722187  },
                { "lat": 4.851390486583114  , "lng": -75.575798666104674  },
                { "lat": 4.851440778002143  , "lng": -75.575864464044571  },
                { "lat": 4.851500038057566  , "lng": -75.575844682753086  },
                { "lat": 4.851552173495293  , "lng": -75.575772346928716  },
                { "lat": 4.851552173495293  , "lng": -75.575770167633891  },
                { "lat": 4.851584527641535  , "lng": -75.575730688869953  },
                { "lat": 4.851586287841201  , "lng": -75.575730688869953  },
                { "lat": 4.851634819060564  , "lng": -75.575737226754427  },
                { "lat": 4.851728277280927  , "lng": -75.575844682753086  },
                { "lat": 4.851789297536016  , "lng": -75.575824985280633  },
                { "lat": 4.851789297536016  , "lng": -75.575822805985808  },
                { "lat": 4.851827016100287  , "lng": -75.575792044401169  },
                { "lat": 4.851858532056212  , "lng": -75.575729599222541  },
                { "lat": 4.851858532056212  , "lng": -75.575720882043242  },
                { "lat": 4.85189801082015  , "lng": -75.57567042298615  },
                { "lat": 4.851973447948694  , "lng": -75.575600266456604  },
                { "lat": 4.8520543333143  , "lng": -75.575560787692666  },
                { "lat": 4.852109989151359  , "lng": -75.575538827106357  },
                { "lat": 4.852140583097935  , "lng": -75.575519045814872  },
                { "lat": 4.852224988862872  , "lng": -75.575424749404192  },
                { "lat": 4.852307634428144  , "lng": -75.575347971171141  },
                { "lat": 4.852307634428144  , "lng": -75.575345791876316  },
                { "lat": 4.852334624156356  , "lng": -75.575321651995182  },
                { "lat": 4.852334624156356  , "lng": -75.575242694467306  },
                { "lat": 4.852357925847173  , "lng": -75.57518133893609  },
                { "lat": 4.852453144267201  , "lng": -75.575168179348111  },
                { "lat": 4.85253126360476  , "lng": -75.575197767466307  },
                { "lat": 4.852599492296577  , "lng": -75.575215285643935  },
                { "lat": 4.852730669081211  , "lng": -75.575138507410884  },
                { "lat": 4.852797137573361  , "lng": -75.575048653408885  },
                { "lat": 4.852834856137633  , "lng": -75.574952093884349  },
                { "lat": 4.852834856137633  , "lng": -75.574949914589524  },
                { "lat": 4.852861845865846  , "lng": -75.574901634827256  },
                { "lat": 4.852901324629784  , "lng": -75.57485343888402  },
                { "lat": 4.852948011830449  , "lng": -75.574816139414907  },
                { "lat": 4.853025292977691  , "lng": -75.574800800532103  },
                { "lat": 4.853023532778025  , "lng": -75.574800800532103  },
                { "lat": 4.85317088663578  , "lng": -75.5747733078897  },
                { "lat": 4.85317088663578  , "lng": -75.574771128594875  },
                { "lat": 4.853284126147628  , "lng": -75.574760148301721  },
                { "lat": 4.853343386203051  , "lng": -75.574720669537783  },
                { "lat": 4.853370292112231  , "lng": -75.574714047834277  },
                { "lat": 4.853402646258473  , "lng": -75.574705330654979  },
                { "lat": 4.853363167494535  , "lng": -75.574657050892711  },
                { "lat": 4.853361323475838  , "lng": -75.574654871597886  },
                { "lat": 4.853298459202051  , "lng": -75.574582451954484  },
                { "lat": 4.853258896619082  , "lng": -75.574492514133453  },
                { "lat": 4.853226626291871  , "lng": -75.574389500543475  },
                { "lat": 4.853214053437114  , "lng": -75.574312722310424  },
                { "lat": 4.853212209418416  , "lng": -75.574312722310424  },
                { "lat": 4.853185303509235  , "lng": -75.574152627959847  },
                { "lat": 4.853199636563659  , "lng": -75.574034191668034  },
                { "lat": 4.853208689019084  , "lng": -75.573920197784901  },
                { "lat": 4.853208689019084  , "lng": -75.573762282729149  },
                { "lat": 4.853201564401388  , "lng": -75.573635045439005  },
                { "lat": 4.853215897455812  , "lng": -75.573582407087088  },
                { "lat": 4.852939210832119  , "lng": -75.57362406514585  },
                { "lat": 4.852757742628455  , "lng": -75.573689863085747  },
                { "lat": 4.852755982428789  , "lng": -75.573689863085747  },
                { "lat": 4.852480133995414  , "lng": -75.573856579139829  },
                { "lat": 4.852042766287923  , "lng": -75.574178947135806  },
                { "lat": 4.851759793236852  , "lng": -75.574416909366846  },
                { "lat": 4.851539684459567  , "lng": -75.574608854949474  },
                { "lat": 4.851218992844224  , "lng": -75.57467021048069  },
                { "lat": 4.851070884615183  , "lng": -75.57471077889204  },
                { "lat": 4.851068202406168  , "lng": -75.57471077889204  },
                { "lat": 4.850981952622533  , "lng": -75.574770038947463  },
                { "lat": 4.850979270413518  , "lng": -75.5747733078897  },
                { "lat": 4.850911879912019  , "lng": -75.574868693947792  },
                { "lat": 4.850728651508689  , "lng": -75.575131885707378 }
              ];
            const GClocation = new google.maps.Polygon({
                paths: GCCoords,
                strokeColor: "#a3e5b2",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#a3e5b2",
                fillOpacity: 0.45,
            });
            GClocation.setMap(map);

            poligono1 =  [{"lat":4.853414968, "lng":-75.574692},{"lat":4.853358977, "lng":-75.57458002},{"lat":4.853337016, "lng":-75.57445899},{"lat":4.853335004, "lng":-75.57445203},{"lat":4.853254035, "lng":-75.57426796},{"lat":4.853240037, "lng":-75.57416897},{"lat":4.853254035, "lng":-75.57406998},{"lat":4.853261998, "lng":-75.57396504},{"lat":4.853261998, "lng":-75.57393897},{"lat":4.853261998, "lng":-75.57392598},{"lat":4.853272978, "lng":-75.57379698},{"lat":4.853367023, "lng":-75.57364603},{"lat":4.853458973, "lng":-75.573541},{"lat":4.853499038, "lng":-75.57348199},{"lat":4.853553018, "lng":-75.57343204},{"lat":4.853556035, "lng":-75.57343204},{"lat":4.853590988, "lng":-75.57341896},{"lat":4.853592999, "lng":-75.57341896},{"lat":4.853606997, "lng":-75.57333698},{"lat":4.853606997, "lng":-75.57333296},{"lat":4.85357699, "lng":-75.57328401},{"lat":4.853573972, "lng":-75.57328099},{"lat":4.853542037, "lng":-75.57324797},{"lat":4.853580007, "lng":-75.57319198},{"lat":4.85357699, "lng":-75.57319198},{"lat":4.853766002, "lng":-75.57318502},{"lat":4.853901034, "lng":-75.57320204},{"lat":4.854134973, "lng":-75.57317203},{"lat":4.854263971, "lng":-75.573152},{"lat":4.854266988, "lng":-75.573152},{"lat":4.854395986, "lng":-75.57310598},{"lat":4.854456, "lng":-75.57313599},{"lat":4.854477039, "lng":-75.57322802},{"lat":4.854477039, "lng":-75.57323498},{"lat":4.85433396, "lng":-75.57346498},{"lat":4.85433396, "lng":-75.57346799},{"lat":4.854280986, "lng":-75.57370202},{"lat":4.854246033, "lng":-75.573771},{"lat":4.854232036, "lng":-75.57389597},{"lat":4.854213009, "lng":-75.57396504},{"lat":4.854150983, "lng":-75.57400804},{"lat":4.854104966, "lng":-75.57400804},{"lat":4.854070013, "lng":-75.57403796},{"lat":4.854070013, "lng":-75.57403402},{"lat":4.854046041, "lng":-75.57413},{"lat":4.854064984, "lng":-75.57424097},{"lat":4.854057021, "lng":-75.57430702},{"lat":4.854054004, "lng":-75.57431096},{"lat":4.854018968, "lng":-75.57436},{"lat":4.853864992, "lng":-75.57441004},{"lat":4.853800032, "lng":-75.57443703},{"lat":4.853745969, "lng":-75.57442697},{"lat":4.853629963, "lng":-75.57444298},{"lat":4.853571039, "lng":-75.57445002},{"lat":4.853548994, "lng":-75.57449897},{"lat":4.853557041, "lng":-75.57454901},{"lat":4.853500966, "lng":-75.57465403},{"lat":4.853416979, "lng":-75.57469703},{"lat":4.853416979, "lng":-75.57469301}];
            const GClocation2 = new google.maps.Polygon({
                paths: poligono1,
                strokeColor: "#ae7cbf",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#ae7cbf",
                fillOpacity: 0.45,
            });
            GClocation2.setMap(map);
           
            poligono2 = [{"lat":4.850510135, "lng":-75.57593026},{"lat":4.850553302, "lng":-75.5759259},{"lat":4.850556822, "lng":-75.57591928},{"lat":4.850599989, "lng":-75.57590612},{"lat":4.850599989, "lng":-75.57590394},{"lat":4.850648521, "lng":-75.57586446},{"lat":4.850716749, "lng":-75.57581183},{"lat":4.850776009, "lng":-75.57578769},{"lat":4.850776009, "lng":-75.57578551},{"lat":4.850826384, "lng":-75.57577679},{"lat":4.850894613, "lng":-75.57576137},{"lat":4.85096829, "lng":-75.57568023},{"lat":4.850979103, "lng":-75.57562323},{"lat":4.850979103, "lng":-75.57562105},{"lat":4.850948509, "lng":-75.57557059},{"lat":4.850948509, "lng":-75.57556842},{"lat":4.850907186, "lng":-75.57550044},{"lat":4.850905426, "lng":-75.57550044},{"lat":4.850869467, "lng":-75.57543238},{"lat":4.850806603, "lng":-75.57534026},{"lat":4.850774249, "lng":-75.5752613},{"lat":4.850731166, "lng":-75.57518897},{"lat":4.850731166, "lng":-75.57518679},{"lat":4.850691603, "lng":-75.57515167},{"lat":4.850621531, "lng":-75.57524378},{"lat":4.850553302, "lng":-75.57534688},{"lat":4.850553302, "lng":-75.57534906},{"lat":4.850501167, "lng":-75.5754302},{"lat":4.850497562, "lng":-75.5754302},{"lat":4.850467052, "lng":-75.57548502},{"lat":4.850465208, "lng":-75.57548502},{"lat":4.850409552, "lng":-75.5755794},{"lat":4.850409552, "lng":-75.57558157},{"lat":4.850441907, "lng":-75.57567805},{"lat":4.85046613, "lng":-75.57577679},{"lat":4.85046613, "lng":-75.57577897},{"lat":4.850480463, "lng":-75.5758513},{"lat":4.850482307, "lng":-75.57585348},{"lat":4.850511057, "lng":-75.5759347}];
            const GClocation3 = new google.maps.Polygon({
                paths: poligono2,
                strokeColor: "#e2e017",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#e2e017",
                fillOpacity: 0.45,
            });
            GClocation3.setMap(map);
            
            for(i=0; i < coordenadas.length; i++){
                if(coordenadas[i] == undefined || coordenadas[i] == ""){
                    continue;
                }
                const GCCoords = JSON.parse(coordenadas[i]);
                console.log(GCCoords);
                // Construct the polygon.
                const GClocation = new google.maps.Polygon({
                    paths: GCCoords,
                    strokeColor: colores[i],
                    strokeOpacity: 0.8,
                    strokeWeight: 2,
                    fillColor: colores[i],
                    fillOpacity: 0.45,
                });
                GClocation.setMap(map);
                
            }
            */
        }
        

        
    }])
    .directive("mapa",[function(){
        return {
            restrict : "A",
            link : function($scope, element, attrs){
                $scope.$watch('finca_coordenadas', function(nuevo,viejo) {
                    if(nuevo != undefined){
                        $scope.crearMapa(nuevo,$scope.lotes);
                    }
                });
            }
          };
    }]);

angular.module('Labores_LaborEditorCtrl', [])
.controller('Labores_LaborEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Labor',
	function($scope, $rootScope, $http, $injector, $mdDialog, Labor) {

		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Labor = angular.copy(Labor);

		// Ctrl.LaboresCRUD = $injector.get('CRUD').config({ 
		// 	base_url: '/api/labores/labores',
		// 	limit: 1000,
		// 	add_append: 'refresh',
		// });

		// Ctrl.getLabores = () => {
		// 	Ctrl.LaboresCRUD.setScope('milabor', Labor.id).get();
		// };

		Ctrl.getLabores();

		
        Ctrl.guardarLabor = () => {
            Ctrl.LaboresCRUD.update(Ctrl.Labor).then(() => {
						Rs.showToast("Labor Actualizada");
                
            });
        }

		$http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			
		});

		$http.post('api/zonas/obtener', {}).then(r => {
			Ctrl.zonas = r.data;
			
		});

	}
]);
angular.module("LaboresCtrl", []).controller("LaboresCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {

        var Ctrl = $scope;
        var Rs = $rootScope;
        

        Ctrl.zona_select = null;
        Ctrl.linea_lp_select = null;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.value = 0;

        Ctrl.LaboresCRUD = $injector.get("CRUD").config({
            base_url: "/api/labores/labores",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['linea_productiva', 'zona']
        });


        Ctrl.getLabores = () => {
            Ctrl.LaboresCRUD.setScope('lazona', Ctrl.zona_select);
            Ctrl.LaboresCRUD.setScope('lalineaproductiva', Ctrl.linea_lp_select);
            
            Ctrl.LaboresCRUD.get().then(() => {
                               
            });
            // console.log(Ctrl.linea_lp_select.nombre);
        };

Ctrl.nuevaLabor = () => {
    Rs.BasicDialog({
        Flex: 30,
        Title: "Crear Labor",
        Fields: [
            
            {
                Nombre: "Labor",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Zona",
                Value: Ctrl.zona_select,
                Type: "list",
                List: Ctrl.zonas, Item_Val:'id', Item_Show:'descripcion',
                Required: true
            },
            {
                Nombre: "Linea Productiva",
                Value: Ctrl.linea_lp_select,
                Type: "list",
                List: Ctrl.lineas_productivas, Item_Val:'id', Item_Show:'nombre', 
                Required: true
            },
            {
                Nombre: "Frecuencia",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Semana Inicio",
                Value: "",
                Type: "string",
                Required: true
            },
            {
                Nombre: "Margen",
                Value: "",
                Type: "string",
                Required: true
            }
        ],

        Confirm: { Text: "Crear Labor" }
    }).then(r => {
        if (!r) return;
        var nuevaLabor = {
            labor : r.Fields[0].Value,
            zona_id: r.Fields[1].Value,
            linea_productiva_id: r.Fields[2].Value,
            frecuencia: r.Fields[3].Value,
            inicio: r.Fields[4].Value,
            margen: r.Fields[5].Value,
            

        };
        Ctrl.LaboresCRUD.add(nuevaLabor);
    });
};
        
        Ctrl.editarLabor = (L) => {
			$mdDialog.show( { 
				templateUrl: 'Frag/AdministracionGeneral.Labores_LaborEditorDiag',
				controller: 'Labores_LaborEditorCtrl',
				locals: { Labor: L },
				scope: Ctrl.$new()
			});
		}
        
        Ctrl.eliminarLabor = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Labor #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LaboresCRUD.delete(L);
            });
        };
        
        Ctrl.obtener_lp = () =>{
            return $http.post('api/lineasproductivas/obtener', {}).then(r => {
                Ctrl.lineas_productivas = r.data;
                Ctrl.linea_lp_select = Ctrl.lineas_productivas[0].id;
                
            });

        }
        Ctrl.obtener_zonas = ()=>{
            return $http.post('api/zonas/obtener', {}).then(r => {
                Ctrl.zonas = r.data;
                Ctrl.zona_select = Ctrl.zonas[0].id;
                
            });
        }

        Promise.all([
            Ctrl.obtener_lp(),
            Ctrl.obtener_zonas()
        ]).then(() => {
            Ctrl.getLabores();
        });
    }
]);

angular.module('LineasProductivasCtrl', [])
    .controller('LineasProductivasCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.LineasProductivasCRUD = $injector.get('CRUD').config({
                base_url: '/api/lineasproductivas/lineasproductivas',
                limit: 1000,
                add_append: 'refresh',
            });
            Ctrl.getLineasProductivas = () => {
                Ctrl.LineasProductivasCRUD.get().then(() => {});
                //Ctrl.nuevo();
            };

            Ctrl.getLineasProductivas();

            Ctrl.nuevo = () => {
                Ctrl.LineasProductivasCRUD.dialog({}, {
                    title: 'Agregar Linea Productiva'
                }).then(lp => {
                    Ctrl.LineasProductivasCRUD.add(lp)
                        .then(() => {
                            Rs.showToast('Linea productiva creada')
                        });
                });
            }

            Ctrl.editar = (LP) => {
                Ctrl.LineasProductivasCRUD.dialog(LP, {
                    title: 'Editar Linea Productiva ' + LP.nombre
                }).then(dato => {
                    if (dato == 'DELETE')
                        return Ctrl.LineasProductivasCRUD.delete(LP);
                    Ctrl.LineasProductivasCRUD.update(dato)
                        .then(() => {
                            Rs.showToast('Linea productiva actualizada')
                        });
                });
            };

            Ctrl.guardarLP = (LP) => {
                Ctrl.LineasProductivasCRUD.update(LP);
            }

            Ctrl.cargarImagen = async(LP) => {
                var Imagen = await $mdDialog.show({
                    templateUrl: 'templates/dialogs/image-editor.html',
                    controller: 'ImageEditor_DialogCtrl',
                    multiple: true,
                    locals: {
                        Config: {
                            Theme: 'default',
                            CanvasWidth: 200,
                            CanvasHeight: 200,
                            CropWidth: 200,
                            CropHeight: 200,
                            MinWidth: 50,
                            MinHeight: 50,
                            KeepAspect: true,
                            Preview: false,
                            Daten: {
                                Path: 'files/lineasproductivas_media/' + LP.id + '.jpg'
                            }
                        }
                    }
                });
            };
        }

    ]);
//INICIO DEV ANGÉLICA
angular.module('ListaEditDialogCtrl', [])
.controller('ListaEditDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Lista',
	function($scope, $rootScope, $http, $injector, $mdDialog, Lista) {

		var Ctrl = $scope;
		var Rs = $rootScope;


		// debugger;
		Ctrl.Cancel = $mdDialog.cancel;
		Ctrl.Lista = angular.copy(Lista);
		Ctrl.url = '';
		Ctrl.Hide = $mdDialog.hide;
		//Ctrl.Autoincremental = false;

		/*Ctrl.ListaCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/lista/lista',
			limit: 1000,
			add_append: 'refresh',
		});*/

		Ctrl.addListadetalle = () => {
			if(!Ctrl.Lista.listadetalle || Ctrl.Lista.listadetalle.length===0 || Ctrl.Lista.listadetalle [Ctrl.Lista.listadetalle.length-1].descripcion.length>0){
				let codigo = 0;
				if(Ctrl.Lista.autoincremental){
					if(!Ctrl.Lista.listadetalle || Ctrl.Lista.listadetalle.length===0){
						codigo = 1;

					}else{
						codigo = parseInt(Ctrl.Lista.listadetalle[Ctrl.Lista.listadetalle?.length-1].codigo) + 1;
					}
				}
				Ctrl.Lista.listadetalle.push({ //Cuando queramos que no se repitan datos guardados en base de datos
					id: -1,
					lista_id: Ctrl.Lista.id,
					codigo: Ctrl.Autoincremental ? codigo : '',
					descripcion: '',
					op1: '',
					op2: '',
					op3: '',
					op4: '',
					op5: '',
				})
				
			}
		}

		Ctrl.getLista = () => {
			$http.get ('api/lista/lista/'+ Ctrl.Lista.id, {}).then((r)=>{
				Ctrl.Lista = r.data;
				Ctrl.Autoincremental = Ctrl.Lista.autoincremental ===1 ; 
				Ctrl.addListadetalle();
			});
		}

		Ctrl.getLista();

		Ctrl.guardarLista = () => {
			$http.post('api/lista/actualizar', {Lista: Ctrl.Lista}).then((r)=>{
				Ctrl.Lista = r.data;
			})
		}

		
		Ctrl.eliminarLista = (C) => {
			if(C.id==-1){
				const index = Ctrl.Lista.listadetalle.findIndex(item => item.codigo === C.codigo);
				Ctrl.Lista.listadetalle.splice(index, 1);
			}else{
				Rs.confirmDelete({
					Title: '¿Eliminar elemento de la lista?',
				}).then(R => {
					$http.post('api/lista/delete', {id:C.id}).then((r)=>{
						const index = Ctrl.Lista.listadetalle.findIndex(item => item.codigo === C.codigo);
						Ctrl.Lista.listadetalle.splice(index, 1);
					})
	
					/*if(!R) return;
					Ctrl.ListaCRUD.delete(L);*/
				});

			}
			//revisar boton borrar, cancelar e igual borra
		}


	}

 
]);

//FIN DEV ANGÉLICA
angular.module("LotesCtrl", []).controller("LotesCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        var Ctrl = $scope;
        var Rs = $rootScope;


        Ctrl.filterFinca = "";
        Ctrl.filterOrganizacion = "";
        Ctrl.filterLineaProductiva = "";
       
        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['finca', 'organizacion', 'linea_productiva', 'labor']
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.get().then(() => {
                Ctrl.Lote = Ctrl.LotesCRUD.rows[0];
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
                Ctrl.Lotescopy = Ctrl.LotesCRUD.rows.slice();
            });
        };

        Ctrl.getLotes();

        Ctrl.nuevoLote = () => {
            Ctrl.LotesCRUD.dialog({
                Flex: 10,
                Title: "Crear Lote",

                Confirm: { Text: "Crear Lote" }
            }).then(r => {
                if (!r) return;
                Ctrl.LotesCRUD.add(r);
                Rs.showToast('Lote Creado');
            });
        };

        Ctrl.editarLote = L => {
            Ctrl.LotesCRUD.dialog(L, {
                title: "Editar Lote" + L.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.LotesCRUD.delete(L);
                if (!r) return;
                Ctrl.LotesCRUD.update(r).then(() => {
                    Rs.showToast("Lote actualizado");
                });
            });
        };

        Ctrl.eliminarLote = L => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + L.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LotesCRUD.delete(L);
            });
        };

        // LABORES
        Ctrl.abrirLabores = L => {
            $mdDialog.show({
                templateUrl: "Frag/MiFinca.LaboresDiag",
                controller: "LaboresDiagCtrl",
                locals: { Labor: L },
                fullscreen: false
            });
        };

         //INICIO DEV ANGÉLICA
         Ctrl.filterLote = () => {
             //Filtro de tipo de lote
             Ctrl.Lotescopy = Ctrl.LotesCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
             //Filtro para buscar Lote
             if (Ctrl.filterFinca && Ctrl.filterFinca.length > 2){
                 //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                 Ctrl.Lotescopy = Ctrl.Lotescopy.filter(L => L.finca.nombre.toUpperCase().indexOf(Ctrl.filterFinca.toUpperCase())> -1);
            } 
            //Filtro para Organizacion
            if (Ctrl.filterOrganizacion && Ctrl.filterOrganizacion.length >= 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Lotescopy = Ctrl.Lotescopy.filter(L => L.organizacion.nombre.toUpperCase().indexOf(Ctrl.filterOrganizacion.toUpperCase())> -1);
            }
                //Filtro para buscar Linea productiva
            if (Ctrl.filterLineaProductiva && Ctrl.filterLineaProductiva.length >= 1){
                //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                Ctrl.Lotescopy = Ctrl.Lotescopy.filter(L => L.linea_productiva.nombre.toUpperCase().indexOf(Ctrl.filterLineaProductiva.toUpperCase())> -1);
            } 
        //FIN DEV ANGÉLICA
    }
        
    }
]);

angular.module("LotesFincaCtrl", []).controller("LotesFincaCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {

        var Ctrl = $scope;
        var Rs = $rootScope;
        //INICIO DEV ANGÉLICA
        Ctrl.indice = 0;
        var myChart;
        
        Ctrl.semanas = [];
        Ctrl.LotesLabores = [];
        Ctrl.LaboresProductor = [];
        //FIN DEV ANGELICA
        
        //INICIO DEV ANGELICA
        Ctrl.getLoteLabores = (lote, lineaproductiva, semana, fechaInicial, fechaFinal) => {
            Ctrl.LotesLabores = [];
            
            $http.get ('api/lotelabores/lotelaborsemana/'+ lote + '/' + lineaproductiva + '/' + semana, {}).then((r)=>{
                Ctrl.editable = new Date().toISOString().slice(0, 10) >= fechaInicial && new Date().toISOString().slice(0, 10) <= fechaFinal;  
				Ctrl.LotesLabores = r.data;
                console.log(Ctrl.editable);
			});
        };

        // Definición de LOTE LABORES PRODUCTOR
        Ctrl.LoteLaboresProductorCRUD = $injector.get("CRUD").config({
            base_url: "/api/loteslaboresproductor/loteslaboresproductor",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['labor', 'lote']
        });

        // Definición de LOTE LABORES
        Ctrl.LoteLaboresCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotelabores/lotelabores",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['labor', 'lote']
        });

        //Definición de lote cosechas
        Ctrl.CosechasCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotecosechas/lotecosechas",
            limit: 1000,
            add_append: "refresh"
        });

        Ctrl.getLaboresProductor = (lote, semana_id) => {
            Ctrl.LotesLabores = [];
            $http.get ('/api/loteslaboresproductor/loteslaboresproductor/'+ lote + '/' + semana_id, {}).then((r)=>{
                Ctrl.LaboresProductor = r.data;
			});
        };


        Ctrl.getLoteCosechas = (lote, fecha) => {
            Ctrl.LotesLabores = [];
            let datos = [];
            let labels = [];
            let colors = [];
            let suma = 0;
            let sumaKg = 0; 
            $http.get ('api/lotecosechas/cosechalote/'+ lote + '/' + fecha , {}).then((r)=>{
				Ctrl.LotesCosechas = r.data;
                Ctrl.LotesCosechas.forEach(loteCosecha => {
                    datos.push(loteCosecha.cantidad);
                    labels.push([loteCosecha.fecha, loteCosecha.cantidad, loteCosecha.kilogramo, loteCosecha.tipo]);
                    colors.push('rgba(13, 139, 22, 1)');
                    suma = suma + loteCosecha.cantidad;
                    sumaKg = sumaKg + loteCosecha.kilogramo;
                });
                datos.push(suma / Ctrl.LotesCosechas.length);
                labels.push(["Prom", suma / Ctrl.LotesCosechas.length, sumaKg / Ctrl.LotesCosechas.length, ""]);
                colors.push('rgba(51, 68, 255, 1)');
                Ctrl.chart(datos, labels, colors, suma); //llamando a la gráfica de cosechas -> llamo a la función que me dibuja la gráfica de cosechas
			});
        };


        Ctrl.chart = (datos, labels, colors, suma) => {
            var ctx = document.getElementById('myChart')?.getContext('2d');
            if(ctx){
                if (myChart) {
                    myChart.destroy(); //se debe destruir la gráfica existente para volver a construir una nueva
                }
                myChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,   
                        datasets: [{
                            label: "# de cosechas" /*suma + " cosechas en total"*/,
                            data: datos,
                            backgroundColor: colors,
                            borderColor: [
                                'rgba(54, 162, 235, 1)',
                                'rgba(75, 192, 192, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        scales: {
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        }


        //INICIO DEV ANGÉLICA
        //Creación de ventana modal para agregar cosechas
        Ctrl.nuevaCosecha = (lote) => {
            /*Ctrl.CosechasCRUD.dialog({
                Flex: 10,
                Title: 'Crear Organización',
                Confirm: { Text: 'Crear Organizacion' },
            }).then(r => {
                if (!r) return;
                Ctrl.CosechasCRUD.add(r);
            });*/
            Rs.BasicDialog({
                Flex: 30,
                Title: "Crear Nueva Cosecha",
                Fields: [
                    {
                        Nombre: "",
                        Value: null,
                        Type: "date",
                        Required: true
                    },
                    {
                        Nombre: "Cantidad",
                        Value: "",
                        Type: "textarea",
                        Required: true
                    },
                    {
                        Nombre: "Kilogramo",
                        Value: "",
                        Type: "textarea",
                        Required: true
                    },
                    {
                        Nombre: "Tipo",
                        Value: null,
                        Type: "simplelist",
                        List: ['Racimo', 'Bulto', 'Canastilla', 'Timbo', 'Bolsa'],
                        Required: true
                    }
                ],
                Confirm: { Text: "Crear Cosecha" }
            }).then(r => {
                if (!r) return;

                const tiempoTranscurrido = Date.now();
                const hoy = new Date(tiempoTranscurrido);
                var NuevaCosecha = {
                    lote_id: lote.id,
                    fecha: hoy.toISOString().slice(0, 10),//r.Fields[0].Value.toISOString().slice(0, 10),
                    cantidad: r.Fields[1].Value,
                    kilogramo: r.Fields[2].Value,
                    tipo: r.Fields[3].Value
                };
                
                Ctrl.CosechasCRUD.add(NuevaCosecha).then(() => {
                    Rs.showToast("Cosecha agregada");                   
                        Ctrl.getLoteCosechas(lote.id, 'x');
                });
            });
        };
        //FIN DEV ANGÉLICA 


        Ctrl.generarSemanas = (fecha_establecimiento, numeroSemanasLote) => {
            let fecha = new Date(fecha_establecimiento);
            let hoy = new Date();

            hoy.setHours(0,0,0,0);

            for(i=1; i < numeroSemanasLote; i++) {
                const f = fecha;

                let fechacontresdiasmas= f.getTime() + (6*24*60*60*1000);  
                let segundaFecha = new Date(fechacontresdiasmas);
                
               
               // if (i >= numeroSemanasLote) {
                    Ctrl.semanas.push({id: i - numeroSemanasLote, fechaInicial: f.toISOString().slice(0, 10), fechaFinal: segundaFecha.toISOString().slice(0, 10), semana: i});
                    if(segundaFecha.getTime() >= hoy.getTime() && f.getTime() <= hoy.getTime()){
                        Ctrl.indice = Ctrl.semanas.length -1;
                    }
                //}

                fecha = new Date(segundaFecha.getTime() + (1*24*60*60*1000));  
            }
        }

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.LotesCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotes/lotes",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['finca', 'organizacion', 'linea_productiva', 'labor']
        });

        Ctrl.getLotes = () => {
            Ctrl.LotesCRUD.setScope("finca_id", Rs.Usuario.finca_id); //Me trae los lotes de una finca
            Ctrl.LotesCRUD.get().then(() => {
                Ctrl.Lotes = Ctrl.LotesCRUD.rows;
                //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            });
        };

        Ctrl.getLotes();
        //FIN DEV ANGELICA

        //INICIO DEV ANGÉLICA
        Ctrl.clickOnCard = (lote) => {
            //Las siguientes lineas cierran todos los paneles y deja abierto solo el panel seleccionado
            if(lote.checked){
                lote.checked = false;
            }else{
                Ctrl.Lotes.forEach(L => {
                    L.checked = false;
                });
                lote.checked = true; 
                Ctrl.generarSemanas(lote.fecha_establecimiento, 156);  //este 156 deberia reemplazarse por lote.numeroSemanasLote, esta variable debe almacenar el tiempo que el lote va a ser productivo (tiempo de vida) en esa linea
                Ctrl.getLoteLabores(lote.id, lote.linea_productiva.id, Ctrl.semanas[Ctrl.indice].semana, Ctrl.semanas[Ctrl.indice].fechaInicial, Ctrl.semanas[Ctrl.indice].fechaFinal);
                Ctrl.getLaboresProductor(lote.id, Ctrl.semanas[Ctrl.indice].semana);          
            }
            /* 
            //Estas líneas solo abren o cierran el panel seleccionado, es decir, deja visualizar varios a la vez
            if(!lote.checked){
                lote.checked = true;
            }else{
                lote.checked = !lote.checked;
            }*/
            Ctrl.getLoteCosechas(lote.id, 'fecha');  
        } 
        //FIN DEV ANGELICA

        //INICIO DEV ANGÉLICA

        //O = Orientación de las flechas - si la orientacion es derecha el indice debe incrementarse en 1, si es izq 
        //D = Derecha
        Ctrl.clickOnRow = (O, lote) => {
            if(O === 'D') {
                if(Ctrl.indice < Ctrl.semanas.length-1){
                    Ctrl.indice++;
                    Ctrl.getLoteLabores(lote.id, lote.linea_productiva.id, Ctrl.semanas[Ctrl.indice].semana, Ctrl.semanas[Ctrl.indice].fechaInicial, Ctrl.semanas[Ctrl.indice].fechaFinal);
                    Ctrl.getLaboresProductor(lote.id, Ctrl.semanas[Ctrl.indice].semana);          
                }
            }else{
                if(Ctrl.indice > 0){
                    Ctrl.indice--;
                    Ctrl.getLoteLabores(lote.id, lote.linea_productiva.id, Ctrl.semanas[Ctrl.indice].semana, Ctrl.semanas[Ctrl.indice].fechaInicial, Ctrl.semanas[Ctrl.indice].fechaFinal);
                    Ctrl.getLaboresProductor(lote.id, Ctrl.semanas[Ctrl.indice].semana);          
                }
            }
        }
        //FIN DEV ANGELICA


        //INICIO DEV ANGÉLICA ------> para hacer el evento del checkbox y que guarde en BD en la tabla lote_labores_realizadas
        Ctrl.LoteLaboresRealizadasCRUD = $injector.get("CRUD").config({
            base_url: "/api/lotelaboresrealizadas/lotelaboresrealizadas",
            limit: 1000,
            add_append: "refresh",
        });

        Ctrl.guardarLaborRealizada = (lote, labor_id, delta) => {
            console.log(labor_id);
            Ctrl.LoteLaboresRealizadasCRUD.add({
                lote_id: lote.id,
                labor_id: labor_id,
                cumplimiento: delta===0?1:0.5, 
                fecha: (new Date()).toISOString().slice(0, 10) //slice es para hacer formato a la fecha y coger solo los 10 primeros
            });
        }
        //FIN DEV ANGÉLICA

        //INICIO DEV ANGÉLICA 
        Ctrl.nuevoLoteLabor = () => {
            Ctrl.LoteLaboresCRUD.dialog({
                Flex: 10,
                Title: "Agregar Labor",

                Confirm: { Text: "Agregar Labor" }
            }).then(r => {
                if (!r) return;
                Ctrl.LoteLaboresCRUD.add(r);
                Rs.showToast('Labor Agregada');
            });
        };    
        //FIN DEV ANGÉLICA 


        //INICIO DEV ANGÉLICA ------> para hacer el modal agregar labor eventual de productor 
        Ctrl.nuevaLaborProductor = (lote, semana_id) => {
            Rs.BasicDialog({
                Flex: 10,
                Title: "Agregar Labor",
                Fields: [
                    {
                        Nombre: "Agregue su labor de hoy",
                        Value: "",
                        Type: "textarea",
                        Required: true
                    },
                ],
                Confirm: { Text: "Agregar Labor" }
            }).then(r => {
                if (!r) return;
        
                var NuevaLaborProductor = {
                    lote_id: lote.id,
                    labor: r.Fields[0].Value,
                    semana_id,
                    fecha: new Date()
                };
                
                Ctrl.LoteLaboresProductorCRUD.add(NuevaLaborProductor).then(() => {
                    Rs.showToast("Labor de hoy agregada"); 
                    Ctrl.LaboresProductor.push({"labor":r.Fields[0].Value}); //Agrega una labor productor en la lista que estpa en memoria                  
                });
            });
        };    
        //FIN DEV ANGÉLICA 


        Ctrl.editarLoteLabor = LB => {
            Ctrl.LoteLaboresCRUD.dialog(LB, {
                title: "Editar Evento" + LB.id
            }).then(r => {
                if (r == "DELETE") return Ctrl.LoteLaboresCRUD.delete(LB);
                Ctrl.LoteLaboresCRUD.update(r).then(() => {
                    Rs.showToast("Evento actualizado");
                });
            });
        };

        Ctrl.eliminarLoteLabor = LB => {
            Rs.confirmDelete({
                Title: "¿Eliminar Lote #" + LB.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.LoteLaboresCRUD.delete(LB);
            });
        };
        // FIN
          
    }
]);

angular.module('OpcionesCtrl', []).controller('OpcionesCtrl', [
    '$scope',
    '$rootScope',
    '$http',
    '$injector',
    '$mdDialog',
    function ($scope, $rootScope, $http, $injector, $mdDialog) {
        var Ctrl = $scope
        var Rs = $rootScope

        Ctrl.Salir = $mdDialog.cancel

        Ctrl.value = 0


        Ctrl.OpcionesCRUD = $injector.get('CRUD').config({
            base_url: '/api/opciones/opciones',
            limit: 1000,
            add_append: 'refresh',
            order_by: ['-created_at'],
            // query_with:['']
        })


        Ctrl.getOpciones = () => {
            //  Ctrl.OpcionesCRUD.setScope('id', Rs.Usuario.organizacion_id[1]); //con el setScope estoy haciendo un filtro en la BD para que él nos traiga sólo un registro
            /*Ctrl.OpcionesCRUD.get().then(() => {
              Ctrl.Opcion = Ctrl.OpcionesCRUD.rows[0]
              //Ctrl.editarLote(Ctrl.LotesCRUD.rows[0]);
            })*/
            Rs.http('/api/opciones', {}, Ctrl, 'Opciones');
        }

        Ctrl.getOpciones()

        Ctrl.nuevaOpcion = () => {
            Ctrl.OpcionesCRUD.dialog({
                Flex: 10,
                title: 'Crear Opcion',

                Confirm: {
                    Text: 'Crear Opcion'
                },
            }).then((r) => {
                if (!r) return
                Ctrl.OpcionesCRUD.add(r)
                Rs.showToast('Opcion Creada')
            })
        }
        Ctrl.editarOpcion = (Ops) => {
            Ctrl.OpcionesCRUD.dialog(Ops, {
                title: 'Editar Opcion' + Ops.id,
            }).then((r) => {
                if (r == 'DELETE') return Ctrl.OpcionesCRUD.delete(Ops)
                Ctrl.OpcionesCRUD.update(r).then(() => {
                    Rs.showToast('Opción actualizada')
                })
            })
        }
        Ctrl.eliminarOpcion = (Ops) => {
            Rs.confirmDelete({
                Title: '¿Eliminar Lote #' + Ops.id + '?',
            }).then((d) => {
                if (!d) return
                Ctrl.OpcionesCRUD.delete(Ops)
            })
        }

        Ctrl.actualizarOpciones = () => {
            // console.log(typeof Ctrl.opcion);
            let opcionesCambiadas = Object.values(Ctrl.Opciones).filter(O => O.changed);
            Rs.http('/api/opciones/actualizar', {
                Opciones: opcionesCambiadas
            }).then(() => {
                Rs.showToast('Opción Actualizada')
            });

        }
        // Validar Organización para cargar opciones
        // Las opciones solo apareceran a usuarios con la organizacion ID 1
        switch (parseInt(Rs.Usuario['organizacion_id'])) {
            case 1:
                Ctrl.listOpciones = true;
                break;
        }
    },
])

angular.module('Organizaciones_OrganizacionEditorCtrl', [])
.controller('Organizaciones_OrganizacionEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
	function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Caso = angular.copy(Caso);

		Ctrl.SeccionesCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/organizaciones/secciones',
			limit: 1000,
			add_append: 'refresh',
		});

		Ctrl.getSecciones = () => {
			Ctrl.SeccionesCRUD.setScope('laorganizacion', Organizacion.id).get();
		}
		Ctrl.getOrganizaciones();

	}
]);
angular.module("OrganizacionesCtrl", []).controller("OrganizacionesCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$state",
    "$injector",
    "$mdDialog",
    "Upload",  //DEV ANGÉLICA -->
    function($scope, $rootScope, $http, $state, $injector, $mdDialog, Upload) {

        var Ctrl = $scope;
        var Rs = $rootScope;
        var departamentos = [];

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.OrganizacionesCRUD = $injector.get("CRUD").config({
            base_url: "/api/organizaciones/organizaciones",
            limit: 1000,
            //add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['linea_productiva']
        });
        Ctrl.perfil_id = Rs.Usuario.perfil_id;
        Ctrl.filterNombre = "";
        Ctrl.filterNit = "";

        Ctrl.filterNombre = "";
        Ctrl.filterNit = "";

        Ctrl.value = 0;

        Ctrl.myHTML =
        'I am an <code>HTML</code>string with ' +
        '<a href="#">links!</a> and other <em>stuff</em>';

        //INICIO DEV ANGÉLICA -- MURO
        Ctrl.OrganizacionesmuroseccionesCRUD = $injector.get('CRUD').config({
            base_url: '/api/organizacionesmurosecciones/organizacionesmurosecciones',
            limit: 1000,
			add_append: 'refresh',
            query_with: ['usuario'],
			order_by: [ '-created_at' ]
		});

        Ctrl.obtenerSecciones = (organizacion_id) => {
            Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', organizacion_id).get();
		};

        //FIN DEV ANGÉLICA
        Ctrl.getOrganizacion = () => {
            // Ctrl.OrganizacionesCRUD.setScope('id', Rs.Usuario.organizacion_id); //con el setScope estoy haciendo un filtro en la BD para que él nos traiga sólo un registro
            Ctrl.OrganizacionesCRUD.get().then(() => {
                Ctrl.Organizacion = Ctrl.OrganizacionesCRUD.rows.find(O => O.id === Rs.Usuario.organizacion_id);

                if (!Ctrl.Organizacion){
                    Ctrl.Organizacion = Ctrl.OrganizacionesCRUD.rows[0];
                }
                Ctrl.obtenerSecciones(Ctrl.Organizacion.id);
                Ctrl.Organizacionescopy = Ctrl.OrganizacionesCRUD.rows.slice();
            });

        };

        Ctrl.getOrganizacion();

        //INICIO DEV ANGPELICA
        loadDepartamentos = (col_departamento) => {
            col_departamento.Options.options = departamentos;

            /*departamentos.forEach(departamento => {
                let codigo = departamento.codigo;
                let descripcion = departamento.descripcion;
                col_departamento.Options.options = {...col_departamento.Options.options,
                    [codigo]: descripcion // si quiero que en la base de datos se vea por codigos en departamento y municipio
                    //[descripcion]: descripcion // si quiero que en la base de datos se vea por nombres(descripcion) en departamento y municipio
                };
            });//Llena el select de departamentos
            */
        }

        loadMunicipios = (valorDepartamento, col_municipio) => {
            col_municipio.Options.options = {}; //limpia el select de municipios

            $http.post ('api/lista/obtener', { lista: 'Municipios', Op1: valorDepartamento }).then((r)=>{
                col_municipio.Options.options = r.data;
			});
            /*departamento.municipios.forEach(municipio => {
                let codigo = municipio.codigo;
                let descripcion = municipio.descripcion;
                col_municipio.Options.options = {...col_municipio.Options.options,
                    //[codigo]: descripcion ----> si quiero que en la base de datos se vea por codigos en departamento y municipio
                    [descripcion]: descripcion // si quiero que en la base de datos se vea por nombres(descripcion) en departamento y municipio
                };
            }); //se trae los municipios del departamento escogido
            */
        }

        inicializarListaDepartamentoMunicipio = () => {
            let col_departamento = Ctrl.OrganizacionesCRUD.columns.find(c => c.Field == 'departamento');
            loadDepartamentos(col_departamento);

            col_departamento.Options.onChangeFn = (valorDepartamento) => {
                let col_municipio = Ctrl.OrganizacionesCRUD.columns.find(c => c.Field == 'municipio');
                loadMunicipios(valorDepartamento, col_municipio);
            }
        }
        //FIN DEV ANGÉLICA

        //INICIO DEV ANGÉLICA
        Ctrl.nuevaOrganizacion = () => {  //Esta es una función que me crea automaticamente la modal y lleva la informacion a la BD desde la modal de CRUD
            inicializarListaDepartamentoMunicipio();
        //FIN DEV ANGÉLICA

            Ctrl.OrganizacionesCRUD.dialog({
                // Flex: 10,
                title: 'Crear Organización',
                Confirm: { Text: 'Crear Organizacion' }
            }).then(r  => {
                if (!r) return;

                Ctrl.OrganizacionesCRUD.add(r).then(u =>{
                    datos_organizacion = u;
                    console.log("organizacion", datos_organizacion);
                    $http.post ('/api/opcionesutil/adicionar',{organizacion_id : datos_organizacion.id}).then((r)=>{
                        if(!r) return;
                    });
                });
                
                Rs.showToast('Organización creada')
                
            });
        };

        Ctrl.getDepartamentos = () => {
			$http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                departamentos = r.data;
			});
		}

		Ctrl.getDepartamentos();

        Ctrl.editarOrganizacion = (O) => {
            inicializarListaDepartamentoMunicipio();
            let col_municipio = Ctrl.OrganizacionesCRUD.columns.find(c => c.Field == 'municipio');
            loadMunicipios(O.departamento, col_municipio);
			Ctrl.OrganizacionesCRUD.dialog(O, {
				title: 'Editar Organización' + O.nombre
			}).then(r => {
				if(r == 'DELETE') return Ctrl.OrganizacionesCRUD.delete(O);
                if (!r) return;
				Ctrl.OrganizacionesCRUD.update(r).then(() => {
                    Ctrl.getOrganizacion();
					Rs.showToast('Organización actualizada');
				});
			});
		}

        // Funcion para MARCAR/SELECCIONAR la organizacion que el usuario logeado va a trabajar
		Ctrl.seleccionar = (u, o) => {
            $http.post('/api/usuario/actualizarorganizacion', {
                usuario: u,
                organizacion: o
            }).then(() => {
                Rs.showToast("Se cambio la Organizacion.");
                $state.reload();
            });
        };

        // Funcion para DESMARCAR la organizacion que el usuario tiene por defecto
		Ctrl.quitar = (u) => {
            $http.post('/api/usuario/quitarorganizacion', {
                usuario: u
            }).then(() => {
                Rs.showToast("Se quito la Organizacion para el Usuario.");
                $state.reload();
            });
        };

		Ctrl.eliminarOrganizacion = (O) => {
			Rs.confirmDelete({
				Title: '¿Eliminar Organizacion #'+O.id+'?',
			}).then(d => {
				if(!d) return;
				Ctrl.OrganizacionesCRUD.delete(O);
			});
        }

        //Abre el modal de publicaciones del muro
		Ctrl.abrirOrganigrama = (O) => {
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganigramaDiag',
				controller: 'OrganizacionDiagCtrl',
				locals: { Organizacion: O },
				fullscreen: false,
			});
        }


    //INICIO DEV ANGÉLICA
        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.abrirArticulomuro = (A) => {
			$mdDialog.show({
                templateUrl: 'templates/dialogs/image-editor.html',
				controller: 'ImageEditor_DialogCtrl',
				locals: {Organizacionesmurosecciones: A},
			});
        }

        //Carga imagen al servidor
        Ctrl.subirImagen = ($file) => {
            if(!$file) return;

            Upload.upload({
                url: 'api/main/upload-imagen',
                data: {file: $file,
                    Path: 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg',
                    Ancho: 560, Alto: 300, Quality: 90
                }
            }).then(function (resp) {
                respuesta = 'Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data;
            }, function (resp) {
                respuesta = 'Error status: ' + resp.status;
            });
        }

        //Abre el modal del un articulo de un muro de la organizacion
        Ctrl.nuevoArticuloMuro = (O) => {
			$mdDialog.show({
				templateUrl: 'Frag/GestionOrganizacion.OrganizacionesmuroEditorDiag',
				controller: 'ArticulomuroEditDialogCtrl',
				locals: {  },
				fullscreen: false,
			}).then(function (resp) {
                Ctrl.OrganizacionesmuroseccionesCRUD.setScope('elorganizacion', Rs.Usuario.organizacion_id).get();
            }, function (resp) {
                respuesta = 'Error status: ' + resp.status;
            });

        }

        // Creamos listado de Tipo de novedad
        Ctrl.TipoNovedad = {
            'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
            'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
        }

        Ctrl.DarFormatoFecha = (fecha) => {
            const dias = fecha.diff(now(), 'days');

            if (dias === 0) {
                return 'Publicado hoy';
            } else {
                if (dias > 30) {
                    return'Publicado hace ' + dias / 30 + ' meses';
                } else {
                    return'Publicado hace ' + dias + ' dias';
                }
            }
        }

        Ctrl.Update = () => {
            //alert("Update");
        }
    //FIN DEV ANGÉLICA

    //INICIO DEV ANGELICA --> O = Organizacion
    Ctrl.cargarImagen = async() => {
        var Imagen = await $mdDialog.show({
            templateUrl: 'templates/dialogs/image-editor.html',
            controller: 'ImageEditor_DialogCtrl',
            multiple: true,
            locals: {
                Config: {
                    Theme: 'default',
                    CanvasWidth: 200,
                    CanvasHeight: 200,
                    CropWidth: 200,
                    CropHeight: 200,
                    MinWidth: 50,
                    MinHeight: 50,
                    KeepAspect: true,
                    Preview: false,
                    Daten: {
                        Path: 'files/img_perfil_organizacion/' + Ctrl.Organizacion.id + '.jpg'
                    }
                }
            }
        });
        let logo = document.getElementById("logo_perfil");
        logo.src = "/../files/img_perfil_organizacion//" + Ctrl.Organizacion.id + ".jpg?d=" + new Date().getTime();
    };
    //FIN DEV ANGELICA


    //INICIO DEV ANGÉLICA
    Ctrl.filterOrganizacion = () => {
        //Filtro de tipo de organizacion
        Ctrl.Organizacionescopy = Ctrl.OrganizacionesCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
        //Filtro para nombre
        if (Ctrl.filterNombre && Ctrl.filterNombre.length > 2){
            //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
            Ctrl.Organizacionescopy = Ctrl.Organizacionescopy.filter(O => O.nombre.toUpperCase().indexOf(Ctrl.filterNombre.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
        }
        //Filtro para buscar Nit
        if (Ctrl.filterNit && Ctrl.filterNit.length > 2){
            //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
            Ctrl.Organizacionescopy = Ctrl.Organizacionescopy.filter(O => O.nit.toUpperCase().indexOf(Ctrl.filterNit.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
        }
        if (Ctrl.filterLineaProductiva && Ctrl.filterLineaProductiva.length >= 1){
            //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
            Ctrl.Organizacionescopy = Ctrl.Organizacionescopy.filter(L => L.linea_productiva.nombre.toUpperCase().indexOf(Ctrl.filterLineaProductiva.toUpperCase())> -1);
        }
    } //FIN DEV ANGÉLICA
    }

]);

angular.module('PerfilesCtrl', [])
    .controller('PerfilesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Obtener la información de los perfiles existentes.
            Ctrl.PerfilesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/perfiles',
                limit: 100,
                add_append: 'refresh',
            });
            Ctrl.getPerfiles = () => {
                Ctrl.PerfilesCRUD.get().then(() => {
                    Ctrl.abrirPerfil(Ctrl.PerfilesCRUD.rows[0]);
                });
            };

            Ctrl.PerfilesSeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/perfiles/secciones',
                limit: 100,
                add_append: 'refresh',
                order_by: ['seccion_id']
            });
            // Ejecutar el metodo para cargar los registros al controlador
            Ctrl.getPerfilesSeccion = () => {
                Ctrl.PerfilesSeccionesCRUD.get().then(() => {});
            };

            // Obtener la información de las secciones existentes.
            Ctrl.SeccionesCRUD = $injector.get('CRUD').config({
                base_url: '/api/secciones/secciones',
                limit: 100,
                add_append: 'refresh',
                order_by: ['seccion', 'subseccion']
            });
            Ctrl.getSecciones = () => {
                return Ctrl.SeccionesCRUD.get().then(() => {
                    Ctrl.secciones = angular.copy(Ctrl.SeccionesCRUD.rows);
                    // Ctrl.SeccionesCRUD.rows.forEach(S => {
                    //     secciones[S.id] = S;
                    // });
                    // Ctrl.secciones = secciones;
                });
            };

            // Ejecutar el metodo para cargar los registros al controlador
            Ctrl.getSecciones().then(Ctrl.getPerfiles());

            // Crear arreglo
            Ctrl.nivelesSeguridad = [
                { 'nivel': 0, 'etiqueta': 'Sin acceso', 'icono': 'fa-lock' },
                { 'nivel': 10, 'etiqueta': 'Visualización', 'icono': 'fa-eye' },
                { 'nivel': 20, 'etiqueta': 'Adición', 'icono': 'fa-plus' },
                { 'nivel': 30, 'etiqueta': 'Edición', 'icono': 'fa-pen' },
                { 'nivel': 40, 'etiqueta': 'Borrado', 'icono': 'fa-trash' },
                { 'nivel': 50, 'etiqueta': 'Control Total', 'icono': 'fa-hdd' },
            ];

            // Función para cargar las secciones segun el perfil seleccionado.
            Ctrl.abrirPerfil = (P) => {
                Ctrl.perfilSel = P;

                Ctrl.PerfilesSeccionesCRUD.setScope('perfil', P.id).get().then(() => {
                    angular.forEach(Ctrl.secciones, S => {
                        S.nivel = 0;
                    });
                    angular.forEach(Ctrl.PerfilesSeccionesCRUD.rows, PS => {
                        var seccion = Ctrl.secciones.find( S => S.id == PS.seccion_id )
                        seccion.nivel = PS.nivel;
                        // Ctrl.secciones[PS.seccion_id].nivel = PS.nivel;
                    });
                });
            };

            Ctrl.guardarPermisos = () => {
                $http.post('api/perfiles/guardar-permisos', {
                    'perfil_id': Ctrl.perfilSel.id,
                    'secciones': Ctrl.secciones
                });
            };
        }
    ]);

angular
  .module('SeccionCtrl', [])
  .controller('SeccionCtrl', function ($scope, $mdSidenav) {
    $scope.toggleSidenav = buildToggler('closeEventsDisabled');

    function buildToggler(componentId) {
      return function() {
        $mdSidenav(componentId).toggle();
      };
    }
  });
angular.module('UsuariosCtrl', [])
    .controller('UsuariosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.filterDocumento = "";
            Ctrl.filterNombre = "";
            Ctrl.filterApellido = "";

            // Cargar CRUD angular para Usuarios
            Ctrl.UsuariosCRUD = $injector.get('CRUD').config({
                base_url: '/api/usuario/usuarios',
                //limit: 100,
                add_append: 'refresh',
                query_with: ['perfil', 'organizaciones_usuario'],
            });

            // console.log(Rs.Usuario);
            // console.log(Rs.Usuario.organizacion_id);
            Ctrl.getUsuarios = () => {
                if ( Rs.Usuario.organizacion_id > 0 ) {
                    
                    // Cargar los usuario que pertenecen a la organizacion seleccionada
                    /*
                    $http.post('api/organizaciones/usuarios', {
                        organizacion: Rs.Usuario.organizacion_id
                    }).then(res => {
                        if (res.data.length > 0) {
                            Ctrl.UsuariosCRUD.rows = res.data;
                        }
                        Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows;
                    });
                    */
                    Ctrl.UsuariosCRUD.setScope("laorganizacion", Rs.Usuario.organizacion_id); //Me trae las fincas del usuario
                    Ctrl.UsuariosCRUD.get().then(() => {
                        Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice();
                    });

                } else {
                    // Ctrl.getUsuarios = () => {
                    // Asignar organizacion por defecto y obtener la informacion del usuario
                    // 20210505 Se quita funcion de filtrar por Organizacion.
                    // Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.setScope(
                    //     'laorganizacion',
                    //     Rs.Usuario.organizacion_id
                    // );
                    Ctrl.UsuariosCRUD.get().then(() => {
                        Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice();
                        //Ctrl.cargarFincas(Ctrl.UsuariosCRUD.rows[1]); //FIX
                    });
                }
            };
            Ctrl.getUsuarios();

        //INICIO JUAN CARLOS
        loadDepartamentos = (col_departamento) => {
            col_departamento.Options.options = departamentos;
        }

        loadMunicipios = (valorDepartamento, col_municipio) => {
            col_municipio.Options.options = {}; //limpia el select de municipios

            $http.post ('api/lista/obtener', { lista: 'Municipios', Op1: valorDepartamento }).then((r)=>{
                col_municipio.Options.options = r.data;
			});
        }

        inicializarListaDepartamentoMunicipio = () => {
            let col_departamento = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'departamento');
            loadDepartamentos(col_departamento);

            col_departamento.Options.onChangeFn = (valorDepartamento) => {
                let col_municipio = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'municipio');
                loadMunicipios(valorDepartamento, col_municipio);
            }
        }

        Ctrl.getDepartamentos = () => {
			$http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                departamentos = r.data;
			});
		}

		Ctrl.getDepartamentos();
        //FIN JUAN CARLOS

            // Modal para la creacion del usuario.
            Ctrl.nuevo = () => {
                inicializarListaDepartamentoMunicipio();
                Ctrl.UsuariosCRUD.dialog({
                    tipo_documento: 'CC',
                    organizacion_id: Rs.Usuario.organizacion_id
                }, {
                    title: 'Agregar Usuario',
                    except: [
                        'finca_id',
                        // 'organizacion_id',
                    ],
                }).then(U => {
                    if (!U) return;
                    Ctrl.UsuariosCRUD.add(U)
                        .then(() => {
                            Rs.showToast('Usuario creado');
                        });
                });
            };

            // Modal para la edicion de los datos del usuarios
            Ctrl.editarUsuario = (U) => {
                inicializarListaDepartamentoMunicipio();
                let col_municipio = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'municipio');
                loadMunicipios(U.departamento, col_municipio);
                Ctrl.UsuariosCRUD.dialog(U, {
                    title: `Editar usuario: ${ U.nombres } ${ U.apellidos }`,
                    except: [
                        'finca_id'
                        // 'organizacion_id',
                    ]
                }).then(r => {
                    if (!r) return;
                    if (r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
                    Ctrl.UsuariosCRUD.update(r).then(() => {
                        //Ctrl.UsuariosCRUD.get();
                        Rs.showToast(`Usuario ${ U.nombres } actualizado`);
                    });
                });
            };

            // Moda para el cambio de clave del usuario
            Ctrl.cambiarClave = U => {
                Rs.BasicDialog({
                    Flex: 30,
                    Title: `Cambiar Clave ${ U.nombres }`,
                    Fields: [{
                        Nombre: "Nueva Clave",
                        Value: '', //U.contrasena,
                        Type: "string",
                        Required: true,
                    }, ],
                    Confirm: { Text: "Actualiza Clave" }
                }).then(u => {
                    if (!u) return;

                    var nuevaclave = u.Fields[0].Value;
                    if (nuevaclave.trim() != '') {
                        var ClaveCambiada = {
                            usuario_id: U.id,
                            contrasena: u.Fields[0].Value,
                        };
                        // Accedemos mediante la API para el cambio de clave.
                        $http.post('/api/usuario/actualizar-clave', ClaveCambiada)
                            .then(() => {
                                Rs.showToast("Se cambio la clave.");
                            });
                    } else {
                        Rs.showToast("Se envio la clave en blanco. No se modifica.");
                    }
                });
            };

            // Modal para la carga de las fincas y las zonas del usuario seleccionado.
            Ctrl.cargarFincas = (U) => {
                $mdDialog.show({
                    templateUrl: 'Frag/AdministracionGeneral.UsuarioFincas',
                    controller: 'UsuarioFincaCtrl',
                    locals: {
                        DatosUsuario: U
                    },
                    fullscreen: false,
                });
            };

            // Modal para la carga de las organizaciones del usuario seleccionado.
            Ctrl.organizaciones = (U) => {
                $mdDialog.show({
                    templateUrl: 'Frag/AdministracionGeneral.UsuarioOrganizacion',
                    controller: 'UsuarioOrganizacionCtrl',
                    locals: {
                        DatosUsuario: U
                    },
                    fullscreen: false,
                });
            };

            //INICIO DEV ANGÉLICA
            Ctrl.filterUsuarios = () => {
                    // Filtro de tipo de Documento
                    Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
                    if (Ctrl.filterDocumento && Ctrl.filterDocumento.length >= 1) {
                        //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                        Ctrl.Usuarioscopy = Ctrl.Usuarioscopy.filter(U => U.documento == Ctrl.filterDocumento);
                    }

                    //Filtro para nombre
                    if (Ctrl.filterNombre && Ctrl.filterNombre.length > 2) {
                        //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                        Ctrl.Usuarioscopy = Ctrl.Usuarioscopy.filter(U => U.nombres.toUpperCase().indexOf(Ctrl.filterNombre.toUpperCase()) > -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
                    }
                    //Filtro para buscar Nit
                    if (Ctrl.filterApellido && Ctrl.filterApellido.length > 2) {
                        //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
                        Ctrl.Usuarioscopy = Ctrl.Usuarioscopy.filter(U => U.apellidos.toUpperCase().indexOf(Ctrl.filterApellido.toUpperCase()) > -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
                    }
                }
                //FIN DEV ANGÉLICA


            //Opciones para importar la plantilla
            Ctrl.subirArchivo = (archivo) =>{
                if(archivo.length > 0){
                    Ctrl.plantilla = archivo;
                    //console.log(archivo);
                }else{
                    $mdDialog.show(
                        $mdDialog.alert()
                          .clickOutsideToClose(true)
                          .title('SITUACIÓN CON EL ARCHIVO')
                          .textContent('No se ha seleccionado ninguna plantilla de usuarios')
                          .ariaLabel('NO HAY ARCHIVO')
                          .ok('Entendido!')
                          //.targetEvent(ev)
                      );
                }

            }
            Ctrl.pruebaPost = ($files) => {
                var datos = new FormData();
                datos.append("organizacion_id", Rs.Usuario.organizacion_id);
                datos.append("archivo", Ctrl.plantilla[0]);

                var config = {
                    method : 'POST',
                    headers: {'Content-Type': undefined}
                }
                $http.post('/api/usuario/importar-test',datos,config).then((respuesta) => {
                    //alert("se logro");
                    console.log(respuesta.data);
                    $mdDialog.show({
                        templateUrl: 'Frag/AdministracionGeneral.UsuariosImportarDiag',
                        controller: 'UsuariosImportarCtrl',
                        parent: angular.element(document.body),
                        locals: {
                            usuarios: respuesta
                        },
                        fullscreen: false,
                        clickOutsideToClose: true,
                    });
                    
                });
            }
        }

    ]);

angular.module('UsuarioFincaCtrl', ['ngFileUpload']) //ngFileUpload
    .controller('UsuarioFincaCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'DatosUsuario',
        function($scope, $rootScope, $http, $injector, $mdDialog, DatosUsuario) {

            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;
            Ctrl.UsuarioFinca = DatosUsuario;

            // Datos por defecto para personalizacion de labores
            var zonaSeleccionada = 0;
            var lineaSeleccionada = 0;
            var loteSeleccionado = 0;

            //INICIO DEV ANGÉLICA
            //Para leer un archivo de excel
            Ctrl.SelectFile = function(file) {
                Ctrl.SelectedFile = file;
            };
            Ctrl.Upload = (L) => {
                //debugger;
                var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.xls|.xlsx)$/;
                if (regex.test(Ctrl.SelectedFile.name.toLowerCase())) {
                    if (typeof(FileReader) != "undefined") {
                        var reader = new FileReader();
                        //For Browsers other than IE.
                        if (reader.readAsBinaryString) {
                            reader.onload = function(e) {
                                Ctrl.ProcessExcel(e.target.result, L);
                            };
                            reader.readAsBinaryString(Ctrl.SelectedFile);
                        } else {
                            //For IE Browser.
                            reader.onload = function(e) {
                                var data = "";
                                var bytes = new Uint8Array(e.target.result);
                                for (var i = 0; i < bytes.byteLength; i++) {
                                    data += String.fromCharCode(bytes[i]);
                                }
                                Ctrl.ProcessExcel(data, L);
                            };
                            reader.readAsArrayBuffer(Ctrl.SelectedFile);
                        }
                    } else {
                        alert("Este navegador no soporta HTML5");
                    }
                } else {
                    alert("Por favor subir un archivo de excel vàlido.");
                }
            };

            Ctrl.ProcessExcel = function(data, L) {
                debugger;
                //Read the Excel File data.
                var workbook = XLSX.read(data, {
                    type: 'binary'
                });

                //Fetch the name of First Sheet.
                var firstSheet = workbook.SheetNames[0];

                //Read all rows from First Sheet into an JSON array.
                var excelRows = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[firstSheet]);
                L.coordenadas = '';
                excelRows.forEach(element => {
                    //console.log(element.lat);
                    if (L.coordenadas.length > 0 ){
                        L.coordenadas += ',';
                    }
                    L.coordenadas += '{"lat":' + element.lat + ', "lng":' + element.lng + '}';
                    
                });
                L.coordenadas = '[' + L.coordenadas + ']';
            };
            //FIN DEV ANGELICA

            // Cargar las fincas del usuario seleccionado
            $http.post('api/fincas/usuario', {
                usuario: Ctrl.UsuarioFinca.id
            }).then(res => {
                if (res.data.length > 0) {
                    Ctrl.Fincas = res.data;
                    // console.log(Ctrl.Fincas);
                    Ctrl.cargarLotes(Ctrl.Fincas[0]);
                }
            });

            // Cargar los lotes de la finca seleccionada
            var fincaDefault = 0;
            Ctrl.cargarLotes = (F) => {
                Ctrl.F = F;
                loteSeleccionado = 0;
                lineaSeleccionada = 0;
                $http.post('api/lotes/finca', {
                    finca: F.id
                }).then(res => {
                    Ctrl.Lotes = res.data;
                    //console.log('Informacion de lote: ', Ctrl.Lotes[0]);
                    calcularZona(F);
                    // Ctrl.LoteSeleccionado = Ctrl.Lotes[0];

                    if (Ctrl.Lotes[0]) {
                        // console.log(Ctrl.Lotes[0]);
                        Ctrl.cargarLote(Ctrl.Lotes[0]);
                        loteSeleccionado = Ctrl.Lotes[0].id;
                        lineaSeleccionada = Ctrl.Lotes[0].linea_productiva_id;
                    } else {
                        Ctrl.L = 0;
                        console.log('No hay lotes en la finca');
                    }
                    // if ( Ctrl.LoteSeleccionado ) {
                    //     console.log('Lote: ' + Ctrl.LoteSeleccionado.id);
                    // } else {
                    //     console.log('No existe lote.');
                    // }
                });
                fincaDefault = F;
            };

            Ctrl.formularioNuevaFinca = () => {
                Ctrl.F = null;
                fincaDefault = null;
            };

            // Funcion para la carga de informacion de cada lote por Finca
            Ctrl.cargarLote = (L) => {
                // console.log(L);
                Ctrl.L = L;
                loteSeleccionado = L.id;
                lineaSeleccionada = L.linea_productiva_id;
                //Ctrl.personalizarLabores(); //FIX
                //console.log('Informacion de otro lote: ', L);
            };

            Ctrl.formularioNuevoLote = () => {
                Ctrl.L = null;
            };

            // Obtener el listado de las lineas productivas
            $http.post('api/lineasproductivas/obtener', {})
                .then(res => {
                    Ctrl.Lineasproductivas = res.data;
                    // console.log(Ctrl.Lineasproductivas);
                });

            // Obtener el listado de las labores.
            $http.post('api/labores/obtener', {})
                .then(res => {
                    Ctrl.Labores = res.data;
                });

            // Obtener los datos de la lista 3: Municipios
            $http.post('api/lista/listacompleta', {
                id: 3
            }).then((r) => {
                Ctrl.Municipios = r.data;
            });

            // Obtener los datos de la lista 2: Departamentos
            $http.post('api/lista/listacompleta', {
                id: 2
            }).then((r) => {
                Ctrl.Departamentos = r.data;
            });

            // Obtener los datos de la lista 6: Tipo de Cultivo
            $http.post('api/lista/listacompleta', {
                id: 5
            }).then((r) => {
                Ctrl.TipoCultivo = r.data;
            });

            // Obtener los datos de la lista 7: Tipos de Suelo
            $http.post('api/lista/listacompleta', {
                id: 4
            }).then((r) => {
                Ctrl.TipoSuelo = r.data;
            });

            // Guardar / Actualizar los datos de la finca
            Ctrl.guardarFinca = (F) => {
                $http.post('api/fincas/actualizar', {
                    Datos: F
                });
                Ctrl.Cancel();
            };

            // Agregar registro de finca.
            Ctrl.nuevaFinca = (Fn) => {
                $http.post('api/fincas/crear', {
                    Datos: Fn,
                    usuario: Ctrl.UsuarioFinca.id
                });
                Ctrl.Cancel();
            };

            // Guardar / Actualizar lote de la finca.
            Ctrl.guardarLote = (L) => {
                $http.post('api/lotes/actualizar', {
                    Datos: L
                });
                Ctrl.Cancel();
            };

            // Agregar registro de lote
            Ctrl.nuevoLote = (L) => {
                $http.post('api/lotes/crear', {
                    Datos: L,
                    finca: fincaDefault.id,
                    organizacion: 1 //Actualizar organizaciòn
                });
                Ctrl.Cancel();
            };

            // Obtener los datos maximos y minimos por cada zona y linea productiva
            $http.post('api/zonas/obtener', {}).then((r) => {
                Ctrl.zonas = r.data;
            });

            Ctrl.recalcularZona = (data) => {
                if (data['temperatura'] > 0 && data['humedad_relativa'] > 0 && data['precipitacion'] > 0 && data['altimetria'] > 0 && data['pendiente'] > 0 && data['brillo_solar'] > 0) {
                    calcularZona = (data);
                }
            };

            calcularZona = (Finca) => {
                // console.log('Finca: ', Finca);
                // recorrer las zonas y validar los valores contra la finca, para obtener porcentajes
                zonaprimaria = [];
                angular.forEach(Ctrl.zonas, function(data) {
                    var contadorzona = 0;

                    if (data['temperatura_min'] <= Finca['temperatura'] && data['temperatura_max'] >= Finca['temperatura']) {
                        contadorzona++;
                    }
                    if (data['humedad_relativa_min'] <= Finca['humedad_relativa'] && data['humedad_relativa_max'] >= Finca['humedad_relativa']) {
                        contadorzona++;
                    }
                    if (data['precipitacion_min'] <= Finca['precipitacion'] && data['precipitacion_max'] >= Finca['precipitacion']) {
                        contadorzona++;
                    }
                    if (data['altimetria_min'] <= Finca['altimetria'] && data['altimetria_max'] >= Finca['altimetria']) {
                        contadorzona++;
                    }
                    if (data['pendiente_min'] <= Finca['pendiente'] && data['pendiente_max'] >= Finca['pendiente']) {
                        contadorzona++;
                    }
                    if (data['brillo_solar_min'] <= Finca['brillo_solar'] && data['brillo_solar_max'] >= Finca['brillo_solar']) {
                        contadorzona++;
                    }
                    zonaprimaria.push({
                        'average': parseInt(contadorzona / 6 * 100),
                        'zona_id': data['id'],
                        'description': data['descripcion'],
                        'amount': contadorzona
                    });
                });
                zonaprimaria.reverse((a, b) => a.average > b.average);
                // console.log(zonaprimaria);
                var texto = zonaprimaria[0].description + ': Coincidencia del ' + zonaprimaria[0].average + '%';
                Ctrl.zp = (zonaprimaria[0].average < 70) ? 'Subzona de ' + texto : 'Zona de ' + texto;
                zonaSeleccionada = zonaprimaria[0].zona_id;
                // console.log('Zona primaria: ', zonaprimaria);
            };

            Ctrl.personalizarLabores = () => {
                // console.log(`zona ${zonaSeleccionada}, Linea ${lineaSeleccionada}, Lote ${loteSeleccionado}`);
                if (zonaSeleccionada > 0 && lineaSeleccionada > 0 && loteSeleccionado > 0) {
                    $http.post('api/loteslabores/personalizar', {
                        Datos: {
                            'lote': loteSeleccionado,
                            'linea': lineaSeleccionada,
                            'zona': zonaSeleccionada
                        }
                    });
                    //Ctrl.Cancel();
                    $mdDialog.show({
                        templateUrl: 'Frag/AdministracionGeneral.UsuarioLabores',
                        controller: 'UsuarioLaboresCtrl',
                        locals: {
                            DatosLote: loteSeleccionado
                        },
                        multiple: true,
                        fullscreen: false,
                    });
                } else {
                    console.log('Aun no se crea Lote para la finca.');
                }
                // console.log('Lote: ' + Lote.id, Labor);
                // $http.post('api/loteslabores/crear', {
                //     Datos: {
                //         'lote': 20, // Lote['id'],
                //         'labor': 23, // Labor['id'],
                //         'labor_des': 'CORTADO CNSTANTE', // Labor['labor'],
                //         'inicio': 15, // Lote['inicio'],
                //         'frecuencia': 35, // Lote['frecuencia'],
                //         'margen': 3  // Lote['margen']
                //     }
                // });
                // Ctrl.Cancel();
            };


            Ctrl.OrganizacionLinea = (Linea) => {
                $http.post('api/organizaciones/linea', {
                    linea: Linea
                }).then((r) => {
                    Ctrl.OrganizacionLinea = r.data;
                    console.log(Ctrl.OrganizacionLinea);
                });
                console.log(Linea);
            };
            // Modal para cargar el cronograma de labores.
            // Ctrl.cargarCronograma = ( L ) => {
            //     Ctrl.Cancel();
            //     $mdDialog.show({
            //         templateUrl: 'Frag/AdministracionGeneral.UsuarioLabores',
            //         controller: 'UsuarioLaboresCtrl',
            //         locals: { 
            //             DatosLote: 'Labor bien bonita'
            //         },
            //         fullscreen: false,
            //     });
            // };
        }
    ]);

angular.module('UsuarioLaboresCtrl', [])
    .controller('UsuarioLaboresCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'DatosLote',
        function($scope, $rootScope, $http, $injector, $mdDialog, DatosLote) {

            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;
            
            let anioActual = new Date().getFullYear()
            Ctrl.anioSelected = angular.copy(anioActual);

            // cargar listado de años, desde el 2021
            Ctrl.anios = [
                (anioActual - 1),
                anioActual,
                (anioActual + 1)
            ];

            // Funcion para el numero de la semana de una fecha establecida.
            // TOMADO DE: https://es.stackoverflow.com/questions/110209/encontrar-semana-del-a%C3%B1o-con-javascript?newreg=e65a27537fe749d4ad4bad31604ae00f
            // Date.prototype.numeroSemana = function ( fecha ) {
            numeroSemana = function(fecha) {
                // console.log(fecha);
                var d = new Date(fecha); // Creamos un nuevo Date con la fecha
                d.setHours(0, 0, 0, 0); // Limpiamos la hora estableciendo valores cero
                d.setDate(d.getDate() + 4 - (d.getDay() || 7)); // Recorremos los días para asegurarnos de estar "dentro de la semana"
                return Math.ceil((((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7) + 1) / 7); //Finalmente, calculamos redondeando y ajustando por la naturaleza de los números en JS:
            };

            // Cargar la informacion de labores del lote.
            Ctrl.cargarLabores = () => {
                $http.post('api/loteslabores/loteid', {
                    lote: DatosLote
                }).then((r) => {
                    InfoLabores = r.data;
                    cronograma(Ctrl.anioSelected);
                });
            };

            // Funcion para cargar los datos que se llevaran al cronograma
            cronograma = (anio) => {
                // obtenemos el primer dia del año, para saber los dias para el primer lunes del año.
                var primerdiaanio = new Date(anio, 0, 1).getDay();
                var numeroSemanasAnio = (primerdiaanio == 1) ? 53 : 52;
                switch (primerdiaanio) {
                    case 0:
                        diasParaLunes = 1;
                        break;
                    case 1:
                        diasParaLunes = 0;
                        break;
                    default:
                        diasParaLunes = 9 - primerdiaanio;
                        break;
                }
                var primerLunes = new Date(anio, 0, diasParaLunes);
                var lunesEnero = primerLunes.getFullYear() + '-' + (primerLunes.getMonth() + 1) + '-' + primerLunes.getDate();
                var encabezado = [];
                // organizar el valor del primer dato del arreglo (pendiente)
                // encabezado.push({ semana: 1, fecha: lunesEnero });
                // Crear arreglo para el encabezado de los datos.
                var lunesSiguiente = primerLunes;
                for (var i = 1; i <= numeroSemanasAnio; i++) {
                    encabezado.push({ semana: i, fecha: lunesSiguiente, fecha_corta: moment(lunesSiguiente).format('DD MMM') });
                    lunesSiguiente = new Date(lunesSiguiente.setDate(lunesSiguiente.getDate() + 7));
                }
                Ctrl.encabezado = encabezado;

                var detalle = [];
                // validar el año de establecimiento contra el año de la consulta del cronograma de labores.
                var anioEstablecimiento = InfoLabores[0]['fecha_establecimiento'].substr(0, 4);
                var mesEstablecimiento = InfoLabores[0]['fecha_establecimiento'].substr(5, 2);
                var diaEstablecimiento = InfoLabores[0]['fecha_establecimiento'].substr(8, 2);

                // Establecer la semana de inicio
                var semanaInicio = numeroSemana(new Date(anioEstablecimiento, mesEstablecimiento - 1, diaEstablecimiento));

                var residuo;
                for (let d = 0; d < InfoLabores.length; d++) {
                    var frecuencia = InfoLabores[d]['frecuencia'];
                    var frecuenciaPrevia = frecuencia - 1;
                    var semanaEstablecimiento = semanaInicio;
                    var semanaInicial = semanaEstablecimiento + InfoLabores[d]['inicio'];
                    if (anioEstablecimiento == Ctrl.anioSelected) {
                        var linea = [];
                        for (let j = 1; j <= numeroSemanasAnio; j++) {
                            if (j == semanaEstablecimiento) {
                                linea.push({ semana: j, base: 'Arranca', inicio: '', tipo: 'establecimiento' });
                            } else {
                                if (j == semanaInicial) {
                                    linea.push({ semana: j, base: '', inicio: 'Inicio', tipo: 'principal' });
                                } else {
                                    if (j > semanaInicial + 1) {
                                        residuo = (j - semanaInicial) % frecuencia;
                                        if (residuo == 0) {
                                            linea.push({ semana: j, base: '', inicio: '', tipo: 'principal' });
                                        } else if (residuo == frecuenciaPrevia) {
                                            linea.push({ semana: j, base: '', inicio: '', tipo: 'secundaria' });
                                        } else if (residuo == 1) {
                                            linea.push({ semana: j, base: '', inicio: '', tipo: 'secundaria' });
                                        } else {
                                            linea.push({ semana: j, base: '', inicio: '', tipo: '' });
                                        }
                                    } else {
                                        linea.push({ semana: j, base: '', inicio: '', tipo: '' });
                                    }
                                }
                            }
                        }
                        detalle.push(linea);
                    } else if (anioEstablecimiento < Ctrl.anioSelected) {
                        // Establecer la diferencia de años para saber el inicio de periodicidad.
                        restaAnio = Ctrl.anioSelected - anioEstablecimiento;
                        var sem = semanaInicial;
                        for (var ra = 1; ra <= restaAnio; ra++) {
                            while (sem < numeroSemanasAnio) {
                                sem += frecuencia;
                            }
                            sem = sem - numeroSemanasAnio;
                        }
                        var linea = [];
                        for (let j = 1; j <= numeroSemanasAnio; j++) {
                            if (j > sem) {
                                residuo = (j - sem) % frecuencia;
                                if (residuo == 0) {
                                    linea.push({ semana: j, base: '', inicio: '', tipo: 'principal' });
                                } else if (residuo == frecuenciaPrevia) {
                                    linea.push({ semana: j, base: '', inicio: '', tipo: 'secundaria' });
                                } else if (residuo == 1) {
                                    linea.push({ semana: j, base: '', inicio: '', tipo: 'secundaria' });
                                } else {
                                    linea.push({ semana: j, base: '', inicio: '', tipo: '' });
                                }
                            } else {
                                linea.push({ semana: j, base: '', inicio: '', tipo: '' });
                            }
                        }
                        detalle.push(linea);
                    } else {
                        console.log(`El año de establecimiento es superior al año de consulta del cronograma.`);
                    }
                }

                Ctrl.detalle = detalle;
                Ctrl.InfoLabores = InfoLabores;
            };

            Ctrl.cambiarAnio = (a) => {
                Ctrl.anioSelected = a;
                cronograma(a);
            };

            // Funcion para guardar la labor personalizada.
            // Ctrl.guardarLabor = () => {
            //     $http.post('api/loteslabores/crear', {
            //         lote_id: 21,
            //         labor_id: 0,
            //         labor: Ctrl.labornombre,
            //         inicio: Ctrl.laborinicio,
            //         frecuencia: Ctrl.laborfrecuencia,
            //         margen: Ctrl.labormargen
            //     });
            //     cronograma(Ctrl.anioSelected);
            //     // Ctrl.Cancel();
            //     // $http.post('api/loteslabores/crear');
            // };

            Ctrl.agregarLabor = () => {
                let nuevaLabor = angular.copy(Ctrl.nuevaLabor);
                if (nuevaLabor.trim() == '') return;

                $http.post('api/loteslabores/crear', {
                    lote_id: DatosLote,
                    labor_id: null,
                    labor: nuevaLabor,
                    inicio: 1,
                    frecuencia: 1,
                    margen: 1
                }).then(() => {
                    Ctrl.nuevaLabor = '';
                    Ctrl.cargarLabores();
                });
            };

            Ctrl.actualizarLabor = (L) => {
                // actualizar la labor.
                $http.post('api/loteslabores/actualizar', {
                    lote_id: DatosLote,
                    labor: L.labor,
                    inicio: L.inicio,
                    frecuencia: L.frecuencia,
                    margen: L.margen
                });   
                cronograma(Ctrl.anioSelected);
            };

            Ctrl.cargarLabores();
        }
    ]);

// Referencias
// https://www.it-swarm-es.com/es/javascript/como-obtener-el-primer-dia-del-ano-actual-en-javascript/1071710421/
// https://www.codegrepper.com/code-examples/javascript/date.tostring%28+dd%2Fmm%2Fyyyy+%29+javascript
// https://unipython.com/sumar-y-restar-dias-a-una-fecha-en-java-script/
angular.module('UsuarioOrganizacionCtrl', ['ngFileUpload']) //ngFileUpload
    .controller('UsuarioOrganizacionCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'DatosUsuario',
        function($scope, $rootScope, $http, $injector, $mdDialog, DatosUsuario) {

            var Ctrl = $scope;
            var Rs = $rootScope;
            Ctrl.Cancel = $mdDialog.cancel;
            Ctrl.DatosUsuario = DatosUsuario;

            // Cargar las organizaciones del usuario seleccionado
            $http.post('api/organizaciones/usuario', {
                usuario: Ctrl.DatosUsuario.id
            }).then(res => {
                if (res.data.length > 0) {
                    Ctrl.Organizaciones = res.data;
                    // console.log(Ctrl.Organizaciones);
                }
            });

            // Cargar las organizaciones que no han sido asignadas al usuario
            $http.post('api/organizaciones/noasignada', {
                usuario: Ctrl.DatosUsuario.id
            }).then(res => {
                if (res.data.length > 0) {
                    Ctrl.Noasignada = res.data;
                    // console.log(Ctrl.Noasignada);
                }
            });

            Ctrl.agregarOrganizacion = (O) => {
                $http.post('api/organizaciones/crearusuarioorganizacion', {
                    organizacion: O,
                    usuario: Ctrl.DatosUsuario.id
                });
                Ctrl.Cancel();
            };

        }
    ]);
angular.module('UsuariosImportarCtrl', [])
    .controller('UsuariosImportarCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'usuarios',
        function($scope, $rootScope, $http, $injector, $mdDialog, usuarios) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.UsuariosImportar = usuarios.data;
            console.log(Ctrl.UsuariosImportar);


            $scope.hide = function () {
                $mdDialog.hide();
            };
          
            $scope.cancel = function () {
                $mdDialog.cancel();
            };
          
            $scope.answer = function (answer) {
                $mdDialog.hide(answer);
            };

        }

    ]);

angular.module('Zonas_ZonaEditorCtrl', [])
.controller('Zonas_ZonaEditorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Zona',
	function($scope, $rootScope, $http, $injector, $mdDialog, Zona) {
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Cancel = $mdDialog.cancel;

		Ctrl.Zona = angular.copy(Zona);

		// Ctrl.zonasCRUD = $injector.get('CRUD').config({ 
		// 	base_url: '/api/zonas/zonas',
		// 	limit: 1000,
		// 	add_append: 'refresh',
		// });

		// Ctrl.getZonas = () => {
		// 	Ctrl.ZonasCRUD.setScope('lazona', Zona.id).get();
		// };

		Ctrl.getZonas();

		
        Ctrl.guardarZona = () => {
            Ctrl.ZonasCRUD.update(Ctrl.Zona).then(() => {
						Rs.showToast("Zona Actualizada");
                
            });
        }

		$http.post('api/lineasproductivas/obtener', {}).then(r => {
			Ctrl.lineas_productivas = r.data;
			
		    });

	}
]);
angular.module("ZonasCtrl", []).controller("ZonasCtrl", [
    "$scope",
    "$rootScope",
    "$http",
    "$injector",
    "$mdDialog",
    function($scope, $rootScope, $http, $injector, $mdDialog) {
        var Ctrl = $scope;
        var Rs = $rootScope;

        Ctrl.Salir = $mdDialog.cancel;

        Ctrl.ZonasCRUD = $injector.get("CRUD").config({
            base_url: "/api/zonas/zonas",
            limit: 1000,
            add_append: "refresh",
            order_by: ["-created_at"],
            query_with:['linea_productiva']
        });

        Ctrl.getZona = () => {
            // Ctrl.ZonasCRUD.setScope('id', Rs.Usuario.Zona_id);
            Ctrl.ZonasCRUD.get().then(() => {
                Ctrl.Zona = Ctrl.ZonasCRUD.rows[0];
                //Ctrl.editarZona(Ctrl.ZonasCRUD.rows[0]);
                Ctrl.Zonascopy = Ctrl.ZonasCRUD.rows.slice();
            });
        };

        Ctrl.getZonas = () => {
            Ctrl.ZonasCRUD.get().then(() => {});
            //Ctrl.nuevo();
        };

        Ctrl.getZona();

        Ctrl.nuevaZona = () => {
            Ctrl.ZonasCRUD.dialog({
                Flex: 10,
                Title: "Crear Zona",
                Confirm: { Text: "Crear Zona" }
            }).then(r => {
                if (!r) return;
                Ctrl.ZonasCRUD.add(r);
                Rs.showToast('Zona Creada');
            });
        };

        Ctrl.editarZona = (Z) => {
			$mdDialog.show( {
				templateUrl: 'Frag/AdministracionGeneral.Zonas_ZonaEditorDiag',
				controller: 'Zonas_ZonaEditorCtrl',
				locals: { Zona: Z },
				scope: Ctrl.$new()
			});
		}


        // Ctrl.editarZona = Z => {
        //     Ctrl.ZonasCRUD.dialog(Z, {
        //         title: "Editar Zona" + Z.descripcion
        //     }).then(r => {
        //         if (r == "DELETE") return Ctrl.ZonasCRUD.delete(Z);
        //         Ctrl.ZonasCRUD.update(r).then(() => {
        //             Rs.showToast("Zona actualizada");
        //         });
        //     });
        // };

        Ctrl.eliminarZona = Z => {
            Rs.confirmDelete({
                Title: "¿Eliminar Zona #" + Z.id + "?"
            }).then(d => {
                if (!d) return;
                Ctrl.ZonasCRUD.delete(Z);
                Rs.showToast('Zona Eliminada');
            });
        };

        Ctrl.abrirOrganigrama = Z => {
            $mdDialog.show({
                templateUrl: "Frag/GestionZona.OrganigramaDiag",
                controller: "ZonaDiagCtrl",
                locals: { Zona: Z },
                fullscreen: false
            });
        };

        //INICIO DEV ANGÉLICA
        Ctrl.filterZona = () => {
            //Filtro de tipo de lote
            Ctrl.Zonascopy = Ctrl.ZonasCRUD.rows.slice(); //Cada que hagamos un filtro obtenemos los datos originales
           //Filtro para Descripcion
           if (Ctrl.filterDescripcion && Ctrl.filterDescripcion.length > 2){
            //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
            Ctrl.Zonascopy = Ctrl.Zonascopy.filter(Z => Z.descripcion.toUpperCase().indexOf(Ctrl.filterDescripcion.toUpperCase())> -1); //indexOf para mirar si una cadena está contenida en otra y me dice en que posición está contenida
           } 
           //Filtro para buscar Linea productiva
           if (Ctrl.filterLineaProductiva && Ctrl.filterLineaProductiva.length >= 1){
               //toUpperCase() --> Para pasarlo a mayúscula/ lo encuentra en minuscyulas o mayusculas
               Ctrl.Zonascopy = Ctrl.Zonascopy.filter(Z => Z.linea_productiva.nombre.toUpperCase().indexOf(Ctrl.filterLineaProductiva.toUpperCase())> -1);
           } 
        //FIN DEV ANGÉLICA
        }      
    }
]);

angular.module('ClientesCtrl', [])
    .controller('ClientesCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.filterDocumento = "";
            Ctrl.filterNombre = "";
            Ctrl.filterApellido = "";

            $scope.fichas;
          
        // function traerFichas(){

        // $http.post('/api/comercialylogistico/fichasorganizacion',{organizacion_id :  Rs.Usuario.organizacion_id})
        //         .then( (r) => {
        //         $scope.fichas = r.data;
        //         console.log("Fichas Tecnicas", $scope.fichas);
        //         });

        // };

        // traerFichas();
            

            
            $scope.nuevoCliente = function (ev) {
                $mdDialog.show({
                  //controller: 'NuevoClienteCtrl',
                  templateUrl: 'Frag/ComercialYLogistico.AdicionarClienteDiag',
                  // Appending dialog to document.body to cover sidenav in docs app
                  // Modal dialogs should fully cover application to prevent interaction outside of dialog
                  parent: angular.element(document.body),
                  targetEvent: ev,
                  clickOutsideToClose: true,
                  fullscreen: $scope.customFullscreen // Only for -xs, -sm breakpoints.
                }).then(function (answer) {
                  $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                  $scope.status = 'You cancelled the dialog.';
                });
            };



              //Funciones para las ventanas de los dialogos
              function DialogController($scope, $mdDialog) {

                //Funcion para ocultar
                $scope.hide = function () {
                  $mdDialog.hide();
                };
                
                //Funcion para cancelar
                $scope.cancel = function () {
                  $mdDialog.cancel();
                };
              }


        }

    ]);

angular.module('FichasTecnicasCtrl', [])
    .controller('FichasTecnicasCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.filterDocumento = "";
            Ctrl.filterNombre = "";
            Ctrl.filterApellido = "";

            $scope.fichas;
          
          function traerFichas(){

            $http.post('/api/comercialylogistico/fichasorganizacion',{organizacion_id :  Rs.Usuario.organizacion_id})
                  .then( (r) => {
                    $scope.fichas = r.data;
                    console.log("Fichas Tecnicas", $scope.fichas);
                  });

          };

          traerFichas();
            

            
            $scope.nuevaFicha = function (ev) {
                $mdDialog.show({
                  controller: 'NuevaFichaTecnicaCtrl',
                  templateUrl: 'Frag/ComercialYLogistico.AdicionarFichaDiag',
                  // Appending dialog to document.body to cover sidenav in docs app
                  // Modal dialogs should fully cover application to prevent interaction outside of dialog
                  parent: angular.element(document.body),
                  targetEvent: ev,
                  clickOutsideToClose: true,
                  fullscreen: $scope.customFullscreen // Only for -xs, -sm breakpoints.
                }).then(function (answer) {
                  $scope.status = 'You said the information was "' + answer + '".';
                }, function () {
                  $scope.status = 'You cancelled the dialog.';
                });
              };



              //Funciones para las ventanas de los dialogos
              function DialogController($scope, $mdDialog) {

                //Funcion para ocultar
                $scope.hide = function () {
                  $mdDialog.hide();
                };
                
                //Funcion para cancelar
                $scope.cancel = function () {
                  $mdDialog.cancel();
                };
              }


        }

    ]);

angular.module('NuevaFichaTecnicaCtrl', [])
    .controller('NuevaFichaTecnicaCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog',
        function($scope, $rootScope, $http, $injector, $mdDialog) {

            var Ctrl = $scope;
            var Rs = $rootScope;


            $scope.hide = function () {
                $mdDialog.hide();
            };
          
            $scope.cancel = function () {
                $mdDialog.cancel();
            };

        }

    ]);
angular.module('BasicDialogCtrl', [])
.controller(   'BasicDialogCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;
		Ctrl.periodDateLocale = {
			formatDate: (date) => {
				if(typeof date == 'undefined' || date === null || isNaN(date.getTime()) ){ return null; }else{
					return moment(date).format('YMM');
				}
			}
		};

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.SendData = function(){
			$mdDialog.hide(Ctrl.Config);
		}

		Ctrl.selectItem = (Field, item) => {
			if(!Field.opts.itemVal){
				Field.Value = item;
			}else{
				Field.Value = item[Field.opts.itemVal];
			}
			
		};

		Ctrl.Delete = function(ev) {
			if(Config.HasDelete){
				Config.HasDeleteConf = true;

				Ctrl.SendData();
			}
		}
	}

]);
angular.module('BottomSheetCtrl', [])
.controller('BottomSheetCtrl', ['$scope', '$rootScope', '$mdBottomSheet', 'Config', 
	function($scope, $rootScope, $mdBottomSheet, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.Cancel = function(){ $mdBottomSheet.cancel(); }

		Ctrl.Config = angular.copy(Config);

		Ctrl.Send = function(Item){
			$mdBottomSheet.hide(Item);
		}
	}
]);
angular.module('ConfirmCtrl', [])
.controller(   'ConfirmCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}

		Ctrl.Send = function(val){
			$mdDialog.hide(val);
		}
		
	}

]);
angular.module('ConfirmDeleteCtrl', [])
.controller(   'ConfirmDeleteCtrl', ['$scope', 'Config', '$mdDialog', 
	function ($scope, Config, $mdDialog) {

		var Ctrl = $scope;

		Ctrl.Config = Config;

		Ctrl.Cancel = function(){
			$mdDialog.hide(false);
		}

		Ctrl.Delete = function(){
			$mdDialog.hide(true);
		}
		
	}

]);
angular.module('CRUDDialogCtrl', [])
.controller('CRUDDialogCtrl', ['$rootScope', '$scope', '$mdDialog', 'ops', 'config', 'columns', 'Obj', 'rows', 
	function($rootScope, $scope, $mdDialog, ops, config, columns, Obj, rows) {

		console.info('CRUDDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.config = {};
		Ctrl.columns = columns;
		Ctrl.Obj = {};
		//Ctrl.Obj = angular.copy(Obj);

		//Saber si es nuevo
		Ctrl.new = !(ops.primary_key in Obj);
		Ctrl.config.confirmText = Ctrl.new ? 'Crear' : 'Guardar';
		Ctrl.config.title = Ctrl.new ? ('Nuevo '+ops.name) : ('Editando '+ops.name);
		Ctrl.config.delete_title = '¿Borrar '+ops.name+'?';

		angular.forEach(columns, function(F){
			if(F.Default !== null){
				var DefValue = angular.copy(F.Default);only
				Ctrl.Obj[F.Field] = DefValue;
			};

			F.show = true;
			if(config.only.length > 0){
				F.show = Rs.inArray(F.Field, config.only);
			};
			if(config.except.length > 0){
				F.show = !Rs.inArray(F.Field, config.except); 
			};
		});

		angular.extend(Ctrl.Obj, Obj);
		angular.extend(Ctrl.config, config);

		Ctrl.cancel = function(){ $mdDialog.hide(false); };

		Ctrl.sendData = function(){
			//Verificar los Uniques
			var Errors = 0;
			angular.forEach(columns, function(C){
				if(C.Unique){
					//console.log(ops.primary_key, Ctrl.Obj[ops.primary_key]);
					var except = Ctrl.new ? false : [ ops.primary_key, Ctrl.Obj[ops.primary_key] ];
					var Found = Rs.found(Ctrl.Obj[C.Field], rows, C.Field, undefined, except );
					if(Found) Errors++;
				};
			});

			if(Errors > 0) return false;

			$mdDialog.hide(Ctrl.Obj);
		};


		Ctrl.delete = function(ev){
			var config = {
				Title: Ctrl.config.delete_title,
			};

			Rs.confirmDelete(config).then(function(del){
				if(del){
					$mdDialog.hide('DELETE');
				};
			});
		};


		
		//Campos
		//Ctrl.fields = angular.copy

	}
]);
angular.module('ExternalLinkCtrl', [])
.controller(   'ExternalLinkCtrl', ['$scope', 'Link', '$mdDialog', '$sce',  
	function ($scope, Link, $mdDialog, $sce) {

		var Ctrl = $scope;

		Ctrl.Link = $sce.trustAsResourceUrl(Link);

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}
		
	}

]);
angular.module('FileDialogCtrl', [])
.controller('FileDialogCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$mdToast', 'FileSel', 
	function($scope, $rootScope, $http, $mdDialog, $mdToast, FileSel) {

		console.info('FileDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.FileSel = FileSel;
		Ctrl.inArray = Rs.inArray;

		//Dialog
		Ctrl.Cancel = function(){
			$mdDialog.hide();
		};

	}
]);
angular.module('IconSelectDiagCtrl', [])
.controller(   'IconSelectDiagCtrl', ['$scope',  '$mdDialog', '$http', '$filter',
	function ($scope, $mdDialog, $http, $filter) {

		var Ctrl = $scope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filter = '';
		Ctrl.CatSel = null;

		$http.get('/api/Main/iconos').then((r) => {
			Ctrl.Categorias = r.data.Categorias;
			Ctrl.IconosRaw	= r.data.Iconos;
		});

		Ctrl.Iconos = [];

		Ctrl.filterCat = (C) => { 
			Ctrl.CatSel = C; Ctrl.filterIconos(); 
		}

		Ctrl.filterIconos = () => {
			console.log(Ctrl.CatSel, Ctrl.filter);
			if(Ctrl.CatSel == null && Ctrl.filter == ''){ 
				Ctrl.Iconos = []; 
			} else if(Ctrl.filter !== ''){
				Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, Ctrl.filter) 
			} else if(Ctrl.CatSel !== null){ Ctrl.Iconos = $filter('filter')(Ctrl.IconosRaw, {
				Categoria: Ctrl.CatSel }) 
			}
		};

		Ctrl.selectIcon = (I) => {
			$mdDialog.hide(I.IconoFull);
		};
		
	}

]);

angular.module('ImageEditor_DialogCtrl', [])
.controller(   'ImageEditor_DialogCtrl', ['$scope', '$rootScope', '$mdDialog', '$mdToast', '$timeout', '$http', 'Upload', 'Config', 
	function ($scope, $rootScope, $mdDialog, $mdToast, $timeout, $http, Upload, Config) {

		var Ctrl = $scope;
		var Rs = $rootScope;

		console.info('-> Image Editor');

		Ctrl.Config = {
			Theme : 'Snow_White',		//El tema
			Title: 'Cambiar Imágen',	//El Titulo
			CanvasWidth:  350,			//Ancho del canvas
			CanvasHeight: 350,			//Alto del canvas
			CropWidth:  100,			//Ancho del recorte que se subirá
			CropHeight: 100,			//Alto del recorte que se subirá
			MinWidth:  50,				//Ancho mínimo del selector
			MinHeight: 50,				//Ancho mínimo del selector
			KeepAspect: true,			//Mantener aspecto
			Preview: false,				//Mostrar vista previa
			PreviewClass: '',			//md-img-round
			RemoveOpt: false,			//Si es texto muestra la opcion de borrar
			Daten: null					//La data a enviar al servidor
		};

		Ctrl.RotationCanvas = document.createElement("canvas");

		Ctrl.cropper = {};
		Ctrl.cropper.sourceImage = null;
		Ctrl.cropper.croppedImage = null;
		Ctrl.bounds = {};

		Ctrl.Progress = null;

		angular.extend(Ctrl.Config, Config);

		Ctrl.CancelText = Ctrl.Config.RemoveOpt ? Ctrl.Config.RemoveOpt : 'Cancelar';
		
		Ctrl.CancelBtn = function(){
			if(!Ctrl.Config.RemoveOpt){
				Ctrl.Cancel();
			}else{
				$http.post('/api/Upload/remove', { Path: Ctrl.Config.Daten.Path }).then(function(){
					$mdDialog.hide({Removed: true});
				});
			}
		}

		Ctrl.Cancel = function(){
			$mdDialog.hide();
		}

		Ctrl.Rotar = function(dir){
			var canvas = Ctrl.RotationCanvas;
			var ctx = canvas.getContext("2d");

			var image = new Image();
			image.src = Ctrl.cropper.sourceImage;
			image.onload = function() {
				canvas.width = image.height;
				canvas.height = image.width;
				ctx.rotate(dir * Math.PI / 180);
				ctx.translate(0, -canvas.width);
				ctx.drawImage(image, 0, 0); 
				Ctrl.cropper.sourceImage = canvas.toDataURL();
			};
		}

		Ctrl.$watch('Ctrl.cropper.sourceImage', function(nv, ov){
			// if(nv){
			// 	// console.log('Imagen Cargada');
			// }
		});

		Ctrl.SendImage = function(){

			var Daten = {
				file: Upload.dataUrltoBlob(Ctrl.cropper.croppedImage),
				Quality: 90
			};

			angular.extend(Daten, Config.Daten);

			Upload.upload({

				url: '/api/main/upload-img',
				data: Daten,

			}).then(function (res) {
				
				$timeout(function () {
					$mdDialog.hide(res.data);
				});

			}, function (response) {
				if (response.status > 0){
					
					var Msg = response.status + ': ' + response.data;
					var errTxt = '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>';

					$mdToast.show({
						template: errTxt,
						hideDelay: 5000
					});

				}
			}, function (evt) {
				Ctrl.Progress = parseInt(100.0 * evt.loaded / evt.total);
			});

		}
	}

]);
angular.module('ImportCtrl', [])
.controller('ImportCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', '$sce', 'Upload', 'Config',
	function($scope, $rootScope, $http, $mdDialog, $sce, Upload, Config) {

		console.info('ImportCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		Ctrl.filterAccion = '';
		Ctrl.inArray = Rs.inArray;

		Ctrl.Config = {
			Titulo: 'Importar', TituloIcono: 'fa-upload', 
			Paso: 1,
			Pasos: [ '',
				'Subir Plantilla',
				'Verificar Datos',
				'Importando',
				'Finalizado'
			],
			PlantillaUrl: false,
			PlantillaMsg: 'Descarge la plantilla y diligenciela con sus datos luego puede cargarla en esta pantalla.',
			PlantillaMsg2: '',
			PlantillaDown: [ 'fa-download' ],
			UploadUrl: 'api/Archivos/upload',
			SyncUrl: '',
			UploadData: {},
			Campos: [],
			FilaInicial: 2,
			ImportAcciones: {
				Crear:      { cant: 0, icono: 'fa-plus', clase: 'bg-lightgreen' },
				Actualizar: { cant: 0, icono: 'fa-sync-alt', clase: 'bg-yellow' },
				Eliminar:   { cant: 0, icono: 'fa-trash', clase: 'bg-lightred' },
				Errores:    { cant: 0, icono: 'fa-exclamation-triangle', clase: 'bg-lightpurple' }
			},
			testUpload: false,
		};
		
		angular.extend(Ctrl.Config, Config);

		Ctrl.DownloadPlantilla = function(){
			$http.get(Ctrl.Config.PlantillaUrl, { responseType: 'arraybuffer' }).then(function(r) {
        		var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
		        var filename = Ctrl.Config.PlantillaUrl.split('/').pop();
		        saveAs(blob, filename);
        	});
		};


		Ctrl.UploadTemplate = function(file, invalidfile){
			if(file) {
	            Upload.upload({
					url: Ctrl.Config.UploadUrl,
					method: 'POST',
					file: file,
					data: {
						Data:   Ctrl.Config.UploadData,
						Campos: Ctrl.Config.Campos,
						FilaInicial: Ctrl.Config.FilaInicial
					}
				}).then(function(r){

					Ctrl.ImportData = r.data;
					Ctrl.VerifyData();
					/*if(r.status == 200){
						
					}else{
						Ctrl.Config.Paso = 6;
					};*/
				});
			};
		};

		Ctrl.testUpload = () => {
			$http.post(Ctrl.Config.UploadUrl, {
				Data:   Ctrl.Config.UploadData,
				Campos: Ctrl.Config.Campos,
				FilaInicial: Ctrl.Config.FilaInicial
			}).then(r => {
				Ctrl.ImportData = r.data;
				Ctrl.VerifyData();
			});
		}


		CountAcciones = () => {
			angular.forEach(Ctrl.Config.ImportAcciones, (A) => {
				A.cant = 0;
			});

			angular.forEach(Ctrl.ImportData, (Row) => {
				Ctrl.Config.ImportAcciones[Row._import_action].cant ++;
			});

			//Ctrl.doSync(); //FIX
		};

		Ctrl.VerifyData = function(){
			

			if(Ctrl.ImportData.length > 0){
				Ctrl.Config.Paso = 2;
				CountAcciones();
			}else{
				Ctrl.finishSync('No se encontraron cambios', 'Alert');
			};

		}

		Ctrl.viewAcciones = (kA) => {
			if(Ctrl.filterAccion == kA) return Ctrl.filterAccion = '';
			Ctrl.filterAccion = kA;
		}

		//Ctrl.VerifyData();

		Ctrl.doSync = () => {
			Ctrl.Config.Paso = 3;
			$http.post(Ctrl.Config.SyncUrl, { ImportData: Ctrl.ImportData, Campos: Ctrl.Config.Campos }).then((r) => {
				Ctrl.finishSync('Sincronización terminada exitosamente', 'Ok');
			});
		}

		Ctrl.finishSync = (Msg, Status) => {
			Ctrl.Config.Paso = 4;
			Ctrl.FinishMsg = Msg;
			Ctrl.FinishStatus = Status;
		}

		Ctrl.finishDiag = () => {
			$mdDialog.hide();
		}

		Ctrl.DownloadErrors = function(){
			var Headers = [ 'Fila', 'Error' ];
			var e = {
        		filename: 'Errores_Importacion',
        		ext: 'xls',
        		sheets: [
        			{
						name: 'Errores',
						headers: Headers,
						rows: Ctrl.Errores,
					}
        		]
			};
			Rs.DownloadExcel(e);
		};

		if(Ctrl.Config.testUpload) Ctrl.testUpload(); //FIX

	}
]);
angular.module('ListSelectorCtrl', [])
.controller('ListSelectorCtrl', ['$scope', '$rootScope', '$http', '$mdDialog', 'List', 'Config',
	function($scope, $rootScope, $http, $mdDialog, List, Config) {

		//console.info('ListSelectorCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.Config = Config;
		Ctrl.Searching = false;

		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

		Ctrl.getData = function(){
			Ctrl.Searching = true;
			//Traer los datos del servidor
			$http({
				method: Ctrl.Config.remoteMethod,
				url: Ctrl.Config.remoteUrl,
				data: Ctrl.Config.remoteData,
			}).then(function(r){
				Ctrl.Searching = false;
				Ctrl.List = r.data;
			}, function(){
				Ctrl.Searching = false;
			});
		};

		//Si pasan la lista usarla
		if(List !== null){
			Ctrl.List = List;
		}else if(Ctrl.Config.remoteUrl){
			Ctrl.getData();
		};

		Ctrl.changeSearch = function(){

			if(Ctrl.Config.remoteQuery){
				if(Ctrl.Searching) return false;
				Ctrl.Config.remoteData.filter = Ctrl.Search;
				Ctrl.getData();
			}else{
				Ctrl.SearchFilter = Ctrl.Search;
			}
		}

		Ctrl.Resp = function(Row){
			$mdDialog.hide(Row);
		}


	}
]);
angular.module('RelsManagerCtrl', [])
.controller('RelsManagerCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Config', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Config) {

		console.info('RelsManagerCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }
		
		Ctrl.Config = {
			Titulo: 'Gestionar Relaciones',
			Theme: 'Snow_White', 
		};
		
		angular.extend(Ctrl.Config, Config);

	}
]);
angular.module('Estadisticas__Chart_BarCtrl', [])
.controller('Estadisticas__Chart_BarCtrl', ['$scope', '$rootScope', '$http', 
	function ($scope, $rootScope, $http) {

		//console.info('-> Estadisticas -> Chart -> Bar');

		var Ctrl = $scope;
		var Rs = $rootScope;
        var Prnt = Ctrl.$parent;

		Ctrl.Init = function(k) {
			Ctrl.S = Prnt.RepSel.sections[k];
		}

		Ctrl.options = {
            chart: {
                type: 'multiBarHorizontalChart',
                margin: { top: 0, right: 30, bottom: 30, left: 280 },
                height: 360,
                stacked: false,
                x: function(d){ return d[0]; },
                y: function(d){ return d[1]; },
                groupSpacing: 0.2,
                showControls: false,
                showValues: true,
                valueFormat: function(d){ return Prnt.Format(d, Ctrl.S.L.chart.yAxisFormat); },
                yAxis: {
                    tickFormat: function(d){ return Prnt.Format(d, Ctrl.S.L.chart.yAxisFormat); }
                },
                useInteractiveGuideline: false,
                noData: 'Sin Datos',
            },
        };

        angular.extend(Ctrl.options.chart, Ctrl.S.L.chart);

        Ctrl.Download = function(){
            
            var Headers = [''];
            var Rows = [];
            var L = Ctrl.S.L;
            L.Ext = 'xls';

            angular.forEach(L.data, function(serie) {
                this.push(serie.key);
            }, Headers);

            angular.forEach(L.data[0].values, function(val) {
                this.push([val[0]]);
            }, Rows);

            angular.forEach(L.data, function(serie, ks) {
                angular.forEach(serie.values, function(val, k) {
                    Rows[k][(ks+1)] = val[1];
                });
            });

            var file = L.Titulo + '.' + L.Ext;
            var Excel = {
                filename: L.Titulo,
                ext: L.Ext,
                sheets: [
                    {
                        headers: Headers,
                        rows: Rows,
                    }
                ]
            }

            $http.post('/api/main/hacer-excel', {E: Excel}, { responseType: 'arraybuffer' }).then(function(r) {
                var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
                saveAs(blob, file);
            });
        }
	}

]);
angular.module('Estadisticas__Chart_ColCtrl', [])
.controller('Estadisticas__Chart_ColCtrl', ['$scope', '$rootScope', '$http', 
	function ($scope, $rootScope, $http) {

		console.info('-> Estadisticas -> Chart -> Col');

		var Ctrl = $scope;
		var Rs = $rootScope;
		var Prnt = Ctrl.$parent;

		Ctrl.Init = function(k) {
			Ctrl.S = Prnt.RepSel.sections[k];
		}

		Ctrl.options = {
			chart: {
				type: 'multiBarChart',
				margin: { top: 0, right: 20, bottom: 65, left: 80 },
				height: 360,
				stacked: false,
				x: function(d){ return d[0]; },
				y: function(d){ return d[1]; },
				groupSpacing: 0.2,
				showControls: false,
				xAxis: {
					tickFormat: function(d) { return Prnt.Format(d, Ctrl.S.L.chart.xAxisFormat) },
					rotateLabels: 0,
					showMaxMin: true
				},
				yAxis: {
					tickFormat: function(d){ return Prnt.Format(d, Ctrl.S.L.chart.yAxisFormat); }
				},
				yAxis2: {
					tickFormat: function(d){ return Prnt.Format(d, Ctrl.S.L.chart.yAxisFormat); }
				},
				useInteractiveGuideline: false,
				focusEnable: true,
				interactiveLayer: {
					tooltip: {
						enabled: true,
						headerFormatter: function(d) { return d; }
					}
				},
				noData: 'Sin Datos',
			},
		};

		angular.extend(Ctrl.options.chart, Ctrl.S.L.chart);

		Ctrl.Download = function(){
			
			var Headers = [''];
			var Rows = [];
			var L = Ctrl.S.L;
			L.Ext = 'xls';

			angular.forEach(L.data, function(serie) {
				this.push(serie.key);
			}, Headers);

			angular.forEach(L.data[0].values, function(val) {
				this.push([val[0]]);
			}, Rows);

			angular.forEach(L.data, function(serie, ks) {
				angular.forEach(serie.values, function(val, k) {
					Rows[k][(ks+1)] = val[1];
				});
			});

			var file = L.Titulo + '.' + L.Ext;
			var Excel = {
				filename: L.Titulo,
				ext: L.Ext,
				sheets: [
					{
						headers: Headers,
						rows: Rows,
					}
				]
			}

			$http.post('/api/main/hacer-excel', {E: Excel}, { responseType: 'arraybuffer' }).then(function(r) {
				 var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
				 saveAs(blob, file);
			});
		}
	}

]);
angular.module('Estadisticas__Chart_PieCtrl', [])
.controller('Estadisticas__Chart_PieCtrl', ['$scope', '$rootScope', '$http', 
	function ($scope, $rootScope, $http) {

		//console.info('-> Estadisticas -> Chart -> Pie');

		var Ctrl = $scope;
		var Rs = $rootScope;
        var Prnt = Ctrl.$parent;

		Ctrl.Init = function(k) {
			Ctrl.S = Prnt.RepSel.sections[k];
		}

		Ctrl.options = {
            chart: {
                type: 'pieChart',
                x: function(d){ return d.key;   },
                y: function(d){ return d.value; },
                color: function(d){ return d.color },
                tooltip: {
                    valueFormatter: function(d) { return Prnt.Format(d, Ctrl.S.L.chart.yAxisFormat); },
                },
                height: 360,
                showLabels: true,
                duration: 500,
                labelThreshold: 0.01,
                labelSunbeamLayout: true,
                noData: 'Sin Datos',
            },
        };

        angular.extend(Ctrl.options.chart, Ctrl.S.L.chart);

        Ctrl.Download = function(){
            
            var Headers = ['Categoria', 'Valor'];
            var Rows = [];
            var L = Ctrl.S.L;
            L.Ext = 'xls';

            angular.forEach(L.data, function(serie) {
                this.push([ serie.key, serie.value ]);
            }, Rows);

            //console.info(L, Headers, Rows);
            //return false;

            var file = L.Titulo + '.' + L.Ext;
            var Excel = {
                filename: L.Titulo,
                ext: L.Ext,
                sheets: [
                    {
                        headers: Headers,
                        rows: Rows,
                    }
                ]
            }

            $http.post('/api/main/hacer-excel', {E: Excel}, { responseType: 'arraybuffer' }).then(function(r) {
                var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
                saveAs(blob, file);
            });
        }
	}

]);
angular.module('Estadisticas__Data_RemarkCtrl', [])
.controller('Estadisticas__Data_RemarkCtrl', ['$scope', '$rootScope', '$http', 
	function ($scope, $rootScope, $http) {

		//console.info('-> Estadisticas -> Data -> Remark');

		var Ctrl = $scope;
		var Rs = $rootScope;
        var Prnt = Ctrl.$parent;

		Ctrl.Init = function(k) {
			Ctrl.S = Prnt.RepSel.sections[k];
		}

        Ctrl.Download = function(){
            
            var Headers = ['Dato', 'Valor'];
            var Rows = [];
            var L = Ctrl.S.L;
            L.Ext = 'xls';

            angular.forEach(L.data, function(serie) {
                this.push([ serie.key, serie.value ]);
            }, Rows);

            //console.info(L, Headers, Rows);
            //return false;

            var file = L.Titulo + '.' + L.Ext;
            var Excel = {
                filename: L.Titulo,
                ext: L.Ext,
                sheets: [
                    {
                        headers: Headers,
                        rows: Rows,
                    }
                ]
            }

            $http.post('/api/main/hacer-excel', {E: Excel}, { responseType: 'arraybuffer' }).then(function(r) {
                var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
                saveAs(blob, file);
            });
        }
	}

]);
angular.module('Estadisticas__Table_BasicCtrl', [])
.controller('Estadisticas__Table_BasicCtrl', ['$scope', '$rootScope', '$http',
	function ($scope, $rootScope, $http) {

		//console.info('-> Estadisticas -> Chart -> Pie');

		var Ctrl = $scope;
		var Rs = $rootScope;
        var Prnt = Ctrl.$parent;

		Ctrl.Init = function(k) {
			Ctrl.S = Prnt.RepSel.sections[k];
		}

		Ctrl.OrderBy = null;
        Ctrl.Filter = null;

        Ctrl.Download = function(){
        	//console.info(Ctrl.S);
        	var Data = Ctrl.S.L.data;
        	var file = Data.Filename + '.' + Data.Ext;
        	var Excel = {
        		filename: Data.Filename,
        		ext: Data.Ext,
        		sheets: [
        			{
        				name: Data.Filename,
        				headers: Data.Headers,
        				rows: Data.Rows,
        			}
        		]
        	}

        	$http.post('/api/main/hacer-excel', {E: Excel}, { responseType: 'arraybuffer' }).then(function(r) {
        		var blob = new Blob([r.data], { type: "application/vnd.ms-excel; charset=UTF-8" });
		        saveAs(blob, file);
        	});
        }
	}

]);
angular.module('Estadisticas__Table_WithSubtablesCtrl', [])
.controller('Estadisticas__Table_WithSubtablesCtrl', ['$scope', '$rootScope', '$mdDialog', '$http', 
	function ($scope, $rootScope, $mdDialog, $http) {

	//console.info('-> Estadisticas -> Chart -> Pie');

	var Ctrl = $scope;
	var Rs = $rootScope;
        var Prnt = Ctrl.$parent;

	Ctrl.Init = function(k) {
		Ctrl.S = Prnt.RepSel.sections[k];
	}

	Ctrl.OrderBy = null;
        Ctrl.Filter = null;

        Ctrl.GetUrl = function(B){
        	return (B.Action == 'Download') ? B.Url : null;
        }

        Ctrl.Download = function(){
        	//console.info(Ctrl.S);
        	var Data = Ctrl.S.L.data;
        	var file = Data.Filename + '.' + Data.Ext;
        	var Excel = {
        		filename: Data.Filename,
        		ext: Data.Ext,
        		sheets: [
        			{
        				name: Data.Filename,
        				headers: Data.Headers,
        				rows: Data.Rows,
        			}
        		]
        	}

                Rs.DownloadExcel(Excel);
        }

        Ctrl.Button = function(B, R, ev){
        	if(B.Action == 'Rep'){

        		var f = angular.extend({}, Prnt.RepSel.f, { selectedRow: R } );

        		$mdDialog.show({
					controller: 'Estadisticas_RepDialogCtrl',
					templateUrl: '/Frag/FondoRotatorio.Estadisticas_RepDialog',
					locals: { B: B, R: R, f: f },
					clickOutsideToClose: true,
					fullscreen: true,
					targetEvent: ev,
				});
        	}
        }
	}

]);
angular.module('Estadisticas_RepDialogCtrl', [])
.controller(   'Estadisticas_RepDialogCtrl', ['$scope', '$mdDialog', '$http', 'B', 'R', 'f',
	function ($scope, $mdDialog, $http, B, R, f) {

		var Ctrl = $scope;

		Ctrl.RepSel = {
			sections: [ B ],
		};
		Ctrl.R = R;

		Ctrl.Cancel = function(){
			$mdDialog.cancel();
		}
		Ctrl.RepSel.sections[0].Loaded = false;
		$http.post(Ctrl.RepSel.sections[0].Url, {f: f}).then(function(r){
			Ctrl.RepSel.sections[0].Loaded = true;
			Ctrl.RepSel.sections[0].L = r.data;
		});

	}

]);
angular.module('FondoRotatorio__Creditos_CreditoDialogCtrl', [])
.controller('FondoRotatorio__Creditos_CreditoDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Organizacion', 'CredSel', 'Asociado',
	function($scope, $rootScope, $http, $injector, $mdDialog, Organizacion, CredSel, Asociado) {

		console.info('FondoRotatorio__Creditos_CreditoDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Organizacion = Organizacion;
		Ctrl.CredSel = CredSel;
		Ctrl.Asociado = Asociado;
		
		Ctrl.Hoy = moment().format('YYYY-MM-DD HH:mm');
		Ctrl.MyUser = Rs.Usuario;
	
		Ctrl.Title = 'Imprimir Comprobante: Credito Cod. '+CredSel.id;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

	}
]);
angular.module('FondoRotatorio__Creditos_ReciboDialogCtrl', [])
.controller('FondoRotatorio__Creditos_ReciboDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Recibo', 'Organizacion', 'CredSel', 'Asociado',
	function($scope, $rootScope, $http, $injector, $mdDialog, Recibo, Organizacion, CredSel, Asociado) {

		console.info('FondoRotatorio__Creditos_ReciboDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Recibo = Recibo;
		Ctrl.Organizacion = Organizacion;
		Ctrl.CredSel = CredSel;
		Ctrl.Asociado = Asociado;
		Ctrl.MyUser = Rs.Usuario;

		Ctrl.Title = 'Imprimir Recibo No. '+Recibo.id;
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

	}
]);
angular.module('FondoRotatorio__EstadisticasCtrl', [])
.controller('FondoRotatorio__EstadisticasCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('FondoRotatorio__EstadisticasCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		$http.get('api/reps').then(function(r){
			Ctrl.Reps = r.data;
		});

		Ctrl.SelectRep = function() {
			$http.post('api/reps/get', { id: Ctrl.RepId.id }).then(function(r){
				var Rep = r.data;
				var filters = [];
				angular.forEach(Rep.filters, function(v) {
					this.push(Ctrl.PrepFilters(v));
				}, filters);
				Rep.filters = filters;
				Ctrl.RepSel = Rep;

				Ctrl.Load();
			});
		}

		Ctrl.PrepFilters = function(f){

			if(f.Type == 'Date'){
				if(f.Default !== null){
					f.Value = moment(f.Default, "YYYY-MM-DD").toDate();
				}else{
					var Pat = f.Pattern.split('_');
					var D = moment().add(Pat[0], Pat[1]);
					if(Pat[2] == 'S') D = D.startOf('month');
					if(Pat[2] == 'E') D = D.endOf('month'); 
					f.Value = D.toDate();
				}
			}else if(f.Type == 'Select'){
				f.Value = f.Default;
				f.Pattern = f.Pattern.split('|');
			}else if(f.Type == 'Number'){
				f.Value = parseInt(f.Default);
			}

			return f;
		}

		Ctrl.Load = function() {
			var Filters = {};
			angular.forEach(Ctrl.RepSel.filters, function(f) {
				var Val = f.Value;
				if(f.Type == 'Date') Val = moment(Val).format('YYYY-MM-DD');
				this[f.Name] = Val;
			}, Filters);

			Ctrl.RepSel.f = Filters;

			angular.forEach(Ctrl.RepSel.sections, function(s) {
				s.Loaded = false;
			});

			Ctrl.Loaded = 0;

			Ctrl.LoadSection(Filters);
		};

		Ctrl.LoadSection = function(Filters) {
			var S = Ctrl.RepSel.sections[Ctrl.Loaded];
			S.L = null;

			$http.post(S.Route, { f: Filters }).then(function(r){
				S.Loaded = true;
				S.L = r.data;

				Ctrl.Loaded++;
				if(Ctrl.Loaded <= (Ctrl.RepSel.sections.length - 1)) Ctrl.LoadSection(Filters);
			});
		}

		Ctrl.Format = function(v, pattern, extra) {
			switch (pattern) 
			{
				case "Money": return d3.format('$,')(v);
				case "Number": return d3.format(',')(v);
				case "Date_Full": d3.time.format('%x')(new Date(v*1000));
				default: return v;
			} 
		}

	}
]);
angular.module('FondoRotatorio_ConfiguracionCtrl', ['ngMaterial'])
.controller('FondoRotatorio_ConfiguracionCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$mdToast',
	function($scope, $rootScope, $http, $injector, $mdDialog, $mdToast) {

		console.info('FondoRotatorio_ConfiguracionCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.AsociadosNav = true;
		Ctrl.Asociado = null;

        Ctrl.organizacion_id = Rs.Usuario.organizacion_id;
		Ctrl.intereses = null;
	
		
		//Obtener Opciones
		Ctrl.getOpciones = () => {

			resultado = Rs.http('api/opciones/get-opciones', {organizacion_id : Ctrl.organizacion_id});
			resultado.then((r) => {
				//Ctrl.intereses_actuales = r;
				Ctrl.intereses = {
					interes: r.CREDITO_INTERES,
					interes3160: r.CREDITO_MORA_31_60,
					interes6190: r.CREDITO_MORA_61_90,
					interes91120: r.CREDITO_MORA_91_120,
					interesmas120: r.CREDITO_MORA_MAS_120,
					interesmenos30: r.CREDITO_MORA_MENOS_30,
				};
			});
			// resultado.then(function(r){
			// 	console.log(r.data);
			// });
		}

		Ctrl.getOpciones();


		Ctrl.actualizar = () => {
			$http.post('api/opciones/actualizar',{intereses : JSON.stringify(Ctrl.intereses), organizacion_id : Ctrl.organizacion_id})
			.then( (r) => {

				if(!r){
					Rs.showToast('Falló la actualización')
					return;
				}

				console.log(r)

			} );
		}

		

	}
]);
angular.module('FondoRotatorio_Creditos_PayDialogCtrl', [])
.controller('FondoRotatorio_Creditos_PayDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$mdToast', '$http', 'CredSel', 'Parent', 'CreditoSrv',
	function($scope, $rootScope, $http, $injector, $mdDialog, $mdToast, $http, CredSel, Parent, CreditoSrv) {

		var Ctrl = $scope;
		Ctrl.Parent = Parent;
		
		Ctrl.Cancel = function(){ $mdDialog.cancel(); }

		//Ctrl.ValorSaldo = Saldo.pendiente + Saldo.mora;
		Ctrl.Hoy = moment().toDate()

		Ctrl.Pago = {
			Fecha: angular.copy(Ctrl.Hoy),
			Valor: angular.copy(CredSel.total_pendiente),
			Medio: "Efectivo",
			NoConsignacion: null,
			SobranteOp: 'PagCuotas',
			AbonadoCapital: 0,
			Devolver: 0,
			Num_Pago_Elim: null,
		}

		//Colores
		Ctrl.Colors = {
	        'Pendiente' 	   : ['#a2a2a2'],
	        'Pagado'    	   : ['#00695c'],
	        'Pendiente Pago Parcial'   : ['#008E7D'],
	        'Mora'      	   : ['#ce0202'],
	        'Mora Pago Parcial': ['#D32F2F'],
	        'Anulado'		   : ['#a2a2a2'],
	    };

	    //Opciones con el sobrante
	    Ctrl.SobranteOps = {
	    	'PagCuotas' : 'Pago de Cuotas',
	    	'PagCapital' : 'Abonar a Capital',
	    };

	    Ctrl.Pagos = [];
	    Ctrl.CredSel = null;

		Ctrl.$watchGroup(['Pago.Fecha','Pago.Valor','Pago.SobranteOp'], function(){
			
			Ctrl.Pagos = [];
			Ctrl.CredSel = angular.copy(CredSel);
			Ctrl.Amortable = null;
			Ctrl.AmortableRes = null;
			Ctrl.Cuota = null;

			var c = Ctrl.CredSel;
			var p = Ctrl.Pago;

			//Calcular las moras de acuerdo a la fecha
			var FechaPago = moment(p.Fecha);
			var Disponible = angular.copy(p.Valor);
			var PendienteMora = 0;
			p.Devolver = 0;
			p.AbonadoCapital = 0;
			p.Num_Pago_Elim = null;

			angular.forEach(c.saldos, function(s){
				//console.log(s);

				s.dias_mora = FechaPago.diff(s.date, 'days');

				if(s.dias_mora < 1 && s.estado == 'Mora'){ //Cambiar a estado pendiente
					s.due = false;
					s.estado = 'Pendiente';
				}else if(s.dias_mora >= 0 && s.estado.substr(0,9) == 'Pendiente'){
					s.due = true;
					s.estado = 'Mora';
				}

				if(!s.due || s.pendiente == 0){
					s.dias_mora = null;
					s.mora = null;
				}else{

					//Calcular interés de mora
					var Interes = null;

						 if(s.dias_mora <= 30)                      { Interes = Parent.Vars?.CREDITO_MORA_MENOS_30 || 0; }
					else if(s.dias_mora >= 31 && s.dias_mora <=  60){ Interes = Parent.Vars?.CREDITO_MORA_31_60    || 0; }
					else if(s.dias_mora >= 61 && s.dias_mora <=  90){ Interes = Parent.Vars?.CREDITO_MORA_61_90    || 0; }
					else if(s.dias_mora >= 91 && s.dias_mora <= 120){ Interes = Parent.Vars?.CREDITO_MORA_91_120   || 0; }
					            		 else if(s.dias_mora >= 121){ Interes = Parent.Vars?.CREDITO_MORA_MAS_120  || 0; }

					Interes = Interes / 100;
					//console.log(Parent.Vars.CREDITO_MORA_MENOS_30, s, Interes);

					var ValMora = Math.ceil( s.pendiente * Interes );
					s.mora = ValMora - s.abonadomora;
	    			
	    			s.mora = s.mora < 0 ? 0 : s.mora;
	    			PendienteMora = PendienteMora + s.mora;
				}

				//Fin del primer foreach
			});

			//Ahora a gastar ese disponible pagando moras
			if(PendienteMora > 0){
				angular.forEach(c.saldos, function(s){
					if(s.mora > 0  && Disponible > 0){
						if(s.mora > Disponible){ //alcanza para pago parcial
							Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Parcial', Paga: 'Mora', Valor: Disponible, NoCuota: s.num_pago });
							s.mora = s.mora - Disponible; 
							Disponible = 0;
						}else{ //alcanza para pagar la mora
							Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Total', Paga: 'Mora', Valor: s.mora, NoCuota: s.num_pago });
							Disponible = Disponible - s.mora;
							s.mora = 0;
						}
					}
				});
			}

			//Ahora a pagar pendietes
			angular.forEach(c.saldos, function(s){
				if(s.due && s.pendiente > 0 && Disponible > 0){
					if(s.pendiente > Disponible){ //alcanza para pago parcial
						Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Parcial', Paga: 'Cuota', Valor: Disponible, NoCuota: s.num_pago });
						s.pendiente = s.pendiente - Disponible; 
						Disponible = 0;
					}else{ //alcanza para pagar la pendiente
						Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Total', Paga: 'Cuota', Valor: s.pendiente, NoCuota: s.num_pago });
						Disponible = Disponible - s.pendiente;
						s.pendiente = 0;
					}
				}
			});

			//Si aun queda dinero recalcular crédito definir q hacer con el sobrante
			if(Disponible > 0){

				if(p.SobranteOp == 'Return'){

					var Deuda = 0;
					angular.forEach(c.saldos, function(s, k){
						if(s.estado.substr(0,9) == 'Pendiente'){
							Deuda = Deuda + s.pendiente;
						}
					});
					Ctrl.Deuda = Deuda;

				}else if(p.SobranteOp == 'PagCuotas'){
					var Deuda = 0;
					angular.forEach(c.saldos, function(s, k){
						if(s.estado.substr(0,9) == 'Pendiente' && Disponible > 0){
							
							if(s.pendiente > Disponible){ //alcanza para pago parcial
								Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Parcial', Paga: 'Cuota', Valor: Disponible, NoCuota: s.num_pago });
								s.pendiente = s.pendiente - Disponible; 
								s.estado = 'Pendiente Pago Parcial';
								Disponible = 0;
								Deuda = Deuda + s.pendiente;
							}else{ //alcanza para pagar la pendiente
								Ctrl.Pagos.push({ credito_id: CredSel.id, saldo_id: s.id, Tipo: 'Total', Paga: 'Cuota', Valor: s.pendiente, NoCuota: s.num_pago });
								Disponible = Disponible - s.pendiente;
								s.estado = 'Pagado';
								s.pendiente = 0;
							}

						}
					});
					Ctrl.Deuda = Deuda;

				}else if(p.SobranteOp == 'PagCapital'){
					
					var PendienteIndex = null;
					angular.forEach(c.saldos, function(s, k){
						if(s.estado == 'Pendiente'){
							if(PendienteIndex == null) PendienteIndex = k;
							s.estado = 'Anulado';
						}
					});

					if(PendienteIndex !== null){
						var Deuda = parseInt(c.saldos[PendienteIndex].deuda) + parseInt(c.saldos[PendienteIndex].capital);
						var Num_Pago = parseInt(c.saldos[PendienteIndex].num_pago);
						var CuotasRest = c.saldos.length - Num_Pago + 1;

						p.Num_Pago_Elim = Num_Pago;

						if(Disponible < Deuda){ //Pago parcial de la deuda
							Ctrl.Pagos.push({ credito_id: CredSel.id, Tipo: 'Parcial', Paga: 'Capital', Valor: Disponible});
							Deuda = Deuda - Disponible;
							p.AbonadoCapital = Disponible;
							Disponible = 0;
						}else{ //Pago total de la deuda
							Ctrl.Pagos.push({ credito_id: CredSel.id, Tipo: 'Total', Paga: 'Capital', Valor: Deuda});
							Disponible = Disponible - Deuda;
							p.AbonadoCapital = Deuda;
							Deuda = 0;
						}

						if(Deuda > 0){ //Recalcular deuda

							console.log('Recalcular Deuda', Deuda, c, c.saldos[PendienteIndex]);

							var Cuotas = CreditoSrv.CalcCuotas(Deuda, (c.interes/100), CreditoSrv.ScalesRef[c.pagos], CuotasRest, 0, p.Fecha, Num_Pago);

							for (var i = PendienteIndex; i < c.saldos.length; i++) {
								Cuotas.Amortable[(i - PendienteIndex)].Fecha = moment(c.saldos[i].fecha).format("YYYY-MM-DD");
							}
							//console.log(Cuotas);
							Ctrl.Amortable = Cuotas.Amortable;
							Ctrl.AmortableRes = Cuotas.AmortableRes;
							Ctrl.Cuota = Cuotas.Cuota;
						}
					}

					Ctrl.Deuda = Deuda;
				}
			}

			//Obtener los nuevos estados
			angular.forEach(c.saldos, function(s){
				if(s.due && s.mora == 0 && s.pendiente == 0){
					s.estado = 'Pagado';	
				}
				s.estado_color = Ctrl.Colors[s.estado][0];
			});

			if(Disponible > 0) p.Devolver = Disponible;

			//Fix el cliente no desea que se tengan valores devueltos
			if(p.Devolver > 0){
				p.Valor = p.Valor - p.Devolver;
			}

			//console.log(PendienteMora, Pendiente, PendienteMora+Pendiente);
		});






		Ctrl.ConfirmAction = function(Msg, Payload){
			$mdToast.showSimple(Msg);
			$mdDialog.hide(Payload);
		}

		Ctrl.SavePago = function(){
			
			if(Ctrl.Pago.Valor == 0){ return false; }

			$http.post('/api/creditos/pay', { 
				CredSel: Ctrl.CredSel,
				Pago: Ctrl.Pago, 
				Pagos: Ctrl.Pagos,
				Amortable: Ctrl.Amortable,
			}).then(function(res){
				//console.log(res.data);
				Ctrl.ConfirmAction('Pago Realizado', res.data);
			});
		}

	}
]);
angular.module('FondoRotatorio_CreditosCtrl', [])
.controller('FondoRotatorio_CreditosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$mdToast',
	function($scope, $rootScope, $http, $injector, $mdDialog, $mdToast) {

		console.info('FondoRotatorio_CreditosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
		Ctrl.AsociadosNav = true;
		Ctrl.Asociado = null;
	
		Ctrl.buscarAsociados = (query) => {
			// console.log(Rs.Usuario.perfil_id);
            if ( Rs.Usuario.perfil_id == 2 ) {
                return Rs.http('api/usuario/buscar-usuario-organizacion', {
                    'query': query,
                    'organizacion': Rs.Usuario.organizacion_id
                });
            } else {
                return Rs.http('api/usuario/buscar-usuario', { 'query': query });
            }
		};

		Ctrl.selectAsociado = (Asociado) => {
			Ctrl.Asociado = Asociado;
			Ctrl.LoadCreditos();
		}

		Ctrl.nuevoCredito = function(){
			$mdDialog.show({
				controller: 'FondoRotatorio_NuevoCreditoDiagCtrl',
				templateUrl: '/Frag/FondoRotatorio.Creditos_NuevoCreditoDiag',
				clickOutsideToClose: false,
				locals: { Asociado: Ctrl.Asociado, myUser: Rs.Usuario, Parent: Ctrl, Simulate: false },
				fullscreen: false,
			}).then(function(Cred) { 
				//Ctrl.ViewCredit(Cred);
				Ctrl.LoadCreditos();
			});
		}


		Ctrl.LoadCreditos = function(){
			if(!Ctrl.Asociado) return;
			$http.post('/api/creditos/get', { asociado_id: Ctrl.Asociado.id }).then(function(res){
				Ctrl.Creditos = res.data;
				Ctrl.CredSel = null;
				//Ctrl.ViewCredit(Ctrl.Creditos[0]); //FIX
			});
		}

		Ctrl.ViewCredit = function(Cred){
			
			if (!angular.isDefined(Cred)) return false;
			$http.get('/api/creditos/?id='+Cred.id).then(function(res){
				Ctrl.CredSel = res.data;
				//Ctrl.NewAbono(); //FIX
				//Ctrl.PrintCredit(); //FIX
				//Ctrl.PrintRecibo(null, Ctrl.CredSel.recibos[0]); //FIX
			});

		}

		Ctrl.PrintCredit = function(ev){

			var Organizacion = Rs.Usuario.organizaciones.find(e => e.id == Rs.Usuario.organizacion_id);

			$mdDialog.show({
				controller: 'FondoRotatorio__Creditos_CreditoDialogCtrl',
				templateUrl: '/Frag/FondoRotatorio.Creditos_CreditoDialog',
				clickOutsideToClose: true,
				locals: { Organizacion, CredSel: Ctrl.CredSel, Asociado: Ctrl.Asociado },
				fullscreen: true,
				targetEvent: ev,
			});
		}

		function s2ab(s) {
            var buf = new ArrayBuffer(s.length);
            var view = new Uint8Array(buf);
            for (var i=0; i<s.length; i++) view[i] = s.charCodeAt(i) & 0xFF;
            return buf;        
        }

        function excelColName(n) {
			var ordA = 'a'.charCodeAt(0);
			var ordZ = 'z'.charCodeAt(0);
			var len = ordZ - ordA + 1;

			var s = "";
			while(n >= 0) {
				s = String.fromCharCode(n % len + ordA).toUpperCase() + s;
				n = Math.floor(n / len) - 1;
			}
			return s;
		}

		Ctrl.DownloadCreditsList = function() {
			$http.post('/api/creditos/rep-det-creditos', { f: { Asociado_id: Ctrl.Asociado.id, orderBy: 'id', orderSort: 'DESC' } }).then(function(r) {

				var wb = XLSX.utils.book_new();
				var Titulo = 'Creditos de '+Ctrl.Asociado.nombre;
		        wb.Props = {
		            Title: Titulo,
		            CreatedDate: new Date()
		        };

		        var SheetData = [ [] ];
		        var ColumnsNo = 0;
		        angular.forEach(r.data.data.Headers, C => {
					SheetData[0].push(C);
					ColumnsNo++;
		        });

		        r.data.data.Rows.forEach((Row) => {
		        	var RowData = [];
		        	angular.forEach(r.data.data.Headers, (C,kC) => {
		        		RowData.push(Row[kC]);
			        });
			        SheetData.push(RowData);
		        });

		        console.log(SheetData);

				var ws = XLSX.utils.aoa_to_sheet(SheetData);
				var last_cell = excelColName(ColumnsNo - 1) + (r.data.data.Rows.length + 1);
				ws['!autofilter'] = { ref: ('A1:'+last_cell) };
		        
		        XLSX.utils.book_append_sheet(wb, ws, "Creditos");
		        var wbout = XLSX.write(wb, {bookType:'xlsx',  type: 'binary'});
		     
		        saveAs(new Blob([s2ab(wbout)],{type:"application/octet-stream"}), Titulo + '.xlsx');
			});
		}

		Ctrl.NewAbono = function(ev){
			$mdDialog.show({
				controller: 'FondoRotatorio_Creditos_PayDialogCtrl',
				templateUrl: '/Frag/FondoRotatorio.Creditos_PayDialog',
				clickOutsideToClose: false,
				locals: { CredSel: Ctrl.CredSel, Parent: Ctrl },
				fullscreen: true,
				targetEvent: ev,
			}).then(function() { 
				Ctrl.ViewCredit(Ctrl.CredSel);
			});
		}

		Ctrl.PrintRecibo = function(ev, Recibo){
			var Organizacion = Rs.Usuario.organizaciones.find(e => e.id == Rs.Usuario.organizacion_id);

			$mdDialog.show({
				controller: 'FondoRotatorio__Creditos_ReciboDialogCtrl',
				templateUrl: '/Frag/FondoRotatorio.Creditos_ReciboDialog',
				clickOutsideToClose: false,
				locals: { Recibo: Recibo, Organizacion, CredSel: Ctrl.CredSel, Asociado: Ctrl.Asociado },
				fullscreen: true,
				targetEvent: ev,
			});
		}

		Ctrl.DeleteCredit = function(ev) {
			var confirm = $mdDialog.confirm()
							.title('BORRAR el crédito Cod. '+Ctrl.CredSel.id+'?')
							.textContent('ESTA ACCIÓN NO SE PUEDE DESHACER.')
							.ariaLabel('Borrar')
							.targetEvent(ev)
							.theme('Danger')
							.ok('BORRAR CRÉDITO')
							.cancel('Cancelar');
			$mdDialog.show(confirm).then(function() {
				
				$http.post('/api/creditos/delete', { id: Ctrl.CredSel.id }).then(function(res){
					$mdToast.showSimple('Borrado');
					Ctrl.CredSel = null;
					Ctrl.LoadCreditos();
				});

			});
		}

		Ctrl.DeleteRecibo = function(ev, Recibo) {
			var confirm = $mdDialog.confirm()
							.title('BORRAR el Recibo Cod. '+Recibo.id+'?')
							.textContent('ESTA ACCIÓN NO SE PUEDE DESHACER.')
							.ariaLabel('Borrar')
							.targetEvent(ev)
							.theme('Danger')
							.ok('BORRAR RECIBO')
							.cancel('Cancelar');
			$mdDialog.show(confirm).then(function() {
				
				$http.post('/api/creditos/delete-recibo', { id: Recibo.id }).then(function(res){
					$mdToast.showSimple('Borrado');
					Ctrl.ViewCredit(Ctrl.CredSel);
				});

			});
		}

		//Obtener Opciones
		Ctrl.getOpciones = () => {
			return Rs.http('api/opciones/get-opciones', {organizacion_id :  Rs.Usuario.organizacion_id}, Ctrl, 'Vars');
		}

		Ctrl.getOpciones();

		//Testing
		/*Rs.http('api/usuario/buscar-usuario', { 'query': '1093' }).then(r => {
			Ctrl.Asociado =  r[0];
			Ctrl.LoadCreditos();
			//Ctrl.nuevoCredito();
		});*/

	}
]);
angular.module('FondoRotatorio_ListadoCtrl', [])
.controller('FondoRotatorio_ListadoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		console.info('FondoRotatorio_ListadoCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.CreditosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/creditos/crud',
			query_with: ['afiliado', 'afiliado.fincas', 'usuario']
		});

		Ctrl.getListado = () => {
			Ctrl.CreditosCRUD
				.setScope('organizacion', Rs.Usuario.organizacion_id)
				.get().then(() => {
				
			});
		};

		Ctrl.printCredit = function(C, ev){
			var Organizacion;

			$http.post('/api/organizaciones/datos-organizacion',{organizacion_id : Rs.Usuario.organizacion_id})
				.then( (r) =>{
					Organizacion = r.data;
					console.log("datos orga", Organizacion);
				});
			
			

			//var Organizacion = Rs.Usuario.organizaciones.find(e => e.id == Rs.Usuario.organizacion_id);

			$http.get('/api/creditos/?id='+C.id).then(function(res){
				$mdDialog.show({
					controller: 'FondoRotatorio__Creditos_CreditoDialogCtrl',
					templateUrl: '/Frag/FondoRotatorio.Creditos_CreditoDialog',
					clickOutsideToClose: true,
					locals: { Organizacion, CredSel: res.data, Asociado: C.afiliado },
					fullscreen: true,
					targetEvent: ev,
				});
			});


		}

		Ctrl.getListado();

	}
]);
angular.module('FondoRotatorio_MisCreditosCtrl', [])
.controller('FondoRotatorio_MisCreditosCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {

		//console.info('FondoRotatorio_MisCreditosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.CreditosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/creditos/crud',
		});

		Ctrl.getListado = () => {
			Ctrl.CreditosCRUD
				.setScope('mios', null)
				.get().then(() => {
				
			});
		};

		Ctrl.printCredit = function(C, ev){

			var Organizacion = Rs.Usuario.organizaciones.find(e => e.id == Rs.Usuario.organizacion_id);
			console.log(Rs.Usuario);
			$http.get('/api/creditos/?id='+C.id).then(function(res){
				$mdDialog.show({
					controller: 'FondoRotatorio__Creditos_CreditoDialogCtrl',
					templateUrl: '/Frag/FondoRotatorio.Creditos_CreditoDialog',
					clickOutsideToClose: true,
					locals: { Organizacion, CredSel: res.data, Asociado: Rs.Usuario },
					fullscreen: true,
					targetEvent: ev,
				});
			});


		}

		Ctrl.getListado();

	}
]);
angular.module('FondoRotatorio_NuevoCreditoDiagCtrl', [])
.controller('FondoRotatorio_NuevoCreditoDiagCtrl', ['$scope', '$rootScope', '$injector', '$mdDialog', '$mdToast', '$http', 'CreditoSrv', 'Asociado', 'myUser', 'Parent', 'Simulate',
	function($scope, $rootScope, $injector, $mdDialog, $mdToast, $http, CreditoSrv, Asociado, myUser, Parent, Simulate) {

		console.info('FondoRotatorio_NuevoCreditoDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;
	
		Ctrl.Theme = 'Snow_White';
		Ctrl.Title = '';
		Ctrl.Parent = Parent;
		Ctrl.Simulate = Simulate;
		Ctrl.Hoy = moment().format('L');
		Ctrl.myUser = myUser;

		Ctrl.Cancelar = function(){ $mdDialog.cancel(); }

		Ctrl.Scales = CreditoSrv.Scales;
		Ctrl.Lineas = Parent.Vars.LINEAS_CREDITO;
		Ctrl.changeInterest = Boolean(Parent.Vars.CREDITO_CAMBIAR_INTERES);
		
		Ctrl.Credit = {
			Linea: Ctrl.Lineas[0],
			Monto: 1000000,
			Periodos: 6,
			Periodos_Gracia: 0,
			Interes: angular.copy(Parent.Vars.CREDITO_INTERES) / 100,
			Cada: Ctrl.Scales['1_M'],
			Cuota: 0,
			Primer_Pago: moment().toDate(),

		};
		Ctrl.Amortable = null;
		Ctrl.AmortableRes = null;
		Ctrl.Title = 'Nuevo Crédito';

		if(Simulate) Ctrl.Title = 'Simular Crédito';

		Ctrl.$watchCollection('Credit', function(c, o){

			Ctrl.Amortable = null;
			Ctrl.AmortableRes = null;

			if(c.Monto > 0 && c.Periodos > 0 && c.Interes > 0){
				var Cuotas = CreditoSrv.CalcCuotas(c.Monto, c.Interes, c.Cada.key, c.Periodos, c.Periodos_Gracia, c.Primer_Pago, 1);

				Ctrl.Amortable = Cuotas.Amortable;
				Ctrl.AmortableRes = Cuotas.AmortableRes;
				c.Cuota = Cuotas.Cuota;
			}

		 });

		Ctrl.ConfirmAction = function(Msg, data){
			console.info(data);
			$mdToast.showSimple(Msg);
			$mdDialog.hide(data);
		}

		Ctrl.SaveCredit = function(){
			if(Simulate) return false;

			let Credit = angular.copy(Ctrl.Credit);

			Credit.Fecha = moment(Credit.Primer_Pago).format('YYYY-MM-DD');

			var Daten = {
				Credit: Credit,
				Amortable: Ctrl.Amortable,
				AmortableRes: Ctrl.AmortableRes,
				Asociado: Asociado,
				User: myUser
			};

			$http.post('/api/creditos/add', Daten).then(function(res){
				//Ctrl.Creditos = res.data;
				// console.log('CredAdded', res.data);
				Ctrl.ConfirmAction('Crédito Creado', res.data);
				//Ctrl.ViewCredit(Ctrl.Creditos[0]); //REMOVE
			});

			
		}

	}
]);
//INICIO DEV ANGÉLICA
angular.module('ArticulomuroEditDialogCtrl', [])
.controller('ArticulomuroEditDialogCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Upload', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Upload) {

		console.info('ArticulomuroEditDialogCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		// debugger;
		Ctrl.Cancel = $mdDialog.cancel;
		Ctrl.contenido = '';
		Ctrl.url = '';
		Ctrl.Hide = $mdDialog.hide;

		Ctrl.organizacionesmuroseccionesCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/organizacionesmurosecciones/organizacionesmurosecciones',
			limit: 1000,
			add_append: 'refresh',
		});

/*
		if(Organizacionesmurosecciones !== undefined){
			Ctrl.Organizacionesmurosecciones = angular.copy(Organizacionesmurosecciones);
			console.log(Organizacionesmurosecciones);			
		}
*/

		Ctrl.guardarOrganizacionesmuro = () => {
			Ctrl.$parent.OrganizacionesmuroseccionesCRUD.update(Ctrl.Organizacionesmurosecciones).then(() => {
				var SeccionesCambiadas = Ctrl.SeccionesCRUD.rows.filter(s => s.changed);
				if(SeccionesCambiadas.length > 0){
					Ctrl.SeccionesCRUD.updateMultiple(SeccionesCambiadas).then(() => {
					});
				}
			});
		}

		//INICIO DEV ANGÉLICA --> Se crea sección para las publicaciones, se envía ruta = Path llamando a Upload

		Ctrl.crearSeccion = async () => {
			const ruta = 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg';

			Ctrl.organizacionesmuroseccionesCRUD.add({
				organizacion_id: Rs.Usuario.organizacion_id,
				usuario_id: Rs.Usuario.id,
				contenido: Ctrl.contenido,
				ruta: Ctrl.file?ruta:'',
				url: Ctrl.url
			}).then(function (resp) {
				//console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
				if(Ctrl.file){ //si no hay archivo que no envíe la imagen
					debugger;
					Upload.upload({
						url: 'api/main/upload-imagen',
						data: {file: Ctrl.file,
							Path: ruta,
							Alto: 300, 
							Ancho: 560, 
							Quality: 90
						}
					}).then(function (resp) {
						//console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
						Ctrl.Hide();
	
					}, function (resp) {
						console.log('Error status: ' + resp.status);
						return;
					});
				}else{
					Ctrl.Hide();
				}
			}, function (resp) {
				console.log('Error status: ' + resp.status);
				return;
			});
			//Aqui falta controlar el then y la excepción
			
			
		}

		Ctrl.eliminarSeccion = (S) => {
			Rs.confirmDelete({
				Title: '¿Eliminar la Sección?',
			}).then(R => {
				if(!R) return;
				Ctrl.SeccionesCRUD.delete(S);
			});
		}
		//FIN DEV ANGÉLICA

		//INICIO DEV ANGÉLICA Carga imagen al servidor
		Ctrl.subirImagen = ($file) => {
			if(!$file) return;

			//Capturar imagen al dar clic en el boton publicar
			Ctrl.file = $file; //capturo la variable
/*
			Upload.upload({
				url: 'api/main/upload-imagen',
				data: {file: $file,
					Path: 'files/muro_media/' + Rs.Usuario.organizacion_id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg',
					Ancho: 800, Alto: null, Quality: 90
				}
			}).then(function (resp) {
				console.log('Success ' + resp.config.data.file.name + 'uploaded. Response: ' + resp.data);
			}, function (resp) {
				console.log('Error status: ' + resp.status);
			});*/
		}

		//FIN DEV ANGÉLICA

	}

 
]);

//FIN DEV ANGÉLICA
angular.module('CultivoDiagCtrl', [])
.controller('CultivoDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Finca', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Finca) {

		console.info('CultivoDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Cultivo = Cultivo;	
	}
]);
angular.module('OrganizacionDiagCtrl', [])
.controller('OrganizacionDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Organizacion',
	function($scope, $rootScope, $http, $injector, $mdDialog, Organizacion) {

		console.info('OrganizacionDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Organizacion = Organizacion;
	}
]);
angular.module('UsuariosOperadorCtrl', [])
.controller('UsuariosOperadorCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 
	function($scope, $rootScope, $http, $injector, $mdDialog) {
		
		//console.info('UsuariosCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		// Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ 
		// 	base_url: '/api/usuario/usuarios-organizacion',
		// 	//limit: 100,
		// 	add_append: 'refresh',
		// 	//query_with: ['perfil', 'organizaciones_usuario']
		// });

		Ctrl.UsuariosCRUD = $injector.get('CRUD').config({ 
			base_url: '/api/usuario/usuarios',
			//limit: 100,
			add_append: 'refresh',
			query_scopes: [["organizacionusuario",Rs.Usuario.organizacion_id]]
			//query_with: ['organizaciones_usuario']
		});

		console.log("usuarios", Ctrl.UsuariosCRUD);
		
        // Esta funcion es previa, salen todos los usuarios
		// Ctrl.getUsuarios = () => {
		// 	Ctrl.UsuariosCRUD.get().then(() => {
		// 		//Ctrl.nuevoUsuario(); //FIX
		// 	});
		// };

        Ctrl.getUsuarios = () => {
            if ( Rs.Usuario.organizacion_id > 0 ) {
                // Cargar los usuario que pertenecen a la organizacion seleccionada
				/*
                $http.post('api/organizaciones/usuarios', {
                    organizacion: Rs.Usuario.organizacion_id
                }).then(res => {
                    if (res.data.length > 0) {
                        Ctrl.UsuariosCRUD.rows = res.data;
                    }
                    Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows;
                });
				*/
				//Ctrl.UsuariosCRUD.setScope("organizacionUsuario", Rs.Usuario.organizacion_id); //Me trae las fincas del usuario
                Ctrl.UsuariosCRUD.get().then(() => {
					//Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice();
                });

            } else {
                // Ctrl.getUsuarios = () => {
                // Asignar organizacion por defecto y obtener la informacion del usuario
                // 20210505 Se quita funcion de filtrar por Organizacion.
                // Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.setScope(
                //     'laorganizacion',
                //     Rs.Usuario.organizacion_id
                // );
                Ctrl.UsuariosCRUD.get().then(() => {
                    Ctrl.Usuarioscopy = Ctrl.UsuariosCRUD.rows.slice();
                    //Ctrl.cargarFincas(Ctrl.UsuariosCRUD.rows[1]); //FIX
                });
            }
        };

		Ctrl.getUsuarios();

		//INICIO JUAN TRAER NOMBRES DE DEPARTAMENTOS Y MUNICIPIO
        //Obtener el elemento de la lista
        Ctrl.getTablaDepartamentos = () => {
            $http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                Ctrl.DepartamentosTabla = r.data;
                Ctrl.Departamentos = [];
                for(let key in r.data){
                    Ctrl.Departamentos.push ({codigo: key, nombre: r.data[key]});
                }
            });
        }

        Ctrl.getTablaDepartamentos();


        //Obtener el elemento de la lista municiios
            Ctrl.getTablaMunicipios = () => {
            $http.post ('api/lista/obtener', { lista: 'Municipios' }).then((r)=>{
                Ctrl.MunicipiosTabla = r.data;
            });
        }
        
        Ctrl.getTablaMunicipios();
        //FIN JUAN TRAER NOMBRES DE DEPARTAMENTOS Y MUNICIPIOS

		Ctrl.nuevoUsuario = () => {
			Ctrl.UsuariosCRUD.dialog({}, {
				title: 'Agregar Usuario',
			}).then(r => {
				Ctrl.UsuariosCRUD.add(r).then(() => {
					Rs.showToast('Usuario creado');
				});
			});
		}

		//INICIO JUAN CARLOS
        loadDepartamentos = (col_departamento) => {
            col_departamento.Options.options = departamentos;
        }

        loadMunicipios = (valorDepartamento, col_municipio) => {
            col_municipio.Options.options = {}; //limpia el select de municipios

            $http.post ('api/lista/obtener', { lista: 'Municipios', Op1: valorDepartamento }).then((r)=>{
                col_municipio.Options.options = r.data;
			});
        }

        inicializarListaDepartamentoMunicipio = () => {
            let col_departamento = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'departamento');
            loadDepartamentos(col_departamento);

            col_departamento.Options.onChangeFn = (valorDepartamento) => {
                let col_municipio = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'municipio');
                loadMunicipios(valorDepartamento, col_municipio);
            }
        }

        Ctrl.getDepartamentos = () => {
			$http.post ('api/lista/obtener', { lista: 'Departamentos' }).then((r)=>{
                departamentos = r.data;
			});
		}

		Ctrl.getDepartamentos();

		Ctrl.editarUsuario = (U) => {
			inicializarListaDepartamentoMunicipio();
			let col_municipio = Ctrl.UsuariosCRUD.columns.find(c => c.Field == 'municipio');
			loadMunicipios(U.departamento, col_municipio);
			console.log('aqui edito este usuario', U, Ctrl.UsuariosCRUD);	
			Ctrl.UsuariosCRUD.dialog(U, {
				title: 'Editar el usuario: ' + U.nombres,
				except: [
					'finca_id',
					'organizacion_id',
					'perfil_id'
				],
				with_delete: false
			}).then(r => {
				if(!r) {Rs.showToast('Acción Cancelada'); return};
				if(r == 'DELETE') return Ctrl.UsuariosCRUD.delete(U);
				Ctrl.UsuariosCRUD.update(r).then(() => {
					Rs.showToast('Usuario actualizado');
				});
			});
		}

		 // Moda para el cambio de clave del usuario
		 Ctrl.asignarClave = U => {
			Rs.BasicDialog({
				Flex: 30,
				Title: `Cambiar Clave ${ U.nombres }`,
				Fields: [{
					Nombre: "Nueva Clave",
					Value: '', //U.contrasena,
					Type: "password",
					Required: true,
				}, ],
				Confirm: { Text: "Actualiza Clave" }
			}).then(u => {
				if (!u) return;

				var nuevaclave = u.Fields[0].Value;
				if (nuevaclave.trim() != '') {
					var ClaveCambiada = {
						usuario_id: U.id,
						contrasena: u.Fields[0].Value,
					};
					// Accedemos mediante la API para el cambio de clave.
					$http.post('/api/usuario/actualizar-clave', ClaveCambiada)
						.then(() => {
							Rs.showToast("Se cambio la clave.");
						});
				} else {
					Rs.showToast("Se envio la clave en blanco. No se modifica.");
				}
			});
		};

		Ctrl.activarToggle = U => {

			var datos = {
				usuario_id: U.id,
				estado: !U.asociado_activo
			};
			
			$http.post('/api/usuario/actualizar-estado-usuario', datos)
			.then(r => {
				if(r){
					Rs.showToast("Cambio de ESTADO Exitoso.");
					console.log("resultado",r);
				}else{
					Rs.showToast("Cambio de ESTADO falló.");
					console.log("resultado",r);
				}
			});
		}

		//Filtros para estados
		Ctrl.filtrarActivo = function(item){
			if(!Ctrl.estadoActivo){
				return true;
			}else{
				return item.asociado_activo == 1 ? true : false;
			}
		}
		Ctrl.filtrarInactivo = function(item){
			if(!Ctrl.estadoInactivo){
				return true;
			}else{
				return item.asociado_activo == 2 ? true : false;
			}
		}


	}
]);
angular.module('HomeCtrl', [])
    .controller('HomeCtrl', ['$scope', '$rootScope', '$http', '$state', '$mdDialog', '$location', 'appFunctions',
        function($scope, $rootScope, $http, $state, $mdDialog, $location, appFunctions) {

            var Ctrl = $scope;
            var Rs = $rootScope;

            // Controlador para validar al momento de cerrar la session del usuario.
            Ctrl.Logout = () => {
                let confirm = $mdDialog.confirm()
                    .title('¿Desea salir del aplicativo?')
                    .ok('Cerrar Sesion')
                    .cancel('Regresar');

                $mdDialog.show(confirm).then(() => {
                    $state.go('Login');
                });
            };


            // Modal para el cambio de clave del usuario productor
            Ctrl.cambiarClave = U => {
            Rs.BasicDialog({
                Flex: 30,
                Title: `Cambiar Clave ${ U.nombres }` ,
                Fields: [
                    {
                        Nombre: "Clave Actual",
                        Value: '', //U.contrasena,
                        Type: "password",
                        Required: true,
                    },
                    {
                        Nombre: "Nueva Clave",
                        Value: '', //U.contrasena,
                        Type: "password",
                        Required: true,
                    },
                    {
                        Nombre: "Confirmar Clave",
                        Value: '', //U.contrasena,
                        Type: "password",
                        Required: true,
                    }
                ],
                Confirm: { Text: "Actualiza Clave" }
            }).then(u => {
                if (!u) return;
                if (u.Fields[0].Value === u.Fields[1].Value){
                    Rs.showToast('La nueva clave debe ser diferente de la anterior', 'Error');
                    return;
                }
                if (u.Fields[1].Value != u.Fields[2].Value){
                    Rs.showToast('La nueva clave debe ser igual a la confirmación');
                    return;
                }
                $http.post('/api/usuario/actualizar-clave-usuario', { claveAnterior: u.Fields[0].Value, claveNueva: u.Fields[1].Value })
                    .then( () => {
                        Rs.showToast("Se cambio la clave.");
                    })
                    .catch(e => {
                        Rs.showToast(e.data.Msg, "Error");
                        console.log(e);
                    });
                /*var nuevaclave = u.Fields[1].Value;
                if ( nuevaclave.trim() != '' ) {
                    var ClaveCambiada = {
                        usuario_id: U.id,
                        contrasena: u.Fields[1].Value,
                    };
                    // Accedemos mediante la API para el cambio de clave.
                    $http.post('/api/usuario/actualizar-clave', ClaveCambiada)
                        .then( () => {
                            Rs.showToast("Se cambio la clave.");
                        });
                } else {
                    Rs.showToast("Se envio la clave en blanco. No se modifica.");
                }*/
            });
        };

            // Cargar el listado de secciones
            Ctrl.obtenerSecciones = () => {
                Ctrl.logoInicio = true;
                $http.post('api/main/obtener-secciones', {}).then(r => {
                    Rs.Secciones = r.data;
                });
            };
            Ctrl.obtenerSecciones();

            // Gestion del Estado
            Rs.cambioEstado = function() {
                Rs.Estado = $state.current;
                Rs.Estado.ruta = $location.path().split('/');
            };

            // Carga del menu segund la seccion cargada
            Rs.navegarSubseccion = (Seccion, Subseccion) => {
                $state.go('Home.Seccion.Subseccion', { 
                    seccion: Seccion, 
                    subseccion: Subseccion 
                });
            };
            
            // Función para actualizar un campo en la tabla del usuario.
            Rs.actualizarUsuario = ( campo, valor ) => {
                if ( !campo || !valor )
                    return;
                    Rs.Usuario.organizacion_id = valor;
                $http.post('api/usuario/actualizarcampo', {
                    usuarioid: Rs.Usuario['id'],
                    campo: campo, 
                    valor: valor
                }).then( () => {
                    $state.reload();
                    // console.log("Recargando Pagina")
                });
            }
            
            // Validar el rol para cargar opciones de organizaciones y fincas
            // Administrador: 1 | Operaor: 2 | Soporte: 3 | Productor: 4 
            switch( parseInt(Rs.Usuario['perfil_id']) ) {
                case 1:
                    Ctrl.listaOrganizacion = false;
                    Ctrl.listaFinca = false;
                    break;
                    
                case 2:
                    Ctrl.listaOrganizacion = true;
                    Ctrl.listaFinca = false;
                    break;
                    
                case 3:
                    Ctrl.listaOrganizacion = false;
                    Ctrl.listaFinca = false;
                    break;
                    
                case 4:
                    Ctrl.listaOrganizacion = true;
                    Ctrl.listaFinca = true;
                    break;

                default:
                    Ctrl.listaOrganizacion = false;
                    Ctrl.listaFinca = false;
                    break;
                    
            }

            Rs.$on("$stateChangeSuccess", Rs.cambioEstado);

            Rs.cambioEstado();
        }
    ]);

angular.module('LoginCtrl', [])
.controller('LoginCtrl', ['$rootScope', '$http', '$state', '$localStorage', '$mdToast', 
	function($rootScope, $http, $state, $localStorage, $mdToast){

		var Rs = $rootScope;
		delete $localStorage.token;

		// Formulario de inicio: cargar datos en blanco.
		Rs.Usuario = {
			Correo:'', // 'info@mbrain.co',
			Password: '' // '123'
		};

		// Funcion para enviar datos al server y validar la sesion del usuario.
		Rs.enviarLogin = (ev) => {
			ev.preventDefault();
			$http.post('/api/usuario/login', { Credenciales: Rs.Usuario })
			.then((r) => {
				
				/*Operaciones originales al logearse
				let token = r.data;
				$localStorage.token = token;
				$state.go('Home');
				*/

				/*Operaciones nuevas para logearse*/
				let token = r.data.token;
				let perfil = r.data.perfil_id;
				$localStorage.token = token;
				if(perfil == 4){
					$state.go('Home.Seccion.Subseccion', { 
						seccion: "GestionOrganizacion", 
						subseccion: "Organizacion"
					});
				}else{
					$state.go('Home');
				}
				
			}).catch( resp => {
				// Retorno de mensaje, en caso de datos NO validos.
				Rs.showToast(resp.data.Msg);
			});
		}

		Rs.def = function(arg, def) {
			return (typeof arg == 'undefined' ? def : arg);
		};

		// Configuracion de TOAST para la carga de mensajes.
		Rs.showToast = function(Msg, Type, Delay = 5000, Position){
			var Type = Rs.def(Type, 'Normal');
			var Position = Rs.def(Position, 'bottom left')
			var Templates = {
				Normal: '<md-toast class="md-toast-normal"><span flex>' + Msg + '<span></md-toast>',
				Error:  '<md-toast class="md-toast-error"><span flex>' + Msg + '<span></md-toast>',
				Success:  '<md-toast class="md-toast-success"><span flex>' + Msg + '<span></md-toast>',
			};
			return $mdToast.show({
				template: Templates[Type],
				hideDelay: Delay,
				position: Position
			});
		};

	}
]);

angular.module('MainCtrl', [])
.controller('MainCtrl', ['$rootScope', 
	function($rootScope){
		let Rs = $rootScope;
	}
]);
angular.module('FincaDiagCtrl', [])
.controller('FincaDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Finca', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Finca) {

		console.info('FincaDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Finca = Finca;
		// Ctrl.Tarea = Tarea;
		
	}
]);
angular.module('LaboresDiagCtrl', [])
.controller('LaboresDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Labor', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Labor) {

		console.info('LaboresDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Labor = Labor;
		
		
	}
]);

angular.module('LoteDiagCtrl', [])
.controller('LoteDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Finca', 
	function($scope, $rootScope, $http, $injector, $mdDialog, Lote) {

		console.info('LoteDiagCtrl');
		var Ctrl = $scope;
		var Rs = $rootScope;

		Ctrl.Salir = $mdDialog.cancel;
		Ctrl.Lote = Lote;
		// Ctrl.Tarea = Tarea;
		
	}
]);
angular.module('ArticuloDiagCtrl', [])
    .controller('ArticuloDiagCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Articulo',
        function($scope, $rootScope, $http, $injector, $mdDialog, Articulo) {

            //console.info('ArticuloDiagCtrl');
            var Ctrl = $scope;
            var Rs = $rootScope;

            Ctrl.Salir = $mdDialog.cancel;
            Ctrl.Articulo = Articulo;

        }
    ]);
angular.module('MiTecnicoAmigoCtrl', [])
    .controller('MiTecnicoAmigoCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', '$state',
        function($scope, $rootScope, $http, $injector, $mdDialog, $state) {
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Por defecto carga la subseccion Inicio (MiTecnicoAmigo) :: Luigi
            Ctrl.Subseccion = 'Inicio';
            Ctrl.PalabrasClave = [];
            Ctrl.Cancel = $mdDialog.cancel;
             //INICIO DEV ANGELICA
             Ctrl.SelectedKey = false;
             Ctrl.key = "";
             Ctrl.keys= [];
             Ctrl.ArticulosBuscados = [];
             Ctrl.ArticulosLinea = [];
             Ctrl.LineasProductivasUsuario = [];

             // Cargar los lotes de la finca seleccionada
            Ctrl.cargarLineasProductivasUsuario = () => {
                loteSeleccionado = 0;
                lineaSeleccionada = 0;
                $http.post('api/lotes/lineaproductivausuario', { 
                    usuario: Rs.Usuario.id
                }).then(res => {
                    console.log(res.data);
                    res.data.forEach(function(lp) {
                        Ctrl.LineasProductivasUsuario.push(lp.linea_productiva_id);
                    });
                });
            };

            Ctrl.cargarLineasProductivasUsuario();

            Ctrl.getOpciones = () => {
                Rs.http('/api/opciones', {}, Ctrl, 'Opciones');
                //let opciones =  Rs.http('/api/opciones', {});
                //console.log(opciones);
            }

            Ctrl.getOpciones()


            $http.post('api/articulos/obtener', {}).then(
                r => {
                    Ctrl.Articulos = r.data;
                    //Inicio Dev Angélica -- seleccionar las palabras claves
                    let keys = [];
                    Ctrl.Articulos.forEach(function(articulo) {
                        if (Ctrl.LineasProductivasUsuario.indexOf(articulo.linea_productiva_id) >=0) {
                            Ctrl.ArticulosLinea.push(articulo);
                        }
                        if (articulo.palabras_clave && articulo.palabras_clave.length > 3) {
                            keys.push(...articulo.palabras_clave.split(","));
                        }
                    });
                    console.log(Ctrl.ArticulosLinea);
                    keys = keys.sort().filter(function(item, pos, ary) {
                        return !pos || item != ary[pos - 1];
                    });
                    // console.log(keys);
                    Ctrl.PalabrasClave = keys;
                });
            //Fin Dev Angélica 


            Ctrl.abrirArticulo = (A) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.ArticuloDiag',
                    controller: 'ArticuloDiagCtrl',
                    locals: { Articulo: A },
                    fullscreen: false,
                });
            };

            //Casos :: Inicia Luigi
            // Obtener toda la información y metodos de CASOS
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
                query_with: ['novedades', 'solicitante'],
                order_by: []
            });

            Ctrl.getCasos = () => {
                //Inicio Dev Angélica
                //Filtra el tipo (sólo muestra los casos que deben aparecer en pantalla)-->'Consulta General', 'Apoyo Tecnico', 'Contar Experiencia' [ver archivo Caso.php]
                Ctrl.CasosCRUD.setScope('tipo');
                Ctrl.CasosCRUD.get();
                //Fin Dev Angélica
            }
            Ctrl.getCasos();
            //Casos :: Finaliza Luigi

            Ctrl.crearCaso = (opcion) => {

                if(opcion == 1){
                    var OpcionesTipo = [
                        ['Quiero Contar Una Experiencia', 'Contar Experiencia']
                    ];
                    var opcion = { Nombre: '¿En Qué Puedo Ayudarte?', Value: 'Quiero Contar Una Experiencia', Type: 'simplelist', List: OpcionesTipo.map(a => a[0]), Required: true };
                }else{
                    var OpcionesTipo = [
                        ['Tengo una Duda General', 'Consulta General'],
                        ['Necesito Ayuda Técnica', 'Apoyo Técnico'],
                        ['Quiero Contar Una Experiencia', 'Contar Experiencia']
                    ];
                    var opcion = { Nombre: '¿En Qué Puedo Ayudarte?', Value: 'Tengo una Duda General', Type: 'simplelist', List: OpcionesTipo.map(a => a[0]), Required: true };
                }

                Rs.BasicDialog({
                    Flex: 30,
                    Title: 'Crear Nueva Solicitud',
                    Fields: [
                        //{ Nombre: '¿En Qué Puedo Ayudarte?', Value: 'Tengo una Duda General', Type: 'simplelist', List: OpcionesTipo.map(a => a[0]), Required: true },
                        opcion,
                        { Nombre: 'Describe el Caso', Value: '', Type: 'textarea', Required: true, opts: { rows: 3 } }
                    ],
                    Confirm: { Text: 'Crear Solicitud' },
                }).then(r => {
                    if (!r) return;

                    var NuevoCaso = {
                        titulo: r.Fields[1].Value,
                        solicitante_id: Rs.Usuario.id,
                        tipo: 'Contar Experiencia',
                        asignados: '[]'
                    };
                    Ctrl.CasosCRUD.add(NuevoCaso);
                    Ctrl.navegarA('Solicitudes');
                });
            };

            //INICIO DEV ANGÉLICA
            Ctrl.crearCasoTelefonico = (medio) => {
                var NuevoCaso = {
                    titulo: 'Boton Contacto',
                    solicitante_id: Rs.Usuario.id,
                    tipo: medio,
                    asignados: '[]'
                };
                alert('Inicia llamado al WS')
                Ctrl.CasosCRUD.add(NuevoCaso);
            };
            //FIN DEV ANGELICA

            // Novedad Caso :: Inicia Luigi
            // Abrir el modal para la revisión y creación de novedades por Caso
            Ctrl.novedadesCaso = (C) => {
                $mdDialog.show({
                    templateUrl: 'Frag/MiTecnicoAmigo.MiTecnicoAmigo_SolicitudesDetalleDiag',
                    controller: 'SolicitudesDetalleCtrl',
                    locals: {
                        Caso: C
                    },
                });
            };
            // Novedad Caso :: Finaliza Luigi

            //INICIO DEV ANGÉLICA ---> Filtro de búsqueda 
            Ctrl.suppressSpecialCharacters = (word) => { // funcion para buscar con tiltes
                return word.toLowerCase().replace(" de ", " ")
                .replace(" en ", " ")
                .replace(" para ", " ")
                .replace(" por ", " ")
                .replace(" la ", " ")
                .replace("é", "e")
                .replace("á", "a")
                .replace("í", "i")
                .replace("ó", "o")
                .replace("ú", "u")
                .replace(" y ", " ");
            }
            Ctrl.searchChange = function() {
                let filtro = Ctrl.filtroArticulos;
                if (!filtro) return Ctrl.Buscando = false;
                filtro = Ctrl.suppressSpecialCharacters(filtro);

                if (filtro == "") return Ctrl.Buscando = false;
                let keys = filtro.toLowerCase().split(" ");
                Ctrl.keys = [];//nuevo
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    keys.forEach(function(key) {
                        if (Ctrl.suppressSpecialCharacters(articulo.titulo.toLowerCase()).indexOf(key) >= 0) {
                            articulo.contador++;
                        }
                    });
                    // Recorre cada una de las palabras digitadas en el filtro
                    keys.forEach(function (palabra){
                        // Separa cada una de las pabras clave del artuculo
                        let keys = articulo.palabras_clave && articulo.palabras_clave.toLowerCase().split(",");
                        // Buscamos si la palabra del filtro esta en la lista de palabras clave
                        if (keys && keys.includes(palabra)) {
                            articulo.contador++; 
                            Ctrl.SelectedKey = true;
                            Ctrl.keys.push(palabra);
                        }
                    });                    
                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                });
                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };
            //FIN DEV ANGÉLICA

            //INICIO DEV ANGÉLICA -- Search key words
            Ctrl.searchKeyWords = (key) => {
                var ArticulosBuscados = [];
                Ctrl.Buscando = true;
                Ctrl.SelectedKey = true;
                Ctrl.key = key;
                Ctrl.Articulos.forEach(function(articulo) {
                    articulo.contador = 0;
                    if (articulo.palabras_clave && articulo.palabras_clave.indexOf(key) >= 0) {
                        articulo.contador++;
                    }
                    if (articulo.contador > 0) ArticulosBuscados.push(articulo);
                });
                Ctrl.ArticulosBuscados = ArticulosBuscados;
            };

            Ctrl.cleanFilter = () => {
                Ctrl.SelectedKey = false;
                Ctrl.key = "";
                Ctrl.Buscando = false;
                Ctrl.ArticulosBuscados = [];
                Ctrl.keys = [];
            };

            //FIN DEV ANGÉLICA

            // Navegar :: Inicia Luigi
            // Metodo para navegar en opciones de Mi Tecnico Amigo
            Ctrl.navegarA = (s) => {
                $state.go('Home.Seccion.Subseccion', { subseccion: s });
            };
            // Navegar :: Finaliza Luigi

            if(document.getElementById("paco") != undefined){
                imagenes = ["paco1.png","paco2.png","paco3.png"];
                //alert(Math.ceil(Math.random()*3)-1);
                document.getElementById("paco").src = "imgs/" + imagenes[Math.ceil(Math.random()*3)-1];
            }
            
        }
    ]);

// Inicio del codigo de Luigi
angular.module('SolicitudesDetalleCtrl', [])
    .controller('SolicitudesDetalleCtrl', ['$scope', '$rootScope', '$http', '$injector', '$mdDialog', 'Caso',
        function($scope, $rootScope, $http, $injector, $mdDialog, Caso) {
            // Creamos y asignamos la variables Ctrl y scope
            var Ctrl = $scope;
            var Rs = $rootScope;

            // Creamos copia de Caso
            Ctrl.Caso = angular.copy(Caso);

            // Activamos el evento Cancel, para cerrar modales
            Ctrl.Cancel = $mdDialog.cancel;

            // Obtenemos los datos de novedades por caso, en NovedaesCRUD
            Ctrl.NovedadesCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/novedades',
                limit: 1000,
                query_with: ['autor'],
                add_append: 'refresh',
            });
            //console.log(Ctrl.NovedadesCRUD);

            // Obtenemos los datos de casos, en CasosCRUD
            Ctrl.CasosCRUD = $injector.get('CRUD').config({
                base_url: '/api/casos/casos',
                limit: 1000,
                add_append: 'refresh',
            });

            // Creamos listado de Tipo de novedad
            Ctrl.TipoNovedad = {
                'Parrafo': { Nombre: 'Parrafo', icono: 'fa-align-justify' },
                'Imagen': { Nombre: 'Imagen', icono: 'fa-image' }
            }

            // Obtenemos la infromación de un caso especifico con el ID
            Ctrl.getNovedades = () => {
                Ctrl.NovedadesCRUD.setScope('elcaso', Caso.id).get();
            }

            Ctrl.getNovedades();

            Ctrl.guardarCaso = () => {
                Ctrl.CasosCRUD.update(Ctrl.Caso);
            };

            // Evento para el registro de la novedad en un caso específico.
            Ctrl.crearNovedad = async(tipo, contenido) => {
                var novedad = contenido;
                if (tipo == 'Imagen') {
                    var Imagen = await $mdDialog.show({
                        templateUrl: 'templates/dialogs/image-editor.html',
                        controller: 'ImageEditor_DialogCtrl',
                        multiple: true,
                        locals: {
                            Config: {
                                Theme: 'default',
                                CanvasWidth: 600,
                                CanvasHeight: 400,
                                CropWidth: 600,
                                CropHeight: 400,
                                MinWidth: 60,
                                MinHeight: 40,
                                KeepAspect: true,
                                Preview: false,
                                Daten: {
                                    Path: 'files/casos_media/' + Caso.id + '/' + moment().format('YYYYMMDDHHmmss') + '.jpg'
                                }
                            }
                        }
                    });
                    novedad = Imagen.Msg;
                }
                if (tipo == 'Texto') {
                    Ctrl.detallecaso = '';
                }
                Ctrl.NovedadesCRUD.add({
                    caso_id: Caso.id,
                    tipo: tipo,
                    novedad: novedad,
                    usuario_id: Rs.Usuario.id
                });
            };
        }
    ]);
// Fin del codigo de Luigi

angular.module('CreditoSrv', []).factory('CreditoSrv', [
  function (){
  	let Srv = {};

  	Srv.Scales = {
		 '1_M': { key:  '1_M', Nombre: 'Mensuales',		  Meses:  1,  PeriodosAno: 12 },
		 '2_M': { key:  '2_M', Nombre: 'Bimestrales',	  Meses:  2,  PeriodosAno:  6 },	
		 '3_M': { key:  '3_M', Nombre: 'Trimestrales',	  Meses:  3,  PeriodosAno:  4 },	
		 '4_M': { key:  '4_M', Nombre: 'Cuatrimestrales', Meses:  4,  PeriodosAno:  3 },		
		 '6_M': { key:  '6_M', Nombre: 'Semestrales',	  Meses:  6,  PeriodosAno:  2 },	
		'12_M': { key: '12_M', Nombre: 'Anuales',		  Meses: 12,  PeriodosAno:  1 },
	};

	Srv.ScalesRef = {
		'Mensuales': '1_M',		
		'Bimestrales': '2_M',
		'Trimestrales': '3_M',	
		'Cuatrimestrales': '4_M',
		'Semestrales': '6_M',
		'Anuales': '12_M',
	}

  	//Funcion de calculo de cuotas
	Srv.CalcCuotas = function(Monto, Interes, Scale, Periodos, Periodos_Gracia, Primer_Pago, Start_Pago){

		let Amortable = [];
		let AmortableRes = { Capital: 0, Interes: 0, Ajuste: 0, Total: 0 };

		let Meses = Srv.Scales[Scale].Meses;
		let PeriodosAno = Srv.Scales[Scale].PeriodosAno;
		//console.log('Interes', Interes);
		let TasaPer = Math.pow( (1 + (Interes) ), (1/PeriodosAno) ) - 1;
		let Periodos_Pago = Periodos - Periodos_Gracia;
		let FacAnu = TasaPer / (1 - ( 1/ ( Math.pow( ( 1 + TasaPer ), Periodos_Pago ) )  ));
		let Fec = angular.copy(moment(Primer_Pago)); //Fecha Inicial, Hoy

		let Deuda = angular.copy(Monto);

		let CuotaPer = Math.ceil(Monto * FacAnu);

		let Cuota = 0;

		

		for (let i = Start_Pago; i < (Periodos+Start_Pago); i++) {
			
			let Am = {
				Num_Pago: i,
				Capital: 0,
				Interes: 0,
				Total:   0,
				Deuda:   0,
			};

			Fec = Fec.add(Meses, 'M');

			Am.Fecha = Fec.format("YYYY-MM-DD");
			Am.Interes = Math.ceil( Deuda * TasaPer );

			if(i <= Periodos_Gracia){
				Am.Total = Am.Interes;
			}else{
				Am.Total = CuotaPer;
				Am.Capital = Am.Total - Am.Interes;
				Cuota = CuotaPer;
			}

			Deuda = Deuda - Am.Capital;
			if(Deuda < 50){
				Am.Capital = Am.Capital + Deuda;
				Am.Total   = Am.Total + Deuda;
				Deuda = 0;
			}
			Am.Deuda = Deuda;

			Amortable.push(Am);

			AmortableRes.Capital += Am.Capital;
			AmortableRes.Interes += Am.Interes;
			AmortableRes.Total += Am.Total;
		}

		return {
			Amortable: Amortable,
			AmortableRes: AmortableRes,
			Cuota: Cuota,
		}
	};


	return Srv;
  }
]);
angular.module('CRUD', [])
.factory('CRUD', [ '$rootScope', '$q', '$mdDialog',
	function($rootScope, $q, $mdDialog){

		var Rs = $rootScope;

		var CRUD = function(ops) {
			var t = this;

			t.ops = {
				base_url: '',
				name: '',
				primary_key: 'id',
				ready: false,
				where: {},
				limit: 10000,
				loading: false,
				obj: null,
				only_columns: [],
				add_append: 'end',
				add_research: false,
				add_with: false,
				query_scopes: [],
				query_with: [],
				query_call: [],
				query_call_arr: [],
				order_by: [],
				selected:[],
				clear_rows: false,
			};
			t.columns = [];
			t.rows = [];

			angular.extend(t.ops, ops);

			//console.info('Crud initiated', t.ops);
			t.get_columns = () => {
				return Rs.http(t.ops.base_url, { fn: 'get_columns', ops: t.ops }).then(function(r) {
					t.columns = r.ops.columns;
				});
			};

			t.get = function(columns){
				
				if(t.ops.loading) return false;
				t.ops.loading = true;

				t.ops.only_columns = Rs.def(columns, []);
				if(t.ops.clear_rows) t.rows = [];

				return Rs.http(t.ops.base_url, { fn: 'get', ops: t.ops }).then(function(r) {
					if(r.ops){
						t.columns = r.ops.columns;
						delete r.ops.columns;
						angular.extend(t.ops, r.ops);
					};
					t.rows = r.rows;
					t.ops.loading = false;
				});
			};


			t.where = function(where){
				t.ops.where[where[0]] = where;
				return t;
			};

			t.find = function(id, main, prop){
				t.ops.find_id = id;
				return Rs.http(t.ops.base_url, { fn: 'find', ops: t.ops }, main, prop);
			};

			t.add = function(Obj){
				t.ops.obj = Obj;
				return Rs.http(t.ops.base_url, { fn: 'add', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					if(t.ops.add_append == 'end'){ t.rows.push(r); }
					else if(t.ops.add_append == 'start'){ t.rows.unshift(r); }
					else if(t.ops.add_append == 'refresh'){ t.get(); };
					return r;
				});
			};

			t.addMultiple = function(Objs){
				t.ops.obj = Objs;
				return Rs.http(t.ops.base_url, { fn: 'addmultiple', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					t.get();
					return r;
				});
			};

			t.update = function(Obj){
				t.ops.obj = Obj;
				return Rs.http(t.ops.base_url, { fn: 'update', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					Rs.updateArray(t.rows, r, t.ops.primary_key);
					return r;
				});
			};

			t.updateMultiple = function(Objs){
				t.ops.obj = Objs || angular.copy(t.ops.selected);
				return Rs.http(t.ops.base_url, { fn: 'updatemultiple', ops: t.ops }).then(function(rs) {
					angular.forEach(rs, (r) => {
						Rs.updateArray(t.rows, r, t.ops.primary_key);
					});
					t.ops.obj = null;
					t.ops.selected = [];
				});
			};

			t.delete = function(Obj){
				t.ops.obj = Obj;
				var Index = Rs.getIndex(t.rows, Obj[t.ops.primary_key], t.ops.primary_key);
				return Rs.http(t.ops.base_url, { fn: 'delete', ops: t.ops }).then(function(r) {
					t.ops.obj = null;
					t.rows.splice(Index, 1);
				});
			};

			t.deleteMultiple = function(){
				t.ops.obj = angular.copy(t.ops.selected);
				return Rs.http(t.ops.base_url, { fn: 'deletemultiple', ops: t.ops }).then(function(r) {
					angular.forEach(t.ops.obj, (Obj) => {
						var Index = Rs.getIndex(t.rows, Obj[t.ops.primary_key], t.ops.primary_key);
						t.rows.splice(Index, 1);
					});
					t.ops.obj = null;
					t.ops.selected = [];
				});
			};

			t.dialog = function(Obj, diagConfig){
				var config = {
					theme: 'default',
					title: '',
					class: 'wu400',
					controller: 'CRUDDialogCtrl',
					templateUrl: '/templates/dialogs/crud-dialog.html',
					fullscreen: false,
					clickOutsideToClose: false,
					multiple: true,
					ev: null,
					confirmText: 'Guardar',
					with_delete: true,
					delete_title: '',
					only: [],
					except:[],
					buttons: [],
				};

				angular.extend(config, diagConfig);

				return $mdDialog.show({
					controller:  config.controller,
					templateUrl: config.templateUrl,
					locals: 	{ ops : t.ops, config: config, columns: t.columns, Obj: Obj, rows: t.rows },
					clickOutsideToClose: config.clickOutsideToClose,
					fullscreen:  config.fullscreen,
					multiple: 	 config.multiple,
					targetEvent: config.ev
				});
			};

			//Poner un scope
			t.setScope = (Scope, Params) => {
				var Index = -1;
				angular.forEach(t.ops.query_scopes, ($S, $k) => {
					if($S[0] == Scope){ Index = $k; return; }
				});
				if(Index == -1){
					t.ops.query_scopes.push([ Scope, Params ]);
				}else{
					t.ops.query_scopes[Index] = [ Scope, Params ];
				};
				return t;
			};

			//Obtener un elemento por primary_key
			t.one = (key) => {
				var Index = Rs.getIndex(t.rows, key, t.ops.primary_key);
				return t.rows[Index];
			};

		};

		return {
			config: function (ops) {
				//console.log('Creating', ops);
				var DaCRUD = new CRUD(ops);
				return DaCRUD;
			}
		};
	}
]);
angular.module('Filters', [])
	.filter('to_trusted', ['$sce', function($sce){
		return function(text) {
			return $sce.trustAsHtml(text);
		};
	}])
	.filter('findId', function() {
		return function(input, id) {
			var i=0, len=input.length;
			for (; i<len; i++) {
			  if (+input[i].id == +id) {
				return input[i];
			  }
			}
			return null;
		 };
	}).filter('getIndex', function() {
		return function(input, id, attr) {
			var len=input.length;
			attr = (typeof attr !== 'undefined') ? attr : 'id';
			for (i=0; i<len; i++) {
			  if(input[i][attr] === id) {
				return i;
			  }
			}
			return null;
		 };
	}).filter('include', function() {
		return function(input, include, prop) {
			if (!angular.isArray(input)) return input;
			if (!angular.isArray(include)) include = [];
			return input.filter(function byInclude(item) {
				return include.indexOf(prop ? item[prop] : item) != -1;
			});
		};
	}).filter('exclude', function() {
		return function(input, exclude, prop) {
			if (!angular.isArray(input)) return input;
			if (!angular.isArray(exclude)) exclude = [];
			/*if (prop) {
				exclude = exclude.map(function byProp(item) {
					return item[prop];
				});
			};*/

			return input.filter(function byExclude(item) {
				return exclude.indexOf(prop ? item[prop] : item) === -1;
			});
		};
	}).filter('category', function() {
		return function(input, category, prop) {
			//console.log(input, category, prop);
			if (!angular.isArray(input)) return input;
			if(!category) return input;
			return input.filter(function(item){
				return item[prop] == category;
			});
			//return input[prop] == category;
		};
	}).filter('toArray', function () {
		return function (obj, addKey) {
			if (!angular.isObject(obj)) return obj;
			if ( addKey === false ) {
			return Object.keys(obj).map(function(key) {
				return obj[key];
			});
			} else {
			return Object.keys(obj).map(function (key) {
				var value = obj[key];
				return angular.isObject(value) ?
				Object.defineProperty(value, '$key', { enumerable: false, value: key}) :
				{ $key: key, $value: value };
			});
			}
		};
	}).filter('pluck', function() {
		return function(array, key, unique) {
			var res = new Array();
			angular.forEach(array, function(v) {
				if(unique && res.indexOf(v[key]) !== -1) return false;
				res.push(v[key]);
			});
			return res;
		};
	}).filter('switch', function() {
	    return function(input, boolean) {
	    	return (boolean) ? input : [];
	    }
	}).filter('search', function() {
		return function(input, search) {
			if (!input) return input;
			if (!search) return input;
			var expected = ('' + search).toLowerCase();
			var result = {};
			angular.forEach(input, function(value, key) {
				var actual = ('' + value).toLowerCase();
				if (actual.indexOf(expected) !== -1) {
					result[key] = value;
				}
			});
			return result;
		}
	}).filter('capitalize', function() {
	    return function(input) {
	      return (!!input) ? input.charAt(0).toUpperCase() + input.substr(1).toLowerCase() : '';
	    }
	}).filter('capitwords', function() {
	    return function(input,limit) {
	    	if (!input) return '';
	    	input = input.split('_').join(' ');
	    	limit = (!!limit) ? limit : 2;
	    	return input.split(' ').map(function(wrd){
	    		return (wrd.length) > limit ? wrd.charAt(0).toUpperCase() + wrd.substr(1).toLowerCase() : wrd.toLowerCase();
	    	}).join(' ');
	    }
	}).filter('traducirum', function() {
	    return function(input,um) {
	    	if(input <= 0){
	    		return 'No incluido';
	    	}else if(um == 'KG'){
	    			 if(input < 1){ input = input*1000; um = 'Gramos'  }
	    		else if(input == 1){ um = 'Kilo'  }
	    		else if(input > 1 && input < 1000 ){ um = 'Kilos'  }
	    		else if(input >= 1000){ input = input/1000; um = 'Toneladas'  }
	    	}else if(um == 'LT'){
	    			 if(input < 1){ input = input*1000; um = 'Mililitros'  }
	    		else if(input == 1){ um = 'Litro'  }
	    		else if(input > 1 ){ um = 'Litros'  }
	    	}else if(um == 'UN'){
	    			 if(input <= 1){ um = 'Unidad'  }
	    		else if(input > 1 ){ um = 'Unidades'  }
	    	};
	    	return input + ' ' + um;
	    }
	}).filter('percentage', ['$filter', function ($filter) {
		return function (input, decimals) {
		return $filter('number')(input * 100, decimals) + '%';
		};
	}]).filter('numberformat', ['$filter', function ($filter) {
		return function (input, tipodato, decimales) {
			if(!input) return input;
			if(tipodato == 'Porcentaje') input = input * 100;
			var number = $filter('number')(input, decimales);
			if(tipodato == 'Porcentaje') return number + "%";
			if(tipodato == 'Moneda') return "$ " + number;
			return number;
		};
	}]).filter('splice', function() {
		return function(input, index, len) {
			if(!input) return input;
			//if(!index || !len) return input;
			return input.splice(index, len);
		};
	}).filter('getword', function() {
		return function(input, index) {
			if(!input) return input;
			var arr = input.split(' ');
			return arr[index-1];
		};
	}).filter('sum', function() {
		return function(array, key) {
			var sum = 0;
			angular.forEach(array, function(v) {
				sum += parseFloat(v[key]);
			});
			return sum;
		};
	});
// Reacts upon enter key press.
angular.module('enterStroke', []).directive('enterStroke',
  function () {
    return function (scope, element, attrs) {
      element.bind('keydown keypress', function (event) {
        if(event.which === 13) {
          scope.$apply(function () {
            scope.$eval(attrs.enterStroke);
          });
          event.preventDefault();
        }
      });
    };
  }
);
angular.module('extSubmit', []).directive("extSubmit", ['$timeout',function($timeout){
    return {
        link: function($scope, $el, $attr) {
            $scope.$on('makeSubmit', function(event, data){
              if(data.formName === $attr.name) {
                $timeout(function() {
                  $el.triggerHandler('submit'); //<<< This is Important
                  //$el[0].dispatchEvent(new Event('submit')) //equivalent with native event
                }, 0, false);   
              }
            })
        }
    };
}]);
angular.module('fileread', [])
.directive("fileread", [function () {
    return {
        scope: {
            fileread: "="
        },
        link: function (scope, element, attributes) {
            element.bind("change", function (changeEvent) {
                var reader = new FileReader();
                reader.onload = function (loadEvent) {
                    scope.$apply(function () {
                        scope.fileread = JSON.parse(loadEvent.target.result);
                    });
                }
                reader.readAsDataURL(changeEvent.target.files[0]);
            });
        }
    }
}]);
angular.module('focusOn', [])
.directive('focusOn', function() {
   return function(scope, elem, attr) {
      scope.$on(attr.focusOn, function(e) {
      		setTimeout(function(){ 
      			elem[0].focus();
          		console.log('Focused', elem);
      		}, 3000);
      });
   };
});
angular.module('horizontalScroll', []).
directive('horizontalScroll', function () {

    return {
        link:function (scope, element, attrs) {
            var base = 0

            element.bind("DOMMouseScroll mousewheel onmousewheel", function(event) {

                // cross-browser wheel delta
                var event = window.event || event; // old IE support
                var delta = Math.max(-1, Math.min(1, (event.wheelDelta || -event.detail)));


                scope.$apply(function(){
                    base += (30*delta);
                    //console.log(element, base);
                    element.children().css({'transform':'translateX('+base+'px)'});
                    //element.scrollLeft(base);
                });

                // for IE
                event.returnValue = false;
                // for Chrome and Firefox
                if(event.preventDefault) { event.preventDefault(); }


            });
        }
    };
});
angular.module('hoverClass', [])
.directive('hoverClass', [function () {
    return {
        restrict: 'A',
        scope: {
            hoverClass: '@'
        },
        link: function (scope, element) {
            element.on('mouseenter', function() {
                element.addClass(scope.hoverClass);
            });
            element.on('mouseleave', function() {
                element.removeClass(scope.hoverClass);
            });
        }
    };
}]);
(function () {
    'use strict';

    angular.module('ngJsonExportExcel', [])
        .directive('ngJsonExportExcel', function () {
            return {
                restrict: 'AE',
                scope: {
                    data : '=',
                    filename: '=?',
                    reportFields: '=',
                    separator: '@'
                },
                link: function (scope, element) {
                    scope.filename = !!scope.filename ? scope.filename : 'export-excel';
                    scope.extension = !!scope.extension ? scope.extension : '.csv';

                    var fields = [];
                    var header = [];
                    var separator = scope.separator || ';';

                    angular.forEach(scope.reportFields, function(field, key) {
                        if(!field || !key) {
                            throw new Error('error json report fields');
                        }

                        fields.push(key);
                        header.push(field);
                    });

                    element.bind('click', function() {
                        var bodyData = _bodyData();
                        var strData = _convertToExcel(bodyData);

                        var blob = new Blob([strData], { 
                            type: "text/plain;charset=utf-8"
                            //type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=utf-8"
                        });

                        return saveAs(blob, [scope.filename + scope.extension ]);
                    });

                    function _bodyData() {
                        var data = scope.data;
                        var body = "";
                        angular.forEach(data, function(dataItem) {
                            var rowItems = [];

                            angular.forEach(fields, function(field) {
                                if(field.indexOf('.')) {
                                    field = field.split(".");
                                    var curItem = dataItem;

                                    // deep access to obect property
                                    angular.forEach(field, function(prop){
                                        if (curItem !== null && curItem !== undefined) {
                                            curItem = curItem[prop];
                                        }
                                    });

                                    data = curItem;
                                }
                                else {
                                    data = dataItem[field];
                                }

                                var fieldValue = data !== null ? data : ' ';

                                if (fieldValue !== undefined && angular.isObject(fieldValue)) {
                                    fieldValue = _objectToString(fieldValue);
                                }

                                rowItems.push(fieldValue);
                            });

                            body += rowItems.join(separator) + '\n';
                        });

                        return body;
                    }

                    function _convertToExcel(body) {
                        return header.join(separator) + '\n' + body;
                    }

                    function _objectToString(object) {
                        var output = '';
                        angular.forEach(object, function(value, key) {
                            output += key + ':' + value + ' ';
                        });

                        return '"' + output + '"';
                    }
                }
            };
        });
})();
/*! ng-csv 10-10-2015 */
!function(a){angular.module("ngCsv.config",[]).value("ngCsv.config",{debug:!0}).config(["$compileProvider",function(a){angular.isDefined(a.urlSanitizationWhitelist)?a.urlSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/):a.aHrefSanitizationWhitelist(/^\s*(https?|ftp|mailto|file|data):/)}]),angular.module("ngCsv.directives",["ngCsv.services"]),angular.module("ngCsv.services",[]),angular.module("ngCsv",["ngCsv.config","ngCsv.services","ngCsv.directives","ngSanitize"]),"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngCsv"),angular.module("ngCsv.services").service("CSV",["$q",function(a){var b="\r\n",c="﻿",d={"\\t":"	","\\b":"\b","\\v":"","\\f":"\f","\\r":"\r"};this.stringifyField=function(a,b){return"locale"===b.decimalSep&&this.isFloat(a)?a.toLocaleString():"."!==b.decimalSep&&this.isFloat(a)?a.toString().replace(".",b.decimalSep):"string"==typeof a?(a=a.replace(/"/g,'""'),(b.quoteStrings||a.indexOf(",")>-1||a.indexOf("\n")>-1||a.indexOf("\r")>-1)&&(a=b.txtDelim+a+b.txtDelim),a):"boolean"==typeof a?a?"TRUE":"FALSE":a},this.isFloat=function(a){return+a===a&&(!isFinite(a)||Boolean(a%1))},this.stringify=function(d,e){var f=a.defer(),g=this,h="",i="",j=a.when(d).then(function(a){if(angular.isDefined(e.header)&&e.header){var d,j;d=[],angular.forEach(e.header,function(a){this.push(g.stringifyField(a,e))},d),j=d.join(e.fieldSep?e.fieldSep:","),i+=j+b}var k=[];if(angular.isArray(a)?k=a:angular.isFunction(a)&&(k=a()),angular.isDefined(e.label)&&e.label&&"boolean"==typeof e.label){var l,m;l=[],angular.forEach(k[0],function(a,b){this.push(g.stringifyField(b,e))},l),m=l.join(e.fieldSep?e.fieldSep:","),i+=m+b}angular.forEach(k,function(a,c){var d,f,h=angular.copy(k[c]);f=[];var j=e.columnOrder?e.columnOrder:h;angular.forEach(j,function(a){var b=e.columnOrder?h[a]:a;this.push(g.stringifyField(b,e))},f),d=f.join(e.fieldSep?e.fieldSep:","),i+=c<k.length?d+b:d}),e.addByteOrderMarker&&(h+=c),h+=i,f.resolve(h)});return"function"==typeof j["catch"]&&j["catch"](function(a){f.reject(a)}),f.promise},this.isSpecialChar=function(a){return void 0!==d[a]},this.getSpecialChar=function(a){return d[a]}}]),angular.module("ngCsv.directives").directive("ngCsv",["$parse","$q","CSV","$document","$timeout",function(b,c,d,e,f){return{restrict:"AC",scope:{data:"&ngCsv",filename:"@filename",header:"&csvHeader",columnOrder:"&csvColumnOrder",txtDelim:"@textDelimiter",decimalSep:"@decimalSeparator",quoteStrings:"@quoteStrings",fieldSep:"@fieldSeparator",lazyLoad:"@lazyLoad",addByteOrderMarker:"@addBom",ngClick:"&",charset:"@charset",label:"&csvLabel"},controller:["$scope","$element","$attrs","$transclude",function(a,b,e){function f(){var b={txtDelim:a.txtDelim?a.txtDelim:'"',decimalSep:a.decimalSep?a.decimalSep:".",quoteStrings:a.quoteStrings,addByteOrderMarker:a.addByteOrderMarker};return angular.isDefined(e.csvHeader)&&(b.header=a.$eval(a.header)),angular.isDefined(e.csvColumnOrder)&&(b.columnOrder=a.$eval(a.columnOrder)),angular.isDefined(e.csvLabel)&&(b.label=a.$eval(a.label)),b.fieldSep=a.fieldSep?a.fieldSep:",",b.fieldSep=d.isSpecialChar(b.fieldSep)?d.getSpecialChar(b.fieldSep):b.fieldSep,b}a.csv="",angular.isDefined(a.lazyLoad)&&"true"==a.lazyLoad||angular.isArray(a.data)&&a.$watch("data",function(){a.buildCSV()},!0),a.getFilename=function(){return a.filename||"download.csv"},a.buildCSV=function(){var g=c.defer();return b.addClass(e.ngCsvLoadingClass||"ng-csv-loading"),d.stringify(a.data(),f()).then(function(c){a.csv=c,b.removeClass(e.ngCsvLoadingClass||"ng-csv-loading"),g.resolve(c)}),a.$apply(),g.promise}}],link:function(b,c){function d(){var c=b.charset||"utf-8",d=new Blob([b.csv],{type:"text/csv;charset="+c+";"});if(a.navigator.msSaveOrOpenBlob)navigator.msSaveBlob(d,b.getFilename());else{var g=angular.element('<div data-tap-disabled="true"><a></a></div>'),h=angular.element(g.children()[0]);h.attr("href",a.URL.createObjectURL(d)),h.attr("download",b.getFilename()),h.attr("target","_blank"),e.find("body").append(g),f(function(){h[0].click(),h.remove()},null)}}c.bind("click",function(){b.buildCSV().then(function(){d()}),b.$apply()})}}}])}(window,document);
angular.module('ngRightClick', [])
.directive('ngRightClick', ['$parse', function($parse){
	return function(scope, element, attrs) {
        var fn = $parse(attrs.ngRightClick);
        element.bind('contextmenu', function(event) {
            scope.$apply(function() {
                event.preventDefault();
                fn(scope, {$event:event});
            });
        });
    };
}]);
// Reacts upon enter key press.
angular.module('printThis', []).directive('printThis',
  function () {
    return function (scope, element, attrs) {
      element.bind('click', function (event) {
          event.preventDefault();
          //return false;

          $(attrs.printThis).printThis({
          		debug: false,
              importStyle: true,
          });
      });
    };
  }
);